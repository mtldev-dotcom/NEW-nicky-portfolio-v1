Directory structure:
└── mtldev-dotcom-new-nicky-portfolio-v1/
    ├── README.md
    ├── middleware.ts
    ├── next-intl.config.ts
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── tsconfig.json
    ├── .cursorignore
    ├── .dockerignore
    ├── .eslintrc.json
    ├── docs/
    │   ├── README.md
    │   ├── ai-agent-configuration-guide.md
    │   ├── chatbot-n8n-integration.md
    │   ├── chatbot-webhook-setup-troubleshooting.md
    │   ├── chatbot-workflow-enhancement-plan.md
    │   ├── chatbot-workflow-implementation-guide.md
    │   ├── contact-form-n8n-integration.md
    │   ├── conversation-analytics-tracking-guide.md
    │   ├── enhanced-response-format-frontend-integration.md
    │   ├── nickbruno-text-content.md
    │   ├── rate-limiting-security-implementation.md
    │   ├── troubleshooting.md
    │   └── dev/
    │       └── new-full-text-content.md
    ├── public/
    │   ├── _redirects
    │   ├── manifest.json
    │   └── assets/
    │       └── icons/
    │           └── Tech-Stack-Icons-Design-Stack-Icons-dark-mode/
    │               ├── chatgpt.webp
    │               └── svgtopng.zip
    └── src/
        ├── app/
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── not-found.tsx
        │   ├── opengraph-image.tsx
        │   ├── page.tsx
        │   └── [locale]/
        │       ├── layout.tsx
        │       ├── page.tsx
        │       ├── about/
        │       │   └── page.tsx
        │       ├── contact/
        │       │   └── page.tsx
        │       ├── portfolio/
        │       │   └── page.tsx
        │       └── services/
        │           └── page.tsx
        ├── components/
        │   ├── AppIcon.tsx
        │   ├── AppImage.tsx
        │   ├── ErrorBoundary.tsx
        │   ├── ScrollToTop.tsx
        │   ├── sections/
        │   │   ├── about/
        │   │   │   ├── AboutSection.tsx
        │   │   │   ├── CareerTimeline.tsx
        │   │   │   ├── CredentialsShowcase.tsx
        │   │   │   ├── ExperienceCounter.tsx
        │   │   │   └── PersonalIntro.tsx
        │   │   ├── contact/
        │   │   │   ├── ContactForm.tsx
        │   │   │   ├── ContactInfo.tsx
        │   │   │   ├── ContactSection.tsx
        │   │   │   ├── FAQSection.tsx
        │   │   │   ├── LocationMap.tsx
        │   │   │   └── ProjectBrief.tsx
        │   │   ├── hero/
        │   │   │   ├── FloatingTaglines.tsx
        │   │   │   ├── HeroContent.tsx
        │   │   │   ├── HeroExperience.tsx
        │   │   │   ├── HeroPortrait.tsx
        │   │   │   ├── HolographicOverlay.tsx
        │   │   │   ├── LoadingAnimation.tsx
        │   │   │   └── ParallaxBackground.tsx
        │   │   ├── home/
        │   │   │   ├── HomeBenefits.tsx
        │   │   │   ├── HomeCapabilities.tsx
        │   │   │   ├── HomeFeaturedProjects.tsx
        │   │   │   ├── HomeIntro.tsx
        │   │   │   ├── HomeTestimonials.tsx
        │   │   │   ├── IconSphere.tsx
        │   │   │   ├── TechStackCloud.tsx
        │   │   │   └── TechStackShowcase.tsx
        │   │   ├── portfolio/
        │   │   │   ├── FeaturedProject.tsx
        │   │   │   ├── PortfolioSection.tsx
        │   │   │   ├── ProjectCard.tsx
        │   │   │   ├── ProjectFilter.tsx
        │   │   │   └── ProjectModal.tsx
        │   │   ├── services/
        │   │   │   ├── CapabilityStats.tsx
        │   │   │   ├── ProcessTimeline.tsx
        │   │   │   ├── ServiceCard.tsx
        │   │   │   ├── ServicesSection.tsx
        │   │   │   └── TechStack.tsx
        │   │   └── testimonials/
        │   │       ├── ClientLogos.tsx
        │   │       ├── IndustryBadges.tsx
        │   │       ├── LinkedInRecommendations.tsx
        │   │       ├── TestimonialCard.tsx
        │   │       ├── TestimonialCarousel.tsx
        │   │       ├── TestimonialsSection.tsx
        │   │       └── VideoTestimonial.tsx
        │   ├── shadcn/
        │   │   └── ui/
        │   │       ├── button.tsx
        │   │       ├── checkbox.tsx
        │   │       └── input.tsx
        │   └── ui/
        │       ├── Button.tsx
        │       ├── Chatbot.tsx
        │       ├── ChatInput.tsx
        │       ├── ChatMessage.tsx
        │       ├── Checkbox.tsx
        │       ├── Footer.tsx
        │       ├── Header.tsx
        │       ├── Input.tsx
        │       ├── LanguageSwitcher.tsx
        │       ├── LinkButton.tsx
        │       └── Select.tsx
        ├── i18n/
        │   ├── config.ts
        │   ├── getMessages.ts
        │   ├── request.ts
        │   └── messages/
        │       ├── en/
        │       │   ├── about.json
        │       │   ├── chatbot.json
        │       │   ├── contact.json
        │       │   ├── global.json
        │       │   ├── home.json
        │       │   ├── portfolio.json
        │       │   └── services.json
        │       └── fr/
        │           ├── about.json
        │           ├── chatbot.json
        │           ├── contact.json
        │           ├── global.json
        │           ├── home.json
        │           ├── portfolio.json
        │           └── services.json
        ├── styles/
        │   ├── index.css
        │   └── tailwind.css
        └── utils/
            └── cn.ts

================================================
FILE: README.md
================================================
# Nicky Bruno Portfolio

A sophisticated portfolio experience for creative technologist Nicky Bruno, built with **Next.js 15 (App Router)** and **TypeScript**.  
This project showcases a modern dark-themed design with holographic-inspired UI elements, comprehensive internationalization, and a robust component architecture.

## 🎯 Project Overview

This portfolio demonstrates advanced web development practices including:
- **Immersive hero experience** with parallax backgrounds and animated elements
- **Comprehensive i18n implementation** with structured translation management
- **Modern component architecture** with reusable UI primitives
- **Sophisticated animation system** using Framer Motion
- **Responsive design** with mobile-first approach
- **Performance optimization** with proper code splitting and lazy loading

---

## 🛠 Tech Stack

### Core Framework
- **Next.js 15 (App Router)** — streaming routes, metadata, built-in i18n routing  
- **TypeScript** — typed components, utilities, and strict path aliases  
- **React 18** — modern React patterns with concurrent features

### Styling & Design
- **Tailwind CSS** — utility-first styling with custom tokens & motion helpers  
- **shadcn-inspired UI primitives** — accessible buttons, inputs, selects, and checkboxes (Radix + CVA)  
- **Framer Motion** — layered parallax, animated loaders, and micro-interactions  
- **Custom CSS Properties** — comprehensive design system with neon-mint theme

### Internationalization
- **next-intl v4** — locale-aware routing and translation scaffolding (EN/FR)
- **Structured translations** — organized by pages and global components

### Additional Libraries
- **Lucide Icons** — iconography via the reusable `AppIcon` wrapper  
- **Redux Toolkit** — state management (available)
- **React Hook Form** — form handling (available)
- **D3** — data visualization (available)
- **Recharts** — chart components (available)
- **axios** — HTTP client (available)

---

## 🚀 Getting Started

### Prerequisites

- **Node.js 20.19.0** or newer (as specified in package.json engines)
- npm (bundled with Node)

### Installation

```bash
npm install
```

### Local Development

```bash
npm run dev
```

Visit `http://localhost:3000` to iterate on the site. The app will automatically redirect to `/en` (default locale).

### Production Build & Preview

```bash
npm run build
npm start        # serves the production bundle on port 3000
```

### Linting

```bash
npm run lint
```

---

---

## 📁 Project Structure

```
.
├── public/                       # Static assets (logos, favicons, imagery)
│   └── assets/
│       ├── icons/                # Tech stack icons (light/dark modes)
│       └── images/               # Profile images and graphics
└── src/
    ├── app/                      # Next.js App Router entries & metadata
    │   ├── layout.tsx            # Root layout (sets <html> lang via middleware header)
    │   ├── globals.css           # Global styles and CSS imports
    │   ├── [locale]/             # Locale-scoped routes (en/fr)
    │   │   ├── layout.tsx        # Loads messages + wraps with NextIntl provider
    │   │   ├── page.tsx          # Home (hero experience)
    │   │   ├── about/            # About page
    │   │   ├── services/         # Services page
    │   │   ├── portfolio/        # Portfolio page
    │   │   └── contact/          # Contact page
    │   └── opengraph-image.tsx   # Dynamic OG image generation
    ├── components/
    │   ├── sections/             # Section-specific composition & motion
    │   │   ├── hero/             # Hero experience components
    │   │   ├── about/            # About section components
    │   │   ├── services/         # Services section components
    │   │   ├── portfolio/        # Portfolio section components
    │   │   ├── testimonials/    # Testimonials section components
    │   │   ├── contact/          # Contact section components
    │   │   └── home/             # Home page specific components
    │   ├── ui/                   # Reusable UI primitives
    │   │   ├── Button.tsx         # Enhanced button with icon support
    │   │   ├── Input.tsx         # Form input component
    │   │   ├── Header.tsx        # Navigation header
    │   │   ├── Footer.tsx        # Site footer
    │   │   └── ...               # Other UI components
    │   ├── shadcn/               # shadcn/ui components
    │   │   └── ui/               # Base shadcn components
    │   ├── AppIcon.tsx           # Icon wrapper component
    │   ├── AppImage.tsx          # Image wrapper component
    │   ├── ErrorBoundary.tsx     # Error boundary component
    │   └── ScrollToTop.tsx       # Scroll to top functionality
    ├── i18n/                     # Internationalization configuration
    │   ├── config.ts             # Locale configuration
    │   ├── getMessages.ts         # Message loading utility
    │   ├── request.ts            # next-intl request configuration
    │   └── messages/             # Translation files
    │       ├── en/               # English translations
    │       │   ├── global.json   # Global/common translations
    │       │   ├── home.json     # Home page translations
    │       │   ├── about.json    # About page translations
    │       │   ├── services.json # Services page translations
    │       │   ├── portfolio.json# Portfolio page translations
    │       │   └── contact.json  # Contact page translations
    │       └── fr/               # French translations
    │           ├── global.json   # Global/common translations
    │           ├── home.json     # Home page translations
    │           ├── about.json   # About page translations
    │           ├── services.json# Services page translations
    │           ├── portfolio.json# Portfolio page translations
    │           └── contact.json  # Contact page translations
    ├── styles/                   # Styling configuration
    │   ├── tailwind.css          # Tailwind CSS with custom properties
    │   └── index.css             # Additional custom styles
    └── utils/                     # Shared utilities
        └── cn.ts                  # Class name utility (clsx + tailwind-merge)
```

**Key Architecture Notes:**
- **Locale-scoped routing**: All pages live under `/[locale]/*` for proper i18n support
- **Component organization**: Clear separation between UI primitives and section-specific components
- **Translation structure**: Organized by pages and global components for better maintainability
- **Design system**: Comprehensive CSS custom properties with neon-mint theme

---

## 🌐 Internationalization (i18n)

This project uses **next-intl v4** with Next.js 15 App Router and explicit locale-prefixed routing.

### URL Structure
- `/` → 307 redirect to `/en`
- `/en/*` and `/fr/*` serve localized pages under the top-level `[locale]` segment
- **Supported locales**: English (en), French (fr)

### Translation File Structure

The project uses a **structured translation approach** for better organization and maintainability:

```
src/i18n/messages/
├── en/                    # English translations
│   ├── global.json       # Global/common translations (navigation, buttons, etc.)
│   ├── home.json         # Home page specific translations
│   ├── about.json        # About page specific translations
│   ├── services.json     # Services page specific translations
│   ├── portfolio.json    # Portfolio page specific translations
│   └── contact.json      # Contact page specific translations
└── fr/                    # French translations
    ├── global.json       # Global/common translations
    ├── home.json         # Home page specific translations
    ├── about.json        # About page specific translations
    ├── services.json     # Services page specific translations
    ├── portfolio.json    # Portfolio page specific translations
    └── contact.json      # Contact page specific translations
```

### Using Translations in Components

**Client Components:**
```tsx
'use client';
import { useLocale, useTranslations } from 'next-intl';

export default function Example() {
  const locale = useLocale();
  const tGlobal = useTranslations('global');
  const tHome = useTranslations('home');
  
  return (
    <div>
      <h1>{tHome('hero.title')}</h1>
      <button>{tGlobal('navigation.cta')}</button>
      <span>Current locale: {locale}</span>
    </div>
  );
}
```

**Server Components:**
```tsx
import { getTranslations } from 'next-intl/server';

export default async function ServerComponent() {
  const t = await getTranslations('home.hero');
  
  return <h1>{t('title')}</h1>;
}
```

**Language Switcher:**
The project includes a built-in language switcher component that allows users to switch between English and French:

```tsx
import LanguageSwitcher from 'components/ui/LanguageSwitcher';

// Desktop version
<LanguageSwitcher variant="desktop" />

// Mobile version (full width)
<LanguageSwitcher variant="mobile" />
```

**Links with Locale Prefix:**
```tsx
import Link from 'next/link';
import { useLocale } from 'next-intl';

export default function Navigation() {
  const locale = useLocale();
  
  return (
    <Link href={`/${locale}/about`}>
      About
    </Link>
  );
}
```

### Adding New Translations

1. **Add new keys** to the appropriate JSON file in both `en/` and `fr/` directories
2. **Use nested objects** for better organization (e.g., `home.hero.title`)
3. **Keep translations consistent** across all locales
4. **Test both locales** to ensure proper rendering

---

## 🎨 Design System & Styling

### Theme Configuration
- **Dark theme** with neon-mint (#00FFD1) primary accent color
- **Comprehensive CSS custom properties** defined in `src/styles/tailwind.css`
- **Custom Tailwind utilities** for glow effects, smooth transitions, and magnetic hover
- **Typography hierarchy** using Space Grotesk (headings) and Inter (body text)

### Key Design Tokens
```css
/* Primary Colors */
--color-primary: #00FFD1;        /* neon-mint */
--color-background: #000000;     /* black */
--color-foreground: #FFFFFF;     /* white */

/* Custom Utilities */
.glow-neon { box-shadow: var(--shadow-glow); }
.transition-smooth { transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1); }
.magnetic-hover:hover { transform: scale(1.02); }
```

### Component Styling Guidelines
1. **Use CSS custom properties** for consistent theming
2. **Apply glow effects** sparingly for emphasis
3. **Maintain smooth transitions** for all interactive elements
4. **Follow responsive design** patterns with mobile-first approach

---

## 🛠 Developer Guidelines

### Code Style & Conventions

**Component Structure:**
  ```tsx
'use client'; // Only for client components

import { useTranslations, useLocale } from 'next-intl';
import { motion } from 'framer-motion';
import Button from 'components/ui/Button';

// Type definitions at the top
interface ComponentProps {
  title: string;
  description?: string;
}

// Component implementation
const ComponentName = ({ title, description }: ComponentProps) => {
  const t = useTranslations('namespace');
  const locale = useLocale();
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-4"
    >
      <h2 className="font-space-grotesk text-2xl font-bold text-foreground">
        {title}
      </h2>
      {description && (
        <p className="font-inter text-muted-foreground">
          {description}
        </p>
      )}
    </motion.div>
  );
};

export default ComponentName;
```

**Translation Usage:**
- **Always use structured translations** with proper namespacing
- **Extract all user-facing text** to translation files
- **Use semantic keys** (e.g., `hero.title` instead of `title1`)
- **Test both locales** during development

**Animation Guidelines:**
- **Use Framer Motion** for complex animations
- **Apply consistent easing** with `cubic-bezier(0.4, 0, 0.2, 1)`
- **Respect reduced motion** preferences
- **Keep animations purposeful** and not distracting

### File Organization

**Component Files:**
- **One component per file** with matching filename
- **Export default** the main component
- **Use PascalCase** for component names
- **Group related components** in the same directory

**Import Order:**
1. React/Next.js imports
2. Third-party libraries
3. Internal components (UI primitives first)
4. Types and utilities
5. Relative imports

### Performance Best Practices

1. **Use dynamic imports** for heavy components
2. **Implement proper loading states** for async operations
3. **Optimize images** with Next.js Image component
4. **Minimize bundle size** with proper code splitting
5. **Use React.memo** for expensive components when needed

---

## 🚀 Deployment

### Production Build
```bash
npm run build
npm start
```

### Deployment Checklist
- [ ] **Build succeeds** without errors or warnings
- [ ] **All translations** are properly loaded
- [ ] **Images and assets** are optimized
- [ ] **Environment variables** are configured
- [ ] **Middleware** is deployed for i18n routing
- [ ] **Open Graph images** are generated correctly

### Hosting Recommendations
- **Vercel** (recommended for Next.js)
- **Netlify** with proper redirects
- **Custom Node.js server** with PM2
- **Docker** containerization for scalability

---

## 🔧 Development Tools

### Recommended VS Code Extensions
- **Tailwind CSS IntelliSense** - Autocomplete for Tailwind classes
- **TypeScript Importer** - Auto-import TypeScript modules
- **ES7+ React/Redux/React-Native snippets** - React code snippets
- **Prettier** - Code formatting
- **ESLint** - Code linting

### Useful Commands
```bash
# Development
npm run dev              # Start development server
npm run build           # Build for production
npm run lint            # Run ESLint

# Translation management
# Add new translation keys to both en/ and fr/ directories
# Test both locales: http://localhost:3000/en and http://localhost:3000/fr
```

---

## 📈 Future Enhancements

### Planned Features
- **Automated testing** with Playwright/Cypress
- **Visual regression testing** for design consistency
- **Performance monitoring** with Web Vitals
- **Analytics integration** for user behavior tracking
- **CMS integration** for content management
- **Light mode theme** variant
- **Additional language support** (Spanish, German)

### Technical Improvements
- **Component library expansion** with more shadcn/ui primitives
- **Advanced animation system** with GSAP integration
- **Progressive Web App** features
- **SEO optimization** with structured data
- **Accessibility improvements** (WCAG 2.1 AA compliance)

---

## 🤝 Contributing

### Development Workflow
1. **Create feature branch** from `main`
2. **Follow naming conventions** for components and files
3. **Add translations** for both English and French
4. **Test on both locales** before committing
5. **Write descriptive commit messages**
6. **Create pull request** with detailed description

### Code Review Checklist
- [ ] **Translations** are complete for both locales
- [ ] **TypeScript** types are properly defined
- [ ] **Responsive design** works on all screen sizes
- [ ] **Animations** are smooth and purposeful
- [ ] **Performance** impact is minimal
- [ ] **Accessibility** standards are met

---

**Happy coding! 🚀** 

This portfolio showcases modern web development practices and serves as a comprehensive example of Next.js 15, TypeScript, and internationalization best practices.



================================================
FILE: middleware.ts
================================================
import createMiddleware from 'next-intl/middleware';
import { defaultLocale, locales } from './src/i18n/config';

export default createMiddleware({
  defaultLocale,
  locales,
  localeDetection: true,
});

export const config = {
  matcher: ['/', '/(?!_next|.*\\..*|api).+'],
};



================================================
FILE: next-intl.config.ts
================================================
export default {
  // Supported locales for the site
  locales: ['en', 'fr'],

  // Default locale to use
  defaultLocale: 'en',

  // With the app directory structure using /[locale]/..., we must ALWAYS prefix the locale
  // so that / redirects to /en and routes like /en/about-section resolve correctly.
  localePrefix: 'always'
};



================================================
FILE: next.config.mjs
================================================
import createNextIntlPlugin from 'next-intl/plugin';

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true
};

const withNextIntl = createNextIntlPlugin();
export default withNextIntl(nextConfig);



================================================
FILE: package.json
================================================
{
  "name": "nicky-bruno-portfolio-next",
  "version": "0.1.0",
  "private": true,
  "engines": {
    "node": ">=20.19.0"
  },
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@dhiwise/component-tagger": "^1.0.10",
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@reduxjs/toolkit": "^2.6.1",
    "@tailwindcss/forms": "^0.5.7",
    "axios": "^1.8.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "d3": "^7.9.0",
    "date-fns": "^4.1.0",
    "dotenv": "^16.0.1",
    "framer-motion": "^10.16.4",
    "lucide-react": "^0.484.0",
    "next": "15.0.0",
    "next-intl": "^4.3.12",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-hook-form": "^7.55.0",
    "recharts": "^2.15.2",
    "redux": "^5.0.1",
    "TagCloud": "^2.5.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "tailwindcss-elevation": "^2.0.0",
    "tailwindcss-fluid-type": "^2.0.7"
  },
  "devDependencies": {
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/container-queries": "^0.1.1",
    "@tailwindcss/line-clamp": "^0.1.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^24.7.1",
    "@types/react": "^18.3.26",
    "@types/react-dom": "^18.3.7",
    "autoprefixer": "10.4.2",
    "eslint": "^8.57.0",
    "eslint-config-next": "15.0.0",
    "postcss": "8.4.8",
    "tailwindcss": "3.4.6",
    "typescript": "^5.9.3"
  }
}



================================================
FILE: postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};



================================================
FILE: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./src/app/**/*.{js,jsx,ts,tsx}",
    "./src/components/**/*.{js,jsx,ts,tsx}",
    "./src/**/*.{js,jsx,ts,tsx}"
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px"
      }
    },
    extend: {
      colors: {
        border: "var(--color-border)",
        input: "var(--color-input)",
        ring: "var(--color-ring)",
        background: "var(--color-background)",
        foreground: "var(--color-foreground)",
        primary: {
          DEFAULT: "var(--color-primary)",
          foreground: "var(--color-primary-foreground)"
        },
        secondary: {
          DEFAULT: "var(--color-secondary)",
          foreground: "var(--color-secondary-foreground)"
        },
        destructive: {
          DEFAULT: "var(--color-destructive)",
          foreground: "var(--color-destructive-foreground)"
        },
        muted: {
          DEFAULT: "var(--color-muted)",
          foreground: "var(--color-muted-foreground)"
        },
        accent: {
          DEFAULT: "var(--color-accent)",
          foreground: "var(--color-accent-foreground)"
        },
        popover: {
          DEFAULT: "var(--color-popover)",
          foreground: "var(--color-popover-foreground)"
        },
        card: {
          DEFAULT: "var(--color-card)",
          foreground: "var(--color-card-foreground)"
        },
        success: {
          DEFAULT: "var(--color-success)",
          foreground: "var(--color-success-foreground)"
        },
        warning: {
          DEFAULT: "var(--color-warning)",
          foreground: "var(--color-warning-foreground)"
        },
        error: {
          DEFAULT: "var(--color-error)",
          foreground: "var(--color-error-foreground)"
        },
        surface: {
          DEFAULT: "var(--color-surface)",
          foreground: "var(--color-surface-foreground)"
        },
        "text-primary": "var(--color-text-primary)",
        "text-secondary": "var(--color-text-secondary)",
        "neon-mint": {
          DEFAULT: "var(--color-neon-mint)",
          dark: "var(--color-neon-mint-dark)",
          light: "var(--color-neon-mint-light)"
        }
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)"
      },
      fontFamily: {
        "space-grotesk": ["Space Grotesk", "sans-serif"],
        inter: ["Inter", "sans-serif"],
        "jetbrains-mono": ["JetBrains Mono", "monospace"],
        sans: ["Inter", "sans-serif"],
        mono: ["JetBrains Mono", "monospace"]
      },
      fontSize: {
        hero: ["4rem", { lineHeight: "1.1", letterSpacing: "-0.02em" }],
        display: ["3rem", { lineHeight: "1.2", letterSpacing: "-0.01em" }],
        heading: ["2rem", { lineHeight: "1.3" }],
        subheading: ["1.5rem", { lineHeight: "1.4" }],
        body: ["1rem", { lineHeight: "1.6" }],
        caption: ["0.875rem", { lineHeight: "1.5" }],
        micro: ["0.75rem", { lineHeight: "1.4" }]
      },
      spacing: {
        xs: "var(--spacing-xs)",
        sm: "var(--spacing-sm)",
        md: "var(--spacing-md)",
        lg: "var(--spacing-lg)",
        xl: "var(--spacing-xl)",
        "2xl": "var(--spacing-2xl)"
      },
      boxShadow: {
        glow: "var(--shadow-glow)",
        "glow-active": "var(--shadow-glow-active)",
        card: "var(--shadow-card)",
        "card-hover": "var(--shadow-card-hover)"
      },
      animation: {
        "fade-in": "fadeIn 0.5s ease-out",
        "slide-up": "slideUp 0.5s ease-out",
        "slide-down": "slideDown 0.5s ease-out",
        "scale-in": "scaleIn 0.3s ease-out",
        "glow-pulse": "glowPulse 2s ease-in-out infinite",
        float: "float 3s ease-in-out infinite",
        orbit: "orbit 10s linear infinite",
        magnetic: "magnetic 0.2s ease-out",
        "slide-in-from-top-2": "slideInFromTop2 0.2s ease-out"
      },
      keyframes: {
        fadeIn: {
          "0%": { opacity: "0" },
          "100%": { opacity: "1" }
        },
        slideUp: {
          "0%": { transform: "translateY(20px)", opacity: "0" },
          "100%": { transform: "translateY(0)", opacity: "1" }
        },
        slideDown: {
          "0%": { transform: "translateY(-20px)", opacity: "0" },
          "100%": { transform: "translateY(0)", opacity: "1" }
        },
        scaleIn: {
          "0%": { transform: "scale(0.95)", opacity: "0" },
          "100%": { transform: "scale(1)", opacity: "1" }
        },
        glowPulse: {
          "0%, 100%": { boxShadow: "0 0 20px rgba(0, 255, 209, 0.3)" },
          "50%": { boxShadow: "0 0 40px rgba(0, 255, 209, 0.6)" }
        },
        float: {
          "0%, 100%": { transform: "translateY(0px)" },
          "50%": { transform: "translateY(-10px)" }
        },
        orbit: {
          "0%": { transform: "rotate(0deg) translateX(100px) rotate(0deg)" },
          "100%": {
            transform: "rotate(360deg) translateX(100px) rotate(-360deg)"
          }
        },
        magnetic: {
          "0%": { transform: "scale(1)" },
          "100%": { transform: "scale(1.02)" }
        },
        slideInFromTop2: {
          "0%": { transform: "translateY(-8px)", opacity: "0" },
          "100%": { transform: "translateY(0)", opacity: "1" }
        }
      },
      backdropBlur: {
        xs: "2px"
      },
      perspective: {
        1000: "1000px",
        1500: "1500px",
        2000: "2000px"
      },
      transformStyle: {
        "preserve-3d": "preserve-3d"
      },
      backfaceVisibility: {
        hidden: "hidden"
      }
    }
  },
  plugins: [
    require("tailwindcss-animate"),
    function ({ addUtilities }) {
      const newUtilities = {
        ".perspective-1000": {
          perspective: "1000px"
        },
        ".perspective-1500": {
          perspective: "1500px"
        },
        ".perspective-2000": {
          perspective: "2000px"
        },
        ".transform-style-preserve-3d": {
          "transform-style": "preserve-3d"
        },
        ".backface-hidden": {
          "backface-visibility": "hidden"
        },
        ".text-glow": {
          "text-shadow": "0 0 10px currentColor"
        },
        ".glow-neon": {
          "box-shadow": "var(--shadow-glow)"
        },
        ".glow-neon-active": {
          "box-shadow": "var(--shadow-glow-active)"
        },
        ".transition-smooth": {
          transition: "all 300ms cubic-bezier(0.4, 0, 0.2, 1)"
        },
        ".transition-fast": {
          transition: "all 200ms cubic-bezier(0.4, 0, 0.2, 1)"
        },
        ".transition-slow": {
          transition: "all 400ms cubic-bezier(0.4, 0, 0.2, 1)"
        }
      };
      addUtilities(newUtilities);
    }
  ]
};



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": false,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "tsBuildInfoFile": ".tsbuildcache/tsconfig.tsbuildinfo",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ],
      "components/*": [
        "src/components/*"
      ],
      "styles/*": [
        "styles/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================
FILE: .cursorignore
================================================
.dev  # Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)



================================================
FILE: .dockerignore
================================================
# Node modules and package caches
node_modules
.pnpm-store
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Build outputs
dist
build
.next
out

# Environment files
.env
.env.local
.env.*.local

# OS / editor files
.DS_Store
.vscode
.idea

# Misc
coverage
.cache
*.log
docs
tsconfig.tsbuildinfo
.tsbuildcache/



================================================
FILE: .eslintrc.json
================================================
{
  "extends": ["next/core-web-vitals"],
  "rules": {
    "react/no-unescaped-entities": "off"
  }
}



================================================
FILE: docs/README.md
================================================
# Chatbot Workflow Documentation Index

## Overview

This directory contains comprehensive documentation for the Nicky Bruno chatbot workflow enhancement project. The documentation is organized into focused guides covering different aspects of the chatbot optimization.

## Documentation Structure

### 📋 Planning & Strategy
- **[Chatbot Workflow Enhancement Plan](./chatbot-workflow-enhancement-plan.md)**
  - Comprehensive overview of the enhancement project
  - Current state analysis and improvement areas
  - Phased implementation roadmap
  - Success metrics and risk assessment

### 🤖 AI Configuration
- **[AI Agent Configuration Guide](./ai-agent-configuration-guide.md)**
  - Detailed prompt configuration instructions
  - Language-specific response guidelines
  - Testing procedures and best practices
  - Monitoring and optimization strategies

### 🔒 Security & Rate Limiting
- **[Rate Limiting & Security Implementation](./rate-limiting-security-implementation.md)**
  - Rate limiting strategy and implementation
  - Security measures and abuse prevention
  - Input validation and session security
  - Monitoring and alerting procedures

### 📊 Analytics & Tracking
- **[Conversation Analytics & Tracking Guide](./conversation-analytics-tracking-guide.md)**
  - Analytics framework and data collection
  - Google Sheets integration structure
  - Performance monitoring and reporting
  - Privacy and compliance considerations

### 🎨 Frontend Integration
- **[Enhanced Response Format & Frontend Integration](./enhanced-response-format-frontend-integration.md)**
  - Enhanced response format specifications
  - React component integration examples
  - Rate limit handling and user experience
  - Performance optimization strategies

### 🛠️ Implementation
- **[Chatbot Workflow Implementation Guide](./chatbot-workflow-implementation-guide.md)**
  - Step-by-step implementation instructions
  - Detailed configuration examples
  - Testing procedures and validation
  - Monitoring and maintenance guidelines

## Quick Start Guide

### For Developers
1. Start with the **[Implementation Guide](./chatbot-workflow-implementation-guide.md)** for step-by-step instructions
2. Reference the **[AI Agent Configuration Guide](./ai-agent-configuration-guide.md)** for prompt setup
3. Use the **[Enhanced Response Format Guide](./enhanced-response-format-frontend-integration.md)** for frontend integration

### For Project Managers
1. Review the **[Enhancement Plan](./chatbot-workflow-enhancement-plan.md)** for project overview
2. Check the **[Implementation Guide](./chatbot-workflow-implementation-guide.md)** for timeline and milestones
3. Monitor progress using the success criteria outlined in each document

### For DevOps/Security
1. Focus on the **[Rate Limiting & Security Guide](./rate-limiting-security-implementation.md)** for security implementation
2. Use the **[Analytics Guide](./conversation-analytics-tracking-guide.md)** for monitoring setup
3. Reference the **[Implementation Guide](./chatbot-workflow-implementation-guide.md)** for deployment procedures

## Implementation Phases

### Phase 1: Core Improvements (Week 1)
- [ ] Update AI Agent prompt
- [ ] Implement rate limiting
- [ ] Add error handling
- [ ] Test core functionality

### Phase 2: Advanced Features (Week 2)
- [ ] Enhance conversation memory
- [ ] Set up analytics tracking
- [ ] Optimize response format
- [ ] Performance testing

### Phase 3: Intelligence & Optimization (Week 3)
- [ ] Add context awareness
- [ ] Implement sentiment analysis
- [ ] Set up auto-escalation
- [ ] Final testing and optimization

## Key Features Overview

### 🤖 Enhanced AI Agent
- Professional, comprehensive prompt
- Language-specific responses (EN/FR)
- Context-aware conversations
- Escalation capabilities

### 🔒 Security & Rate Limiting
- Session-based rate limiting (10 messages/5 min)
- IP-based rate limiting (50 messages/hour)
- Input validation and spam detection
- Abuse prevention mechanisms

### 📊 Analytics & Tracking
- Conversation metrics tracking
- User engagement analysis
- Performance monitoring
- Business intelligence reporting

### 🎨 Enhanced User Experience
- Structured response format
- Dynamic suggestion generation
- Action buttons for next steps
- Rate limit handling with countdown

### 🧠 Advanced Intelligence
- Sentiment analysis
- Auto-escalation for complex questions
- Multi-turn conversation optimization
- Context awareness based on user history

## Technical Requirements

### n8n Configuration
- n8n instance with admin access
- Google Sheets OAuth2 credentials
- OpenAI API key
- Gmail OAuth2 credentials

### Frontend Requirements
- React/Next.js application
- TypeScript support
- Tailwind CSS for styling
- next-intl for internationalization

### Data Storage
- Google Sheets for analytics
- Session storage for rate limiting
- Conversation history persistence
- Performance metrics tracking

## Success Metrics

### Technical Performance
- Response time < 2 seconds
- Error rate < 1%
- Uptime > 99.9%
- Rate limiting effectiveness > 95%

### User Experience
- User satisfaction > 4.5/5
- Session completion rate > 80%
- Suggestion click-through rate > 30%
- Consultation request rate > 15%

### Business Impact
- Increased lead quality
- Higher conversion rates
- Reduced manual support requests
- Better user engagement

## Support and Maintenance

### Regular Maintenance
- **Daily**: Monitor error rates and performance
- **Weekly**: Review analytics and user feedback
- **Monthly**: Analyze trends and optimize
- **Quarterly**: Update prompts and features

### Troubleshooting
- Check n8n execution logs
- Verify Google Sheets integration
- Test individual workflow nodes
- Review error messages and user feedback

### Updates and Improvements
- Monitor user feedback for improvement opportunities
- Analyze analytics data for optimization insights
- Regular prompt updates based on new services
- Performance optimization based on usage patterns

## Contact and Support

For questions about this documentation or implementation:
- **Technical Issues**: Check the troubleshooting sections in each guide
- **Implementation Questions**: Reference the step-by-step instructions
- **Feature Requests**: Review the enhancement plan for future improvements

---

*Last updated: December 19, 2024*
*Document version: 1.0*


================================================
FILE: docs/ai-agent-configuration-guide.md
================================================
# AI Agent Configuration Guide

## Overview

This document provides detailed configuration instructions for enhancing the AI Agent in the Nicky Bruno chatbot workflow. The current prompt is incomplete and needs to be replaced with a comprehensive, professional configuration.

## Current State

**Current Prompt:** "You are Nicky's assistent...."

**Issues:**
- Incomplete and unprofessional
- No context about Nicky's services
- Missing communication guidelines
- No language-specific instructions

## Enhanced AI Agent Prompt

### Complete Prompt Configuration

```text
You are Nicky Bruno's AI assistant, a professional full-stack developer and AI integration specialist. Your role is to help visitors to Nicky's portfolio website with questions about:

**Services & Expertise:**
- Web development (React, Next.js, Node.js)
- AI integration and automation
- Full-stack development
- Database design and optimization
- API development and integration
- Cloud deployment and DevOps

**Professional Information:**
- Based in Montreal, Canada
- Fluent in English and French
- Specializes in modern web technologies
- Experienced with AI/ML integration
- Available for freelance projects

**Communication Style:**
- Professional yet friendly
- Technical but accessible
- Helpful and solution-oriented
- Respectful of user's time
- Encourage meaningful conversations about projects

**Response Guidelines:**
1. Answer questions about Nicky's services and expertise
2. Provide helpful technical guidance when appropriate
3. Suggest scheduling a consultation for complex projects
4. Always maintain professionalism
5. If unsure about something, admit it and offer to connect them with Nicky directly
6. Keep responses concise but informative
7. Use the user's language (English/French) based on their preference

**Important:** Never make promises about pricing, timelines, or specific deliverables. Always recommend a consultation for detailed project discussions.

User's message: {{ $json.message }}
User's language: {{ $json.language }}
Session ID: {{ $json.sessionId }}
```

## Implementation Steps

### Step 1: Access AI Agent Node
1. Open your n8n workflow
2. Navigate to the "AI Agent" node
3. Click to edit the node configuration

### Step 2: Update Prompt
1. In the "Prompt" field, replace the current text
2. Paste the enhanced prompt above
3. Ensure all variables are properly referenced:
   - `{{ $json.message }}` - User's message
   - `{{ $json.language }}` - User's language preference
   - `{{ $json.sessionId }}` - Session identifier

### Step 3: Configure Additional Settings

#### Memory Configuration
- **Context Window:** Increase to 20-30 messages
- **Memory Type:** Buffer Window Memory
- **Session Persistence:** Enable for cross-session continuity

#### Model Settings
- **Model:** GPT-4 or GPT-4-turbo
- **Temperature:** 0.7 (balanced creativity and consistency)
- **Max Tokens:** 500-800 (concise but complete responses)
- **Top P:** 0.9

#### Response Format
- **Structured Output:** Enable JSON response format
- **Include Metadata:** Session info, response time, suggestions

## Language-Specific Instructions

### English Responses
- Use professional, clear language
- Include technical terms when appropriate
- Maintain friendly but business-appropriate tone
- Provide specific examples when helpful

### French Responses
- Use formal French (vous) for professional communication
- Include technical terms in French when possible
- Maintain same professional tone as English
- Adapt cultural context for French-speaking users

## Response Templates

### Service Inquiry Response
```
Thank you for your interest in [specific service]! Nicky specializes in [relevant expertise] and has extensive experience with [specific technologies]. 

For your [project type] project, I'd recommend scheduling a consultation to discuss your specific requirements, timeline, and budget. This will allow Nicky to provide you with a detailed proposal tailored to your needs.

Would you like me to help you schedule a consultation, or do you have any other questions about [service area]?
```

### Technical Question Response
```
That's a great question about [technical topic]! [Brief technical explanation]

Nicky has experience with [relevant technology/approach] and has implemented similar solutions for clients. For a detailed technical discussion and implementation plan, I'd recommend scheduling a consultation where Nicky can provide specific guidance based on your project requirements.

Is there anything else about [topic] you'd like to know?
```

### Pricing Inquiry Response
```
I understand you're interested in pricing for [service type]. Pricing varies significantly based on project scope, timeline, and specific requirements.

To provide you with an accurate quote, Nicky would need to understand your project details better. I'd recommend scheduling a consultation where you can discuss:
- Project scope and requirements
- Timeline expectations
- Budget considerations
- Technical specifications

Would you like to schedule a consultation to discuss your project in detail?
```

## Testing Checklist

### Basic Functionality
- [ ] Prompt loads correctly
- [ ] Variables are properly referenced
- [ ] Responses are generated
- [ ] Language switching works

### Response Quality
- [ ] Responses are professional and helpful
- [ ] Technical accuracy is maintained
- [ ] Appropriate tone for different question types
- [ ] Suggestions for consultations are included

### Edge Cases
- [ ] Handles unclear questions gracefully
- [ ] Responds appropriately to off-topic queries
- [ ] Manages technical questions well
- [ ] Provides fallback responses when uncertain

## Monitoring and Optimization

### Key Metrics to Track
- Response relevance score
- User satisfaction ratings
- Consultation conversion rate
- Average response time
- Error rate

### Regular Review Process
1. **Weekly:** Review response quality and user feedback
2. **Monthly:** Analyze conversation patterns and common questions
3. **Quarterly:** Update prompt based on new services or expertise
4. **As needed:** Adjust tone and approach based on user feedback

## Troubleshooting

### Common Issues

#### Incomplete Responses
- Check token limits
- Verify prompt length
- Review model configuration

#### Inappropriate Tone
- Review communication guidelines
- Adjust temperature settings
- Update prompt examples

#### Language Issues
- Verify language detection
- Check translation accuracy
- Test with native speakers

### Debug Steps
1. Test with sample messages
2. Check n8n execution logs
3. Verify variable references
4. Review model response format

## Best Practices

### Prompt Maintenance
- Keep prompt updated with current services
- Include recent project examples
- Update contact information regularly
- Test changes in staging environment first

### Response Quality
- Monitor user feedback regularly
- Adjust tone based on user preferences
- Keep responses concise but informative
- Always maintain professionalism

### Performance Optimization
- Use appropriate model for task complexity
- Optimize prompt length for efficiency
- Monitor token usage and costs
- Implement response caching where appropriate

---

*Last updated: December 19, 2024*
*Document version: 1.0*



================================================
FILE: docs/chatbot-n8n-integration.md
================================================
# Chatbot n8n Integration

## Overview

This document describes the integration between the portfolio chatbot component and n8n automation workflow for AI-powered chat responses.

**Status:** ✅ Active and Production-Ready  
**Last Updated:** December 2024  
**Webhook URL:** `https://n8n.nickyhome.casa/webhook-test/chatbot`

---

## Architecture

### Flow Diagram

```
User sends message (Next.js Chatbot)
    ↓
POST request to n8n webhook
    ↓
n8n processes with AI agent
    ↓
AI generates response
    ↓
Response sent back to chatbot
    ↓
Message displayed in chat interface
```

### Components

1. **Frontend:** `src/components/ui/Chatbot.tsx`
2. **Message Component:** `src/components/ui/ChatMessage.tsx`
3. **Input Component:** `src/components/ui/ChatInput.tsx`
4. **Backend:** n8n workflow with AI agent
5. **Endpoint:** `https://n8n.nickyhome.casa/webhook-test/chatbot`

---

## Chatbot Features

### UI/UX Features
- ✅ Floating chat button with neon glow effect
- ✅ Smooth open/close animations
- ✅ Minimize/maximize functionality
- ✅ Message history with timestamps
- ✅ Typing indicators
- ✅ Quick suggestion buttons
- ✅ Connection status indicator
- ✅ Error handling with retry options
- ✅ Clear conversation option
- ✅ Responsive design for mobile/desktop
- ✅ Accessibility support (ARIA labels, keyboard navigation)

### Brand Integration
- ✅ Neon mint color scheme (#00FFD1)
- ✅ Space Grotesk font for headings
- ✅ Inter font for body text
- ✅ Smooth animations matching site theme
- ✅ Glow effects consistent with brand
- ✅ Dark theme integration

### Technical Features
- ✅ Real-time message sending/receiving
- ✅ Message length validation (1000 chars max)
- ✅ Auto-scroll to latest messages
- ✅ Session management
- ✅ Error recovery
- ✅ Loading states
- ✅ Internationalization (EN/FR)

---

## API Integration

### Request Format

**Method:** `POST`  
**URL:** `https://n8n.nickyhome.casa/webhook-test/chatbot`  
**Headers:**
```http
Content-Type: application/json
```

**Body:**
```json
{
  "message": "What services do you offer?",
  "language": "en",
  "timestamp": "2024-12-19T20:35:00.000Z",
  "sessionId": "session-1703010900000"
}
```

### Success Response

**Status:** `200 OK`

```json
{
  "success": true,
  "message": "I offer web development, AI integration, design consultation, and automation services. How can I help you with your project?",
  "sessionId": "session-1703010900000",
  "timestamp": "2024-12-19T20:35:05.000Z"
}
```

### Error Response

**Status:** `400 Bad Request`

```json
{
  "success": false,
  "error": "Invalid message format",
  "message": "I apologize, but I couldn't process your request. Please try again."
}
```

---

## Frontend Implementation

### Chatbot Component

The main chatbot component (`src/components/ui/Chatbot.tsx`) provides:

- **Floating Button**: Fixed position chat icon with glow effect
- **Chat Window**: Expandable chat interface with header, messages, and input
- **Message Management**: Add, display, and manage chat messages
- **State Management**: Connection status, loading states, error handling
- **Animations**: Smooth transitions and micro-interactions

### Message Component

Individual message component (`src/components/ui/ChatMessage.tsx`) handles:

- **Message Display**: User vs AI message styling
- **Timestamps**: Formatted time display
- **Typing Indicators**: Animated dots for AI responses
- **Error States**: Failed message indicators
- **Accessibility**: Proper ARIA labels and semantic markup

### Input Component

Message input component (`src/components/ui/ChatInput.tsx`) provides:

- **Auto-resize Textarea**: Grows with content up to 120px
- **Keyboard Shortcuts**: Enter to send, Shift+Enter for new line
- **Character Limit**: 1000 character maximum with counter
- **Validation**: Empty message prevention
- **Loading States**: Disabled during message sending

---

## n8n Workflow Setup

### Required Nodes

1. **Chatbot Webhook** (Trigger)
   - Type: `n8n-nodes-base.webhook`
   - Method: POST
   - Path: `chatbot`
   - Response Mode: `responseNode`

2. **AI Agent Processing**
   - Type: `n8n-nodes-base.openAi` or similar AI service
   - Operation: Chat completion
   - Model: GPT-4 or similar
   - System prompt: Include Nicky's services and expertise

3. **Response Formatting**
   - Type: `n8n-nodes-base.code`
   - Format response for frontend consumption

4. **Success Response**
   - Type: `n8n-nodes-base.respondToWebhook`
   - HTTP 200 with formatted JSON

5. **Error Response**
   - Type: `n8n-nodes-base.respondToWebhook`
   - HTTP 400 with error details

### Workflow Settings

```yaml
Active: true
Error Handling: continueRegularOutput
Execution Order: v1
Trigger Count: 1
```

---

## Internationalization

### Translation Files

**English** (`src/i18n/messages/en/chatbot.json`):
- Chat interface labels
- Error messages
- Quick suggestions
- Accessibility labels

**French** (`src/i18n/messages/fr/chatbot.json`):
- Complete French translations
- Cultural adaptations
- Proper French grammar

### Usage

The chatbot automatically detects the user's language preference from the Next.js i18n system and sends it to the n8n workflow for localized responses.

---

## Testing

### Manual Testing

1. Navigate to any page on the portfolio
2. Look for floating chat button (bottom-right)
3. Click to open chat window
4. Send test message
5. Verify AI response appears
6. Test quick suggestion buttons
7. Test minimize/maximize functionality
8. Test error handling (disconnect network)

### Test Cases

- [ ] Chat button appears and is clickable
- [ ] Chat window opens with smooth animation
- [ ] Welcome message displays correctly
- [ ] User can type and send messages
- [ ] AI responses appear with typing indicator
- [ ] Quick suggestions work
- [ ] Minimize/maximize functions properly
- [ ] Clear conversation works
- [ ] Error states display correctly
- [ ] Mobile responsiveness
- [ ] Keyboard navigation
- [ ] Screen reader compatibility

---

## Security Considerations

### Current Protection

✅ **Implemented:**
- HTTPS webhook endpoint
- Message length validation (1000 chars)
- Input sanitization
- Error handling prevents crashes
- No sensitive data in responses
- Rate limiting via n8n workflow

### Recommended Enhancements

🔒 **Future Improvements:**

1. **Rate Limiting**
   - Add per-session message limits
   - Prevent spam/abuse
   - Implement cooldown periods

2. **Content Filtering**
   - Filter inappropriate content
   - Block malicious inputs
   - Sanitize HTML/scripts

3. **Session Management**
   - Implement proper session tokens
   - Track user sessions
   - Prevent session hijacking

4. **Analytics**
   - Track conversation metrics
   - Monitor usage patterns
   - Identify popular questions

---

## Performance

### Metrics

- **Message Send Time:** ~2-3 seconds
- **AI Response Time:** ~3-5 seconds
- **UI Animation:** 60fps smooth
- **Memory Usage:** Minimal (message history limited)

### Optimization

- Message history limited to 50 messages
- Lazy loading of chat components
- Efficient re-renders with React optimization
- Minimal bundle size impact
- Smooth animations with CSS transforms

---

## Maintenance

### Regular Tasks

**Weekly:**
- [ ] Check n8n execution logs for errors
- [ ] Monitor response times
- [ ] Verify AI responses quality

**Monthly:**
- [ ] Test chatbot functionality end-to-end
- [ ] Review conversation logs
- [ ] Update AI prompts if needed
- [ ] Check for n8n updates

**Quarterly:**
- [ ] Analyze popular questions
- [ ] Update quick suggestions
- [ ] Review and update documentation
- [ ] Optimize AI responses

---

## Troubleshooting

| Issue | Possible Cause | Solution |
|-------|----------------|----------|
| Chat button not visible | CSS loading issue | Check stylesheet loading |
| Messages not sending | Network/webhook issue | Check n8n workflow status |
| No AI responses | AI service down | Check AI service status |
| Slow responses | n8n server overload | Check n8n resource usage |
| Translation missing | i18n config issue | Check translation files |

---

## Future Enhancements

### Planned Features

1. **Enhanced AI Capabilities**
   - Context-aware responses
   - Multi-turn conversations
   - File upload support
   - Voice input/output

2. **Analytics Dashboard**
   - Conversation metrics
   - Popular questions
   - User satisfaction scores
   - Response time analytics

3. **Advanced Features**
   - Conversation history persistence
   - User authentication
   - Personalized responses
   - Integration with CRM

4. **UI Improvements**
   - Dark/light theme toggle
   - Customizable chat appearance
   - Message reactions
   - File sharing

---

## Support

### Getting Help

**Issues:**
- Check browser console for errors
- Review n8n execution logs
- Test webhook endpoint directly
- Verify AI service status

**Contact:**
- Email: nickdevmtl@gmail.com
- n8n Instance: https://n8n.nickyhome.casa

---

## References

- [n8n Documentation](https://docs.n8n.io/)
- [Next.js Documentation](https://nextjs.org/docs)
- [next-intl Documentation](https://next-intl-docs.vercel.app/)
- [React Accessibility](https://reactjs.org/docs/accessibility.html)
- [Tailwind CSS](https://tailwindcss.com/docs)

---

**Last Updated:** December 2024  
**Document Version:** 1.0.0  
**Maintained by:** Nicky Bruno



================================================
FILE: docs/chatbot-webhook-setup-troubleshooting.md
================================================
# Chatbot Webhook Setup & Troubleshooting Guide

## Issue Identified

The "Failed to fetch" error occurs because the n8n webhook endpoint is not registered. This is a common issue with n8n webhooks in test mode.

## Root Cause

1. **Webhook Not Registered**: The n8n workflow needs to be executed first to register the webhook endpoint
2. **Test Mode Limitation**: In test mode, webhooks only work for one call after clicking "Execute workflow"
3. **Missing Webhook Configuration**: The chatbot path exists in the workflow but the webhook isn't properly registered

## Solution Steps

### Step 1: Register the Webhook in n8n

1. **Open your n8n workflow** (`nickybruno.com`)
2. **Click "Execute Workflow"** button on the canvas
3. **Wait for execution to complete** (this registers the webhook)
4. **Test the webhook** using the test endpoint

### Step 2: Verify Webhook Registration

Test the webhook endpoint:
```bash
curl -X POST "https://n8n.nickyhome.casa/webhook-test/contact-form" \
  -H "Content-Type: application/json" \
  -d '{
    "formType": "chatbot",
    "message": "Hello, this is a test message",
    "language": "en",
    "timestamp": "2024-12-19T20:35:00.000Z",
    "sessionId": "test-session-123"
  }'
```

Expected response:
```json
{
  "success": true,
  "message": "AI response here...",
  "data": {
    "sessionId": "test-session-123",
    "timestamp": "2024-12-19T20:35:00.000Z"
  }
}
```

### Step 3: Production Deployment

For production use, you need to:

1. **Deploy the workflow** to production mode
2. **Set up proper webhook URLs** (remove `/webhook-test/` from URL)
3. **Configure environment variables** for production

## Current Workflow Analysis

Your n8n workflow has the correct structure:

```
Contact Form Webhook → Form Type Router → [chatbot path] → Edit Fields → AI Agent → Success Response
```

The chatbot path is properly configured to:
1. Route `formType: "chatbot"` requests
2. Process the message through the AI Agent
3. Return a response

## Immediate Fixes Applied

### 1. Updated Webhook URL
- Changed from `/webhook-test/chatbot` to `/webhook-test/contact-form`
- This uses the existing registered webhook

### 2. Added formType Field
- Added `formType: "chatbot"` to the request payload
- This ensures proper routing through the Form Type Router

### 3. Enhanced Error Handling
- Added specific error message for 404 errors
- Provides helpful guidance when webhook is not registered

## Testing the Fix

### Frontend Test
1. Open your portfolio website
2. Click the chatbot icon
3. Send a test message
4. Should now work without "Failed to fetch" error

### Backend Test
```bash
# Test the webhook directly
curl -X POST "https://n8n.nickyhome.casa/webhook-test/contact-form" \
  -H "Content-Type: application/json" \
  -d '{
    "formType": "chatbot",
    "message": "What services do you offer?",
    "language": "en",
    "timestamp": "2024-12-19T20:35:00.000Z",
    "sessionId": "test-session-123"
  }'
```

## Next Steps for Production

### 1. Create Dedicated Chatbot Webhook
Consider creating a separate webhook endpoint specifically for the chatbot:

1. **Add new Webhook node** in n8n
2. **Configure path**: `/webhook/chatbot`
3. **Connect directly** to the chatbot processing logic
4. **Update frontend** to use the new endpoint

### 2. Implement Enhanced Features
Follow the documentation in `/docs` to implement:
- Rate limiting
- Enhanced AI Agent prompt
- Conversation analytics
- Better error handling

### 3. Production Configuration
- Remove `/webhook-test/` from URLs
- Set up proper environment variables
- Configure monitoring and alerting
- Implement proper error logging

## Troubleshooting Common Issues

### Issue: "Failed to fetch"
**Cause**: Webhook not registered
**Solution**: Execute the n8n workflow first

### Issue: Empty response
**Cause**: AI Agent prompt incomplete
**Solution**: Update the AI Agent prompt (see AI Agent Configuration Guide)

### Issue: Wrong response format
**Cause**: Response formatting not optimized
**Solution**: Implement enhanced response format (see Enhanced Response Format Guide)

### Issue: Rate limiting errors
**Cause**: No rate limiting implemented
**Solution**: Add rate limiting nodes (see Rate Limiting Guide)

## Monitoring and Maintenance

### Key Metrics to Monitor
- Webhook response time
- Error rate
- Message processing success rate
- User satisfaction

### Regular Maintenance
- Monitor webhook registration status
- Check AI Agent response quality
- Review error logs
- Update prompts based on user feedback

## Contact Information

If you need immediate assistance:
- **Email**: nickdevmtl@gmail.com
- **Documentation**: Check `/docs` directory for detailed guides
- **Issues**: Review troubleshooting sections in each guide

---

*Last updated: December 19, 2024*
*Document version: 1.0*



================================================
FILE: docs/chatbot-workflow-enhancement-plan.md
================================================
# Chatbot Workflow Enhancement Plan

## Overview

This document outlines the comprehensive enhancement plan for the Nicky Bruno portfolio chatbot workflow in n8n. The current workflow has a solid foundation but requires several optimizations to improve user experience, reliability, and scalability.

## Current Workflow Analysis

### Strengths ✅
- Multi-form routing (contact, project brief, chatbot)
- Language switching (EN/FR)
- Google Sheets integration for data storage
- Email notifications
- Basic AI Agent setup with OpenAI
- Simple memory buffer window

### Areas for Enhancement 🔧
- AI Agent prompt is incomplete ("You are Nicky's assistent....")
- No conversation memory or session management
- Missing rate limiting and abuse prevention
- Basic error handling
- No conversation analytics
- Response format could be optimized for frontend

## Enhancement Roadmap

### Phase 1: Core Improvements (Priority: High)

#### 1.1 Enhanced AI Agent Configuration
**Current Issue:** Incomplete prompt
**Solution:** Comprehensive, professional prompt with clear guidelines

**Implementation:**
- Replace current prompt with detailed professional context
- Include Nicky's expertise and services
- Define communication style and response guidelines
- Add language-specific instructions

#### 1.2 Rate Limiting & Abuse Prevention
**Purpose:** Prevent spam and abuse
**Implementation:**
- Add rate limiting node (10 messages per 5 minutes per session)
- Implement IP-based rate limiting
- Add friendly rate limit exceeded messages
- Track and log suspicious activity

#### 1.3 Enhanced Error Handling
**Purpose:** Improve reliability and user experience
**Implementation:**
- AI response error handler with fallback responses
- Network timeout handling
- Input validation improvements
- Graceful degradation for service failures

### Phase 2: Advanced Features (Priority: Medium)

#### 2.1 Conversation Memory Enhancement
**Current:** Basic buffer window (10 messages)
**Enhancement:**
- Increase context window to 20-30 messages
- Add conversation persistence to Google Sheets
- Implement session-based memory retrieval
- Cross-session conversation continuity

#### 2.2 Analytics & Tracking
**Purpose:** Gain insights into user behavior and chatbot performance
**Implementation:**
- Conversation metrics tracking (message count, session duration)
- User engagement pattern analysis
- Common questions identification
- Performance monitoring dashboard

#### 2.3 Enhanced Response Format
**Purpose:** Better frontend integration and user experience
**Implementation:**
- Structured JSON responses with metadata
- Suggested follow-up questions
- Response time tracking
- Session information inclusion

### Phase 3: Advanced Intelligence (Priority: Low)

#### 3.1 Context Awareness
**Features:**
- User location detection for timezone-aware responses
- Previous interaction history checking
- Referral source tracking
- User journey mapping

#### 3.2 Advanced AI Features
**Features:**
- Sentiment analysis for user satisfaction monitoring
- Auto-escalation for complex technical questions
- Multi-turn conversation optimization
- File upload support for project discussions

## Implementation Timeline

### Week 1: Core Improvements
- [ ] Update AI Agent prompt
- [ ] Implement rate limiting
- [ ] Add basic error handling
- [ ] Test core functionality

### Week 2: Memory & Analytics
- [ ] Enhance conversation memory
- [ ] Set up analytics tracking
- [ ] Optimize response format
- [ ] Performance testing

### Week 3: Advanced Features
- [ ] Add context awareness
- [ ] Implement sentiment analysis
- [ ] Set up auto-escalation
- [ ] Final testing and optimization

## Success Metrics

### User Experience
- Response time < 2 seconds
- Error rate < 1%
- User satisfaction score > 4.5/5
- Session completion rate > 80%

### Technical Performance
- Uptime > 99.9%
- Rate limit effectiveness > 95%
- Memory usage optimization
- Analytics data accuracy

### Business Impact
- Increased lead quality
- Reduced manual support requests
- Better user engagement
- Improved conversion rates

## Risk Assessment

### Low Risk
- Prompt enhancement
- Response format optimization
- Basic analytics

### Medium Risk
- Rate limiting implementation
- Memory enhancement
- Error handling improvements

### High Risk
- Advanced AI features
- Context awareness
- Auto-escalation system

## Rollback Plan

Each enhancement will be implemented with:
- Feature flags for easy disable
- Rollback procedures documented
- Monitoring and alerting
- Gradual rollout strategy

## Next Steps

1. **Review and approve** this enhancement plan
2. **Prioritize** which features to implement first
3. **Set up** development and testing environment
4. **Begin implementation** with Phase 1 features
5. **Monitor and iterate** based on user feedback

---

*Last updated: December 19, 2024*
*Document version: 1.0*



================================================
FILE: docs/chatbot-workflow-implementation-guide.md
================================================
# Chatbot Workflow Implementation Guide

## Overview

This document provides step-by-step implementation instructions for enhancing the Nicky Bruno chatbot workflow in n8n, based on the comprehensive enhancement plan outlined in the other documentation files.

## Prerequisites

### Required Access
- n8n instance with admin access
- Google Sheets integration configured
- OpenAI API credentials
- Basic understanding of n8n workflow editing

### Required Credentials
- Google Sheets OAuth2 credentials
- OpenAI API key
- Gmail OAuth2 credentials (for notifications)

## Implementation Phases

### Phase 1: Core Improvements (Week 1)

#### Step 1.1: Update AI Agent Prompt

**Objective:** Replace incomplete prompt with comprehensive professional configuration

**Implementation:**
1. Open your n8n workflow
2. Navigate to the "AI Agent" node (ID: `a6f9e890-91ca-4001-83b9-e4d3226cadcb`)
3. Click to edit the node
4. In the "Prompt" field, replace the current text with:

```text
You are Nicky Bruno's AI assistant, a professional full-stack developer and AI integration specialist. Your role is to help visitors to Nicky's portfolio website with questions about:

**Services & Expertise:**
- Web development (React, Next.js, Node.js)
- AI integration and automation
- Full-stack development
- Database design and optimization
- API development and integration
- Cloud deployment and DevOps

**Professional Information:**
- Based in Montreal, Canada
- Fluent in English and French
- Specializes in modern web technologies
- Experienced with AI/ML integration
- Available for freelance projects

**Communication Style:**
- Professional yet friendly
- Technical but accessible
- Helpful and solution-oriented
- Respectful of user's time
- Encourage meaningful conversations about projects

**Response Guidelines:**
1. Answer questions about Nicky's services and expertise
2. Provide helpful technical guidance when appropriate
3. Suggest scheduling a consultation for complex projects
4. Always maintain professionalism
5. If unsure about something, admit it and offer to connect them with Nicky directly
6. Keep responses concise but informative
7. Use the user's language (English/French) based on their preference

**Important:** Never make promises about pricing, timelines, or specific deliverables. Always recommend a consultation for detailed project discussions.

User's message: {{ $json.message }}
User's language: {{ $json.language }}
Session ID: {{ $json.sessionId }}
```

5. Save the node configuration
6. Test with sample messages

#### Step 1.2: Implement Rate Limiting

**Objective:** Add session-based rate limiting to prevent abuse

**Implementation:**
1. Add a new "Set" node before the AI Agent
2. Configure the node with the following parameters:

```json
{
  "assignments": {
    "assignments": [
      {
        "id": "rate-limit-check",
        "name": "rateLimitStatus",
        "value": "={{ checkRateLimit($json.sessionId, $json.headers['x-real-ip']) }}",
        "type": "string"
      },
      {
        "id": "session-data",
        "name": "sessionData",
        "value": "={{ getSessionData($json.sessionId) }}",
        "type": "object"
      }
    ]
  }
}
```

3. Add a new "If" node after the Set node
4. Configure the condition:

```json
{
  "conditions": {
    "options": {
      "caseSensitive": true,
      "leftValue": "",
      "typeValidation": "strict",
      "version": 2
    },
    "conditions": [
      {
        "leftValue": "={{ $json.rateLimitStatus }}",
        "rightValue": "allowed",
        "operator": {
          "type": "string",
          "operation": "equals"
        }
      }
    ],
    "combinator": "and"
  }
}
```

5. Connect the "true" output to the AI Agent
6. Add a "Respond to Webhook" node for the "false" output with rate limit message

#### Step 1.3: Enhanced Error Handling

**Objective:** Improve error handling and provide fallback responses

**Implementation:**
1. Add error handling nodes after the AI Agent
2. Create fallback responses for common error scenarios
3. Implement graceful degradation for service failures

### Phase 2: Advanced Features (Week 2)

#### Step 2.1: Enhanced Conversation Memory

**Objective:** Improve conversation continuity and context

**Implementation:**
1. Update the "Simple Memory" node configuration:
   - Increase context window to 20-30 messages
   - Enable session persistence
2. Add Google Sheets integration for conversation history
3. Implement session-based memory retrieval

#### Step 2.2: Analytics and Tracking

**Objective:** Implement comprehensive conversation analytics

**Implementation:**
1. Create new Google Sheets tabs:
   - `chatbot_analytics`
   - `conversation_details`
   - `performance_metrics`
2. Add analytics collection nodes
3. Implement data processing and reporting

#### Step 2.3: Enhanced Response Format

**Objective:** Optimize response format for better frontend integration

**Implementation:**
1. Update response formatting nodes
2. Add suggestion generation
3. Implement action buttons
4. Add metadata collection

### Phase 3: Advanced Intelligence (Week 3)

#### Step 3.1: Context Awareness

**Objective:** Add user location and interaction history awareness

**Implementation:**
1. Add IP geolocation detection
2. Implement user history checking
3. Add referral source tracking
4. Create user journey mapping

#### Step 3.2: Advanced AI Features

**Objective:** Implement sentiment analysis and auto-escalation

**Implementation:**
1. Add sentiment analysis node
2. Implement auto-escalation logic
3. Create multi-turn conversation optimization
4. Add file upload support

## Detailed Implementation Steps

### Rate Limiting Implementation

#### Google Sheets Setup
1. Create a new sheet tab: `rate_limits`
2. Add columns:
   - `session_id` (String)
   - `ip_address` (String)
   - `message_count` (Number)
   - `last_message_time` (DateTime)
   - `blocked_until` (DateTime)
   - `violation_count` (Number)

#### Rate Limiting Logic
```javascript
// Add this as a custom function in n8n
function checkRateLimit(sessionId, ipAddress) {
  const currentTime = new Date();
  const timeWindow = 5 * 60 * 1000; // 5 minutes
  const messageLimit = 10;
  
  // Get session data from Google Sheets
  const sessionData = getSessionData(sessionId);
  
  if (sessionData) {
    const recentMessages = sessionData.messages.filter(
      msg => (currentTime - new Date(msg.timestamp)) < timeWindow
    );
    
    if (recentMessages.length >= messageLimit) {
      return "rate_limit_exceeded";
    }
  }
  
  return "allowed";
}
```

### Analytics Implementation

#### Google Sheets Structure
1. **Main Analytics Sheet (`chatbot_analytics`)**:
   ```
   timestamp | session_id | user_ip | language | message_count | session_duration | conversation_topics | user_satisfaction | consultation_requested | conversion_type | response_time | error_occurred | user_agent | referrer
   ```

2. **Conversation Details Sheet (`conversation_details`)**:
   ```
   session_id | message_id | timestamp | message_type | message_content | response_content | response_time | user_satisfaction | topic_category | sentiment_score
   ```

3. **Performance Metrics Sheet (`performance_metrics`)**:
   ```
   timestamp | metric_name | metric_value | metric_unit | status | notes
   ```

#### Analytics Collection Node
```javascript
// Analytics collection function
function collectAnalytics(sessionData, messageData, responseData) {
  return {
    timestamp: new Date().toISOString(),
    session_id: sessionData.sessionId,
    user_ip: sessionData.ipAddress,
    language: sessionData.language,
    message_count: sessionData.messageCount,
    session_duration: calculateSessionDuration(sessionData.startTime),
    conversation_topics: extractTopics(messageData.content),
    user_satisfaction: responseData.satisfactionScore || null,
    consultation_requested: checkConsultationRequest(messageData.content),
    conversion_type: determineConversionType(messageData.content),
    response_time: responseData.responseTime,
    error_occurred: responseData.error ? true : false,
    user_agent: sessionData.userAgent,
    referrer: sessionData.referrer
  };
}
```

### Enhanced Response Format

#### Response Formatting Node
```javascript
// Enhanced response formatting
function formatEnhancedResponse(aiResponse, sessionData, metadata) {
  return {
    success: true,
    response: {
      message: aiResponse.message,
      suggestions: generateSuggestions(aiResponse.topic, aiResponse.intent),
      sessionId: sessionData.sessionId,
      timestamp: new Date().toISOString(),
      language: sessionData.language,
      messageId: generateMessageId(),
      conversationContext: {
        topic: aiResponse.topic,
        intent: aiResponse.intent,
        confidence: aiResponse.confidence
      }
    },
    metadata: {
      responseTime: metadata.responseTime,
      messageCount: sessionData.messageCount,
      sessionDuration: calculateSessionDuration(sessionData.startTime),
      satisfactionPrompt: shouldShowSatisfactionPrompt(sessionData.messageCount),
      escalationAvailable: true
    },
    actions: generateActions(aiResponse.topic, aiResponse.intent)
  };
}
```

## Testing Procedures

### Unit Testing
1. **Rate Limiting Tests**:
   - Send 10 messages in 5 minutes (should work)
   - Send 11 messages in 5 minutes (should be blocked)
   - Test IP-based rate limiting

2. **Response Format Tests**:
   - Test successful responses
   - Test error responses
   - Test rate limit responses
   - Validate JSON structure

3. **Analytics Tests**:
   - Verify data collection
   - Test data processing
   - Validate reporting accuracy

### Integration Testing
1. **End-to-End Tests**:
   - Complete conversation flow
   - Error handling scenarios
   - Rate limiting behavior
   - Analytics data collection

2. **Performance Tests**:
   - Response time measurement
   - Memory usage monitoring
   - Throughput testing
   - Error rate monitoring

### User Acceptance Testing
1. **User Experience Tests**:
   - Conversation flow smoothness
   - Response relevance
   - Error message clarity
   - Overall satisfaction

2. **Business Impact Tests**:
   - Lead generation improvement
   - Consultation request increase
   - User engagement metrics
   - Conversion rate analysis

## Monitoring and Maintenance

### Key Metrics to Monitor
- Response time < 2 seconds
- Error rate < 1%
- User satisfaction > 4.5/5
- Rate limit effectiveness > 95%

### Regular Maintenance Tasks
- **Daily**: Monitor error rates and performance
- **Weekly**: Review analytics and user feedback
- **Monthly**: Analyze trends and optimize
- **Quarterly**: Update prompts and features

### Troubleshooting Guide
1. **Common Issues**:
   - Rate limiting too aggressive
   - Response format errors
   - Analytics data missing
   - Performance degradation

2. **Debug Steps**:
   - Check n8n execution logs
   - Verify Google Sheets integration
   - Test individual nodes
   - Review error messages

## Rollback Procedures

### Emergency Rollback
1. Disable enhanced features
2. Restore previous workflow version
3. Monitor for issues
4. Investigate and fix problems
5. Re-enable with adjustments

### Gradual Rollback
1. Increase rate limits temporarily
2. Disable non-critical features
3. Monitor impact
4. Adjust configuration
5. Restore full functionality

## Success Criteria

### Technical Success
- [ ] Response time < 2 seconds
- [ ] Error rate < 1%
- [ ] Uptime > 99.9%
- [ ] Rate limiting effective

### Business Success
- [ ] Increased lead quality
- [ ] Higher consultation requests
- [ ] Better user engagement
- [ ] Improved conversion rates

### User Experience Success
- [ ] User satisfaction > 4.5/5
- [ ] Smooth conversation flow
- [ ] Clear error messages
- [ ] Helpful suggestions

## Next Steps

1. **Review Implementation Plan**: Ensure all requirements are understood
2. **Set Up Development Environment**: Prepare n8n instance and credentials
3. **Begin Phase 1**: Start with core improvements
4. **Test Thoroughly**: Validate each enhancement
5. **Monitor Performance**: Track metrics and user feedback
6. **Iterate and Optimize**: Continuously improve based on data

---

*Last updated: December 19, 2024*
*Document version: 1.0*



================================================
FILE: docs/contact-form-n8n-integration.md
================================================
# Contact Form n8n Integration

## Overview

This document describes the integration between the portfolio contact form and n8n automation workflow for email confirmations.

**Status:** ✅ Active and Production-Ready  
**Last Updated:** October 15, 2025  
**Workflow ID:** `6NpILQ8dWthS1fjR`  
**Webhook URL:** `https://n8n.nickyhome.casa/webhook-test/contact-form`

---

## Architecture

### Flow Diagram

```
User submits contact form (Next.js)
    ↓
POST request to n8n webhook
    ↓
n8n validates required fields
    ↓
├─ VALID → Send Gmail confirmation → Success response
│          └─ User receives professional email
│          └─ Form shows success message & clears
│
└─ INVALID → Error response with validation details
             └─ Form displays specific error messages
```

### Components

1. **Frontend:** `src/components/sections/contact/ContactForm.tsx`
2. **Backend:** n8n workflow "nickybruno.com"
3. **Email Service:** Gmail OAuth2
4. **Endpoint:** `https://n8n.nickyhome.casa/webhook-test/contact-form`

---

## Form Fields

### Required Fields
- **name** (string) - Visitor's full name
- **email** (string) - Valid email address
- **message** (string) - Inquiry message

### Optional Fields
- **company** (string) - Company name
- **projectType** (string) - Type of project needed
  - Options: `web-development`, `ai-integration`, `design-consultation`, `automation`, `full-stack`, `other`
- **budget** (string) - Budget range
  - Options: `5k-15k`, `15k-30k`, `30k-50k`, `50k+`, `discuss`
- **timeline** (string) - Project timeline
  - Options: `asap`, `1-2-months`, `3-6-months`, `6-months+`, `flexible`
- **newsletter** (boolean) - Subscribe to newsletter
- **terms** (boolean) - Accept terms (required for submission)
- **language** (string) - User's selected website language (i18n locale)
  - Options: `en` (English), `fr` (Français)
  - Auto-detected from website localization

---

## API Integration

### Request Format

**Method:** `POST`  
**URL:** `https://n8n.nickyhome.casa/webhook-test/contact-form`  
**Headers:**
```http
Content-Type: application/json
```

**Body:**
```json
{
  "name": "John Doe",
  "email": "john@example.com",
  "company": "ACME Corp",
  "projectType": "web-development",
  "budget": "15k-30k",
  "timeline": "1-2-months",
  "message": "I need a modern web application...",
  "newsletter": true,
  "terms": true,
  "language": "en"
}
```

### Success Response

**Status:** `200 OK`

```json
{
  "success": true,
  "message": "Thank you! Your message has been received. Check your email for confirmation.",
  "data": {
    "name": "John Doe",
    "email": "john@example.com",
    "language": "en",
    "timestamp": "2025-10-15T20:35:00.000Z"
  }
}
```

### Error Response

**Status:** `400 Bad Request`

```json
{
  "success": false,
  "message": "Validation failed. Please check your form data.",
  "errors": [
    "",
    "Valid email is required",
    "Message is required"
  ]
}
```

---

## Validation Rules

| Field   | Rule                          | Error Message              |
|---------|-------------------------------|----------------------------|
| name    | Required, not empty           | "Name is required"         |
| email   | Required, valid email format  | "Valid email is required"  |
| message | Required, not empty           | "Message is required"      |

**Email Regex:** `^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$`

---

## n8n Workflow Details

### Workflow Nodes

1. **Contact Form Webhook** (Trigger)
   - Type: `n8n-nodes-base.webhook`
   - Method: POST
   - Path: `contact-form`
   - Response Mode: `responseNode`
   - **CORS Allowed Origins:**
     - `http://localhost:3000` (development)
     - `https://nickybruno.com` (production)
     - `https://www.nickybruno.com` (production with www)

2. **Validate Form Data**
   - Type: `n8n-nodes-base.if`
   - Validates: name, email (format), message
   - Outputs: true (valid) | false (invalid)

3. **Send Confirmation Email**
   - Type: `n8n-nodes-base.gmail`
   - Operation: Send message
   - Template: HTML email with submission details
   - Credential: Gmail OAuth2

4. **Success Response**
   - Type: `n8n-nodes-base.respondToWebhook`
   - HTTP 200 with success JSON

5. **Error Response**
   - Type: `n8n-nodes-base.respondToWebhook`
   - HTTP 400 with error details

### Workflow Settings

```yaml
Active: true
Error Handling: continueRegularOutput
Execution Order: v1
Trigger Count: 1
```

---

## Email Template

### Subject
```
Thank you for contacting Nicky Bruno - We received your inquiry!
```

### Template Features

- ✅ Personalized greeting with recipient's name
- ✅ Submission details table (name, email, company, project type, budget, timeline)
- ✅ Quoted original message
- ✅ Newsletter subscription notice (if opted in)
- ✅ Links to portfolio, services, and LinkedIn
- ✅ Professional signature
- ✅ Modern HTML design with blue theme (#2563eb)
- ✅ Mobile-responsive layout
- ✅ Accessibility-friendly markup

### Template Variables

The email uses n8n expression syntax to dynamically populate data:

```javascript
{{ $json.body.name }}          // Recipient's name
{{ $json.body.email }}         // Email address
{{ $json.body.company }}       // Company (optional)
{{ $json.body.projectType }}   // Project type (optional)
{{ $json.body.budget }}        // Budget range (optional)
{{ $json.body.timeline }}      // Timeline (optional)
{{ $json.body.message }}       // Message content
{{ $json.body.newsletter }}    // Newsletter subscription boolean
{{ $json.body.language }}      // User's language preference (en/fr)
```

**Language Display:**
The email automatically displays the language preference with flags:
- `en` → "English 🇬🇧"
- `fr` → "Français 🇫🇷"

---

## Frontend Implementation

### Location
`src/components/sections/contact/ContactForm.tsx`

### Key Functions

#### handleSubmit
```typescript
const handleSubmit = async (e) => {
  e?.preventDefault();
  setIsSubmitting(true);
  setSubmitStatus(null);

  try {
    const response = await fetch('https://n8n.nickyhome.casa/webhook-test/contact-form', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: formData.name,
        email: formData.email,
        company: formData.company,
        projectType: formData.projectType,
        budget: formData.budget,
        timeline: formData.timeline,
        message: formData.message,
        newsletter: formData.newsletter,
        terms: formData.terms
      }),
    });

    // Validate response before parsing JSON
    if (!response.ok) {
      console.error('Server error:', response.status, response.statusText);
      setSubmitStatus('error');
      return;
    }

    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      console.error('Invalid response type:', contentType);
      setSubmitStatus('error');
      return;
    }

    const result = await response.json();

    if (result.success) {
      setSubmitStatus('success');
      // Clear form
      setFormData({ /* reset */ });
    } else {
      setSubmitStatus('error');
    }
  } catch (error) {
    setSubmitStatus('error');
  } finally {
    setIsSubmitting(false);
  }
};
```

**⚠️ Important:** The webhook URL must exactly match the n8n configuration:
- ✅ Correct: `https://n8n.nickyhome.casa/webhook-test/contact-form`
- ❌ Wrong: `https://n8n.nickyhome.casa/webhook/contact-form` (missing `-test`)

**Error Handling:**
The code validates the response before parsing JSON to prevent "Unexpected end of JSON input" errors when the webhook returns non-JSON responses.

### User Feedback

**Success State:**
- ✅ Green success banner with checkmark icon
- Message: Translated via `t('success')`
- Form clears automatically
- Tells user to check email for confirmation

**Error State:**
- ❌ Red error banner with alert icon
- Message: Translated via `t('error')`
- Form retains data for correction
- Suggests trying again or direct contact

---

## Setup Requirements

### Prerequisites

1. **n8n Instance**
   - Running at: `https://n8n.nickyhome.casa`
   - Workflow activated
   - Webhook accessible

2. **Gmail OAuth2 Credentials**
   - Configured in n8n credentials
   - Named: "Gmail OAuth2"
   - Permissions: Send emails
   - Status: Active and tested

3. **Environment**
   - Next.js application running
   - Network access to n8n webhook
   - CORS properly configured (if needed)

### Gmail OAuth Setup Steps

1. Go to n8n instance → **Credentials**
2. Create new credential → **Gmail OAuth2**
3. Follow Google Cloud Console setup:
   - Create project
   - Enable Gmail API
   - Create OAuth 2.0 credentials
   - Add authorized redirect URIs
4. Enter credentials in n8n
5. Test connection
6. Link to workflow

**Documentation:** https://docs.n8n.io/integrations/builtin/credentials/google/

---

## Testing

### Manual Testing (Browser)

1. Navigate to contact page: `/contact` or `/[locale]/contact`
2. Fill out form with test data
3. Submit form
4. Verify:
   - Success message appears
   - Form clears
   - Email arrives in inbox
   - Email contains all submitted data

### API Testing (cURL)

**Valid Submission:**
```powershell
curl -X POST https://n8n.nickyhome.casa/webhook-test/contact-form `
  -H "Content-Type: application/json" `
  -d '{
    "name": "Test User",
    "email": "test@example.com",
    "company": "Test Co",
    "projectType": "web-development",
    "budget": "15k-30k",
    "timeline": "1-2-months",
    "message": "Test message",
    "newsletter": true,
    "terms": true,
    "language": "en"
  }'
```

**Expected Response:**
```json
{
  "success": true,
  "message": "Thank you! Your message has been received..."
}
```

**Invalid Submission (Missing Required Fields):**
```powershell
curl -X POST https://n8n.nickyhome.casa/webhook-test/contact-form `
  -H "Content-Type: application/json" `
  -d '{
    "name": "",
    "email": "invalid-email",
    "message": ""
  }'
```

**Expected Response:**
```json
{
  "success": false,
  "message": "Validation failed. Please check your form data.",
  "errors": [...]
}
```

### Testing Checklist

- [ ] Form submission with all fields
- [ ] Form submission with only required fields
- [ ] Invalid email format
- [ ] Missing required fields
- [ ] Network error handling
- [ ] Email delivery
- [ ] Email content accuracy
- [ ] Mobile responsiveness
- [ ] Internationalization (EN/FR)
- [ ] Loading states
- [ ] Success/error messages

---

## Monitoring & Debugging

### n8n Execution Logs

Access at: `https://n8n.nickyhome.casa/executions`

**What to Monitor:**
- Execution success rate
- Response times
- Error patterns
- Invalid submissions
- Email delivery failures

### Debugging Steps

1. **Form not submitting:**
   - Check browser console for errors
   - Verify webhook URL is correct
   - Check network tab for failed requests
   - Ensure CORS headers if needed

2. **Validation errors:**
   - Review required field values
   - Check email format
   - Verify all required fields present

3. **Email not received:**
   - Check n8n execution logs
   - Verify Gmail credentials active
   - Check spam/junk folder
   - Confirm email address is valid
   - Review Gmail API quotas

4. **Workflow errors:**
   - Open workflow in n8n editor
   - Check node configurations
   - Verify credential connections
   - Test individual nodes
   - Review error output

---

## Security Considerations

### Current Protection

✅ **Implemented:**
- HTTPS webhook endpoint
- Required field validation
- Email format validation (regex)
- Error handling prevents crashes
- No credentials exposed in responses
- Sanitized error messages

### Recommended Enhancements

🔒 **Future Improvements:**

1. **Rate Limiting**
   - Add n8n rate limiting node
   - Prevent spam submissions
   - Limit per IP/email

2. **CAPTCHA Integration**
   - Add reCAPTCHA v3 to frontend
   - Verify token in n8n
   - Block bot submissions

3. **Input Sanitization**
   - Strip HTML from message field
   - Prevent XSS in email template
   - Validate company/project fields

4. **Webhook Authentication**
   - Add API key or token
   - Verify requests from portfolio only
   - Prevent unauthorized access

5. **IP Logging**
   - Track submission IP addresses
   - Monitor for abuse patterns
   - Geographic analytics

6. **Honeypot Field**
   - Add hidden field to form
   - Reject if filled (bot detection)

---

## Performance

### Metrics

- **Average Response Time:** ~2-3 seconds
- **Email Delivery:** Within 5 seconds
- **Success Rate:** Target 99%+
- **Concurrent Requests:** Handled by n8n

### Optimization

- Email template is pre-compiled
- Minimal node count (5 total)
- Efficient validation (single IF node)
- No external API calls except Gmail
- Cached workflow execution

---

## Maintenance

### Regular Tasks

**Weekly:**
- [ ] Check execution logs for errors
- [ ] Monitor success/failure rates
- [ ] Verify email delivery working

**Monthly:**
- [ ] Review Gmail API quota usage
- [ ] Test form submission end-to-end
- [ ] Update email template if needed
- [ ] Check for n8n updates

**Quarterly:**
- [ ] Renew Gmail OAuth credentials if needed
- [ ] Review and update documentation
- [ ] Analyze submission patterns
- [ ] Optimize workflow if necessary

### Troubleshooting Guide

| Issue | Possible Cause | Solution |
|-------|----------------|----------|
| 500 error | n8n workflow inactive | Activate workflow in n8n |
| No email sent | Gmail credentials expired | Renew OAuth credentials |
| Validation fails | Required fields missing | Check form field names match |
| CORS error | n8n CORS settings | Configure n8n webhook CORS |
| Slow response | n8n server overload | Check n8n resource usage |

---

## Changelog

### v1.1.0 - October 15, 2025
- ✨ Added language preference tracking (i18n locale)
- ✨ Email template displays user's language with flags
- ✨ Success response includes language field
- 🔧 Fixed webhook URL (added `-test`)
- 🔧 Added CORS support for localhost and production domains
- 📝 Updated documentation with language field

### v1.0.0 - October 15, 2025
- ✨ Initial integration created
- ✨ 5-node workflow implemented
- ✨ Enhanced HTML email template
- ✨ Frontend form updated
- ✨ Validation rules configured
- ✨ Error handling implemented
- 📝 Documentation created

---

## Future Enhancements

### Planned Features

1. **Localized Email Responses**
   - Use `language` field to send confirmation emails in user's preferred language
   - French email template for `language: "fr"`
   - Multilingual support for future languages

2. **Database Storage**
   - Store submissions in PostgreSQL/MongoDB
   - Enable submission history
   - Analytics dashboard

3. **CRM Integration**
   - Auto-create leads in HubSpot/Pipedrive
   - Tag and categorize contacts
   - Track follow-ups

4. **Notifications**
   - Send Slack/Discord notification on new submission
   - SMS alerts for high-priority inquiries
   - Desktop notifications

5. **Auto-Response**
   - Include calendar booking link
   - Send pricing guide PDF
   - Provide estimated response time

6. **A/B Testing**
   - Test different email templates
   - Measure engagement rates
   - Optimize conversion

7. **Analytics**
   - Track submission sources
   - Conversion funnel metrics
   - Project type distribution
   - Budget range analysis
   - Language preference statistics

---

## Support

### Getting Help

**Issues:**
- Check n8n execution logs
- Review this documentation
- Test with cURL commands
- Check browser console

**Contact:**
- Email: nickdevmtl@gmail.com
- n8n Instance: https://n8n.nickyhome.casa

---

## References

- [n8n Documentation](https://docs.n8n.io/)
- [Gmail OAuth Setup](https://docs.n8n.io/integrations/builtin/credentials/google/)
- [n8n Webhook Node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)
- [n8n Gmail Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.gmail/)
- [Next.js Documentation](https://nextjs.org/docs)
- [next-intl Documentation](https://next-intl-docs.vercel.app/)

---

**Last Updated:** October 15, 2025  
**Document Version:** 1.0.0  
**Maintained by:** Nicky Bruno




================================================
FILE: docs/conversation-analytics-tracking-guide.md
================================================
# Conversation Analytics & Tracking Guide

## Overview

This document outlines the implementation of comprehensive conversation analytics and tracking for the Nicky Bruno chatbot to gain insights into user behavior, chatbot performance, and business metrics.

## Current Analytics Status

**Missing Analytics:**
- No conversation tracking
- No user engagement metrics
- No performance monitoring
- No business intelligence data
- No conversation quality assessment

## Analytics Framework

### Data Collection Strategy

#### Primary Metrics
- **Conversation Metrics:** Message count, session duration, conversation flow
- **User Engagement:** Time spent, pages visited, actions taken
- **Performance Metrics:** Response time, error rate, uptime
- **Business Metrics:** Lead generation, consultation requests, conversion rates

#### Data Sources
- Chatbot conversation logs
- User interaction data
- System performance metrics
- Google Sheets integration
- External analytics tools

## Implementation Plan

### Step 1: Google Sheets Analytics Structure

#### Main Analytics Sheet: `chatbot_analytics`
**Columns:**
```json
{
  "timestamp": "DateTime",
  "session_id": "String",
  "user_ip": "String",
  "language": "String",
  "message_count": "Number",
  "session_duration": "Number",
  "conversation_topics": "String",
  "user_satisfaction": "Number",
  "consultation_requested": "Boolean",
  "conversion_type": "String",
  "response_time": "Number",
  "error_occurred": "Boolean",
  "user_agent": "String",
  "referrer": "String"
}
```

#### Conversation Details Sheet: `conversation_details`
**Columns:**
```json
{
  "session_id": "String",
  "message_id": "String",
  "timestamp": "DateTime",
  "message_type": "String",
  "message_content": "String",
  "response_content": "String",
  "response_time": "Number",
  "user_satisfaction": "Number",
  "topic_category": "String",
  "sentiment_score": "Number"
}
```

#### Performance Metrics Sheet: `performance_metrics`
**Columns:**
```json
{
  "timestamp": "DateTime",
  "metric_name": "String",
  "metric_value": "Number",
  "metric_unit": "String",
  "status": "String",
  "notes": "String"
}
```

### Step 2: Analytics Collection Nodes

#### Conversation Tracking Node
```javascript
// Analytics collection function
function collectConversationAnalytics(sessionData, messageData, responseData) {
  const analytics = {
    timestamp: new Date().toISOString(),
    session_id: sessionData.sessionId,
    user_ip: sessionData.ipAddress,
    language: sessionData.language,
    message_count: sessionData.messageCount,
    session_duration: calculateSessionDuration(sessionData.startTime),
    conversation_topics: extractTopics(messageData.content),
    user_satisfaction: responseData.satisfactionScore || null,
    consultation_requested: checkConsultationRequest(messageData.content),
    conversion_type: determineConversionType(messageData.content),
    response_time: responseData.responseTime,
    error_occurred: responseData.error ? true : false,
    user_agent: sessionData.userAgent,
    referrer: sessionData.referrer
  };
  
  return analytics;
}
```

#### Performance Monitoring Node
```javascript
// Performance metrics collection
function collectPerformanceMetrics(executionData) {
  const metrics = {
    timestamp: new Date().toISOString(),
    response_time: executionData.responseTime,
    memory_usage: executionData.memoryUsage,
    cpu_usage: executionData.cpuUsage,
    error_rate: executionData.errorRate,
    throughput: executionData.throughput
  };
  
  return metrics;
}
```

### Step 3: Analytics Dashboard Structure

#### Key Performance Indicators (KPIs)

##### User Engagement KPIs
- **Average Session Duration:** Target > 3 minutes
- **Messages per Session:** Target 5-8 messages
- **Return User Rate:** Target > 20%
- **User Satisfaction Score:** Target > 4.5/5

##### Business KPIs
- **Consultation Request Rate:** Target > 15%
- **Lead Quality Score:** Target > 4.0/5
- **Conversion Rate:** Target > 10%
- **Cost per Lead:** Target < $50

##### Technical KPIs
- **Response Time:** Target < 2 seconds
- **Uptime:** Target > 99.9%
- **Error Rate:** Target < 1%
- **Throughput:** Target > 100 messages/hour

#### Dashboard Views

##### Executive Dashboard
- High-level business metrics
- Trend analysis
- ROI calculations
- Performance summaries

##### Operational Dashboard
- Real-time performance metrics
- Error monitoring
- User activity patterns
- System health status

##### Analytics Dashboard
- Detailed conversation analysis
- User behavior patterns
- Content performance
- A/B testing results

## Data Analysis Framework

### Conversation Analysis

#### Topic Classification
```javascript
// Topic extraction function
function extractTopics(messageContent) {
  const topics = [];
  
  // Service-related topics
  if (messageContent.toLowerCase().includes('web development')) {
    topics.push('web_development');
  }
  if (messageContent.toLowerCase().includes('ai') || messageContent.toLowerCase().includes('artificial intelligence')) {
    topics.push('ai_integration');
  }
  if (messageContent.toLowerCase().includes('database')) {
    topics.push('database_design');
  }
  
  // Intent classification
  if (messageContent.toLowerCase().includes('price') || messageContent.toLowerCase().includes('cost')) {
    topics.push('pricing_inquiry');
  }
  if (messageContent.toLowerCase().includes('consultation') || messageContent.toLowerCase().includes('meeting')) {
    topics.push('consultation_request');
  }
  
  return topics.join(',');
}
```

#### Sentiment Analysis
```javascript
// Sentiment scoring function
function analyzeSentiment(messageContent) {
  const positiveWords = ['great', 'excellent', 'amazing', 'perfect', 'love', 'fantastic'];
  const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'disappointed', 'frustrated'];
  
  let score = 0;
  const words = messageContent.toLowerCase().split(' ');
  
  words.forEach(word => {
    if (positiveWords.includes(word)) score += 1;
    if (negativeWords.includes(word)) score -= 1;
  });
  
  // Normalize to 0-5 scale
  return Math.max(0, Math.min(5, 2.5 + score * 0.5));
}
```

### User Journey Analysis

#### Journey Mapping
```javascript
// User journey tracking
function trackUserJourney(sessionData) {
  const journey = {
    entry_point: sessionData.referrer,
    pages_visited: sessionData.pageHistory,
    time_on_site: sessionData.totalTimeOnSite,
    conversation_flow: sessionData.conversationFlow,
    exit_point: sessionData.exitPage,
    conversion_achieved: sessionData.conversionType
  };
  
  return journey;
}
```

#### Conversion Funnel Analysis
```javascript
// Conversion funnel tracking
function analyzeConversionFunnel(sessions) {
  const funnel = {
    total_visitors: sessions.length,
    chatbot_interactions: sessions.filter(s => s.chatbotUsed).length,
    meaningful_conversations: sessions.filter(s => s.messageCount > 3).length,
    consultation_requests: sessions.filter(s => s.consultationRequested).length,
    actual_consultations: sessions.filter(s => s.consultationScheduled).length,
    projects_started: sessions.filter(s => s.projectStarted).length
  };
  
  return funnel;
}
```

## Reporting and Insights

### Automated Reports

#### Daily Reports
- Conversation volume and trends
- Performance metrics summary
- Error rate analysis
- User satisfaction scores

#### Weekly Reports
- User engagement patterns
- Content performance analysis
- Conversion rate trends
- System performance summary

#### Monthly Reports
- Business impact analysis
- ROI calculations
- User behavior insights
- Optimization recommendations

### Custom Analytics Queries

#### Common Questions Analysis
```sql
-- Most common questions
SELECT 
  conversation_topics,
  COUNT(*) as frequency,
  AVG(user_satisfaction) as avg_satisfaction
FROM chatbot_analytics
WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 30 DAY)
GROUP BY conversation_topics
ORDER BY frequency DESC
LIMIT 10;
```

#### Performance Trends
```sql
-- Response time trends
SELECT 
  DATE(timestamp) as date,
  AVG(response_time) as avg_response_time,
  COUNT(*) as total_conversations
FROM chatbot_analytics
WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 7 DAY)
GROUP BY DATE(timestamp)
ORDER BY date;
```

#### User Satisfaction Analysis
```sql
-- Satisfaction by topic
SELECT 
  conversation_topics,
  AVG(user_satisfaction) as avg_satisfaction,
  COUNT(*) as conversation_count
FROM chatbot_analytics
WHERE user_satisfaction IS NOT NULL
GROUP BY conversation_topics
ORDER BY avg_satisfaction DESC;
```

## Implementation Checklist

### Phase 1: Basic Analytics
- [ ] Set up Google Sheets analytics structure
- [ ] Implement conversation tracking
- [ ] Add performance monitoring
- [ ] Create basic reporting
- [ ] Test data collection

### Phase 2: Advanced Analytics
- [ ] Implement topic classification
- [ ] Add sentiment analysis
- [ ] Create user journey tracking
- [ ] Set up conversion funnel analysis
- [ ] Build analytics dashboard

### Phase 3: Intelligence & Optimization
- [ ] Implement predictive analytics
- [ ] Add A/B testing framework
- [ ] Create automated insights
- [ ] Set up alerting system
- [ ] Optimize based on data

## Privacy and Compliance

### Data Privacy
- **Data Minimization:** Collect only necessary data
- **User Consent:** Clear privacy policy and consent
- **Data Retention:** Automatic data purging policies
- **Access Control:** Restricted access to analytics data

### GDPR Compliance
- **Right to Access:** Users can request their data
- **Right to Deletion:** Users can request data deletion
- **Data Portability:** Users can export their data
- **Consent Management:** Clear opt-in/opt-out mechanisms

### Security Measures
- **Data Encryption:** Encrypt sensitive data
- **Access Logging:** Log all data access
- **Regular Audits:** Periodic security reviews
- **Incident Response:** Data breach procedures

## Monitoring and Alerting

### Key Alerts

#### Performance Alerts
- Response time > 5 seconds
- Error rate > 5%
- Uptime < 99%
- Memory usage > 90%

#### Business Alerts
- Conversion rate drop > 20%
- User satisfaction < 3.0
- Consultation requests drop > 30%
- Unusual traffic patterns

#### Security Alerts
- Unusual data access patterns
- Potential data breaches
- Suspicious user behavior
- System vulnerabilities

## Best Practices

### Data Quality
- Validate data at collection point
- Implement data cleaning processes
- Regular data quality audits
- Handle missing data appropriately

### Performance
- Optimize queries for large datasets
- Implement data aggregation
- Use caching for frequent queries
- Monitor query performance

### Insights
- Focus on actionable insights
- Regular review of metrics
- A/B testing for improvements
- Continuous optimization

---

*Last updated: December 19, 2024*
*Document version: 1.0*



================================================
FILE: docs/enhanced-response-format-frontend-integration.md
================================================
# Enhanced Response Format & Frontend Integration

## Overview

This document outlines the enhanced response format for the Nicky Bruno chatbot to improve frontend integration, user experience, and provide richer interaction capabilities.

## Current Response Format

**Current Format:**
```json
{
  "success": true,
  "message": "Thank you! Your message has been received. Check your email for confirmation.",
  "data": {
    "name": "John Doe",
    "email": "john@example.com",
    "language": "en",
    "timestamp": "2024-12-19T20:35:00.000Z"
  }
}
```

**Issues:**
- Generic response format
- No conversation context
- Missing user experience enhancements
- No follow-up suggestions
- Limited metadata

## Enhanced Response Format

### Standard Chatbot Response

```json
{
  "success": true,
  "response": {
    "message": "That's a great question about React development! Nicky has extensive experience with modern React applications and can help you build scalable, performant web applications.",
    "suggestions": [
      "What's your project timeline?",
      "Do you need help with state management?",
      "Are you looking for full-stack development?"
    ],
    "sessionId": "session-1703010900000",
    "timestamp": "2024-12-19T20:35:00.000Z",
    "language": "en",
    "messageId": "msg-1703010900000-001",
    "conversationContext": {
      "topic": "react_development",
      "intent": "service_inquiry",
      "confidence": 0.95
    }
  },
  "metadata": {
    "responseTime": 1.2,
    "messageCount": 5,
    "sessionDuration": 300,
    "satisfactionPrompt": true,
    "escalationAvailable": true
  },
  "actions": {
    "scheduleConsultation": {
      "available": true,
      "url": "/contact?type=consultation&topic=react_development",
      "text": "Schedule a consultation"
    },
    "viewPortfolio": {
      "available": true,
      "url": "/portfolio?filter=react",
      "text": "View React projects"
    }
  }
}
```

### Error Response Format

```json
{
  "success": false,
  "error": {
    "code": "rate_limit_exceeded",
    "message": "You've sent quite a few messages! Please wait a moment before sending another message.",
    "retryAfter": 300,
    "suggestion": "Feel free to browse my portfolio while you wait, or schedule a consultation for a more detailed discussion."
  },
  "sessionId": "session-1703010900000",
  "timestamp": "2024-12-19T20:35:00.000Z",
  "metadata": {
    "errorType": "rate_limit",
    "severity": "warning",
    "recoverable": true
  }
}
```

### Rate Limit Response

```json
{
  "success": false,
  "error": {
    "code": "rate_limit_exceeded",
    "message": "You've sent quite a few messages! Please wait a moment before sending another message. This helps ensure everyone gets a great experience.",
    "retryAfter": 300,
    "suggestion": "Feel free to browse my portfolio while you wait, or schedule a consultation for a more detailed discussion.",
    "countdown": 300
  },
  "sessionId": "session-1703010900000",
  "timestamp": "2024-12-19T20:35:00.000Z",
  "metadata": {
    "rateLimitType": "session",
    "limit": 10,
    "window": 300,
    "currentCount": 10
  }
}
```

## Frontend Integration Components

### React Component Integration

#### Enhanced Chatbot Component
```typescript
interface EnhancedChatbotResponse {
  success: boolean;
  response?: {
    message: string;
    suggestions: string[];
    sessionId: string;
    timestamp: string;
    language: string;
    messageId: string;
    conversationContext: {
      topic: string;
      intent: string;
      confidence: number;
    };
  };
  error?: {
    code: string;
    message: string;
    retryAfter?: number;
    suggestion?: string;
    countdown?: number;
  };
  metadata: {
    responseTime: number;
    messageCount: number;
    sessionDuration: number;
    satisfactionPrompt?: boolean;
    escalationAvailable?: boolean;
  };
  actions?: {
    scheduleConsultation?: {
      available: boolean;
      url: string;
      text: string;
    };
    viewPortfolio?: {
      available: boolean;
      url: string;
      text: string;
    };
  };
}

// Enhanced chatbot hook
const useEnhancedChatbot = () => {
  const [responses, setResponses] = useState<EnhancedChatbotResponse[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [rateLimit, setRateLimit] = useState<number | null>(null);

  const sendMessage = async (message: string) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/chatbot', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message, language: locale })
      });
      
      const data: EnhancedChatbotResponse = await response.json();
      
      if (data.success) {
        setResponses(prev => [...prev, data]);
        
        // Handle suggestions
        if (data.response?.suggestions) {
          // Show suggestion buttons
        }
        
        // Handle actions
        if (data.actions) {
          // Show action buttons
        }
      } else {
        // Handle errors
        if (data.error?.code === 'rate_limit_exceeded') {
          setRateLimit(data.error.retryAfter || 300);
        }
      }
    } catch (error) {
      console.error('Chatbot error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return { sendMessage, responses, isLoading, rateLimit };
};
```

#### Suggestion Buttons Component
```typescript
interface SuggestionButtonsProps {
  suggestions: string[];
  onSuggestionClick: (suggestion: string) => void;
  disabled?: boolean;
}

const SuggestionButtons: React.FC<SuggestionButtonsProps> = ({
  suggestions,
  onSuggestionClick,
  disabled = false
}) => {
  return (
    <div className="flex flex-wrap gap-2 mt-3">
      {suggestions.map((suggestion, index) => (
        <Button
          key={index}
          variant="outline"
          size="sm"
          onClick={() => onSuggestionClick(suggestion)}
          disabled={disabled}
          className="text-xs h-7 px-2 hover:bg-primary/10"
        >
          {suggestion}
        </Button>
      ))}
    </div>
  );
};
```

#### Action Buttons Component
```typescript
interface ActionButtonsProps {
  actions: EnhancedChatbotResponse['actions'];
  onActionClick: (action: string, url: string) => void;
}

const ActionButtons: React.FC<ActionButtonsProps> = ({ actions, onActionClick }) => {
  if (!actions) return null;

  return (
    <div className="flex flex-wrap gap-2 mt-3">
      {actions.scheduleConsultation?.available && (
        <Button
          variant="default"
          size="sm"
          onClick={() => onActionClick('consultation', actions.scheduleConsultation!.url)}
          className="bg-primary text-primary-foreground hover:bg-primary/90"
        >
          {actions.scheduleConsultation.text}
        </Button>
      )}
      
      {actions.viewPortfolio?.available && (
        <Button
          variant="outline"
          size="sm"
          onClick={() => onActionClick('portfolio', actions.viewPortfolio!.url)}
        >
          {actions.viewPortfolio.text}
        </Button>
      )}
    </div>
  );
};
```

### Rate Limit Handling

#### Rate Limit Component
```typescript
interface RateLimitProps {
  retryAfter: number;
  message: string;
  suggestion?: string;
}

const RateLimitMessage: React.FC<RateLimitProps> = ({ retryAfter, message, suggestion }) => {
  const [countdown, setCountdown] = useState(retryAfter);

  useEffect(() => {
    const timer = setInterval(() => {
      setCountdown(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  return (
    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
      <div className="flex items-center space-x-2">
        <Icon name="Clock" size={16} className="text-yellow-600" />
        <span className="text-yellow-800 font-medium">
          {countdown > 0 ? `${countdown}s` : 'Ready!'}
        </span>
      </div>
      <p className="text-yellow-700 mt-2">{message}</p>
      {suggestion && (
        <p className="text-yellow-600 text-sm mt-1">{suggestion}</p>
      )}
    </div>
  );
};
```

## n8n Workflow Implementation

### Enhanced Response Node

#### Response Formatting Node
```javascript
// Enhanced response formatting
function formatEnhancedResponse(aiResponse, sessionData, metadata) {
  const response = {
    success: true,
    response: {
      message: aiResponse.message,
      suggestions: generateSuggestions(aiResponse.topic, aiResponse.intent),
      sessionId: sessionData.sessionId,
      timestamp: new Date().toISOString(),
      language: sessionData.language,
      messageId: generateMessageId(),
      conversationContext: {
        topic: aiResponse.topic,
        intent: aiResponse.intent,
        confidence: aiResponse.confidence
      }
    },
    metadata: {
      responseTime: metadata.responseTime,
      messageCount: sessionData.messageCount,
      sessionDuration: calculateSessionDuration(sessionData.startTime),
      satisfactionPrompt: shouldShowSatisfactionPrompt(sessionData.messageCount),
      escalationAvailable: true
    },
    actions: generateActions(aiResponse.topic, aiResponse.intent)
  };

  return response;
}
```

#### Suggestion Generation
```javascript
// Dynamic suggestion generation
function generateSuggestions(topic, intent) {
  const suggestionMap = {
    'web_development': [
      'What\'s your project timeline?',
      'Do you need help with React or Next.js?',
      'Are you looking for full-stack development?'
    ],
    'ai_integration': [
      'What type of AI features do you need?',
      'Do you have existing data to work with?',
      'Are you looking for automation solutions?'
    ],
    'pricing_inquiry': [
      'What\'s your project scope?',
      'Do you have a specific budget range?',
      'Would you like to schedule a consultation?'
    ],
    'consultation_request': [
      'What\'s your preferred meeting time?',
      'Do you have specific questions prepared?',
      'Would you like to share project details?'
    ]
  };

  return suggestionMap[topic] || suggestionMap['general'] || [
    'How can I help you further?',
    'Do you have any other questions?',
    'Would you like to see my portfolio?'
  ];
}
```

#### Action Generation
```javascript
// Dynamic action generation
function generateActions(topic, intent) {
  const actions = {};

  // Always offer consultation for service inquiries
  if (intent === 'service_inquiry' || intent === 'pricing_inquiry') {
    actions.scheduleConsultation = {
      available: true,
      url: `/contact?type=consultation&topic=${topic}`,
      text: 'Schedule a consultation'
    };
  }

  // Offer portfolio view for relevant topics
  if (['web_development', 'ai_integration', 'database_design'].includes(topic)) {
    actions.viewPortfolio = {
      available: true,
      url: `/portfolio?filter=${topic}`,
      text: 'View related projects'
    };
  }

  return actions;
}
```

## Implementation Checklist

### Phase 1: Basic Enhanced Format
- [ ] Update n8n response formatting
- [ ] Implement suggestion generation
- [ ] Add action buttons
- [ ] Test with frontend integration
- [ ] Validate response structure

### Phase 2: Advanced Features
- [ ] Add conversation context
- [ ] Implement dynamic suggestions
- [ ] Create action generation logic
- [ ] Add metadata collection
- [ ] Test error handling

### Phase 3: Frontend Integration
- [ ] Update React components
- [ ] Implement rate limit handling
- [ ] Add suggestion buttons
- [ ] Create action buttons
- [ ] Test user experience

## Testing Scenarios

### Response Format Testing
- [ ] Valid successful response
- [ ] Error response format
- [ ] Rate limit response
- [ ] Missing data handling
- [ ] Large response handling

### Frontend Integration Testing
- [ ] Suggestion button clicks
- [ ] Action button navigation
- [ ] Rate limit countdown
- [ ] Error message display
- [ ] Loading state handling

### User Experience Testing
- [ ] Response time perception
- [ ] Suggestion relevance
- [ ] Action button usefulness
- [ ] Error message clarity
- [ ] Overall flow smoothness

## Performance Considerations

### Response Size Optimization
- Limit suggestion count to 3-5 items
- Optimize action button text length
- Compress metadata when possible
- Use efficient JSON structure

### Frontend Performance
- Implement response caching
- Use React.memo for components
- Optimize re-renders
- Lazy load suggestion components

### Network Optimization
- Compress API responses
- Implement response streaming for long responses
- Use efficient serialization
- Monitor response times

## Best Practices

### Response Design
- Keep messages concise but informative
- Use consistent tone and style
- Provide clear next steps
- Include relevant context

### Frontend Integration
- Handle all response states
- Provide loading indicators
- Implement error boundaries
- Use accessible components

### User Experience
- Make suggestions actionable
- Provide clear error messages
- Offer alternative paths
- Maintain conversation flow

---

*Last updated: December 19, 2024*
*Document version: 1.0*



================================================
FILE: docs/nickbruno-text-content.md
================================================
## **Home page**

### **Headline Hero Section**

**Design. Automate. Elevate.**  
 **I create powerful digital systems that simplify, streamline, and scale your business.**  
 From stunning websites to smart automation and AI-infused tools — I help you work smarter and stand out online.

🔧 **20+ years experience**  
 🚀 **80+ projects delivered**  
 ⏱ **4,000+ hours saved**

**\[See My Work\]** • **\[Book a Discovery Call\]**  
 📍 *Based in Montreal • Available for projects*

---

### **Intro**

Hi, I’m **Nicky Bruno** — a creative technologist and digital consultant.  
 I help businesses, startups, and entrepreneurs build modern websites, custom automations, and AI-driven systems that **save time**, **boost visibility**, and **look incredible**.

---

### **What I Do**

Modern solutions that blend creativity, tech, and strategy:

* **Web Design & Dev:** Fast, responsive, high-converting sites.

* **Automation & AI:** Workflows that save hours every week.

* **Brand & Digital Strategy:** Sharpen your brand, grow your impact.

👉 \[Learn More\]

---

### **Why It Works**

💰 **10+ hours/week saved:** Like automating client bookings for local service teams.  
 🚀 **Boosted visibility:** A restaurant client saw 45% more bookings in 60 days.  
 🧠 **Tech made simple:** No jargon. Just clear, smart solutions.

---

### **Featured Work**

**Sofia AI Desk** – Automated customer support with 60% faster replies.  
 **Next X Level** – Bilingual e-commerce, smooth UX, auto product updates.  
 **Lumicerra Labs** – Real-time lighting dashboard with live energy insights.  
 🔍 \[Explore the full portfolio\]

---

### **Client Voices**

“Nicky simplified our workflow. We save hours every week.”  
 — **Sofia Ops Team**

“Creative vision \+ tech skills \= transformed results.”  
 — **Alexandra, CEO, InnovateTech**

---

Want your digital systems to **work harder** for you?  
 Let’s build something remarkable.

🎯 \[Book a Discovery Call\]

---

---

## **About Nicky Bruno**

**Creative Technologist & Digital Consultant**

From design to AI, I build digital solutions that think, adapt, and evolve.

---

### **Who I Am**

Hi, I’m **Nicky Bruno**, a creative technologist based in Montreal. I bring together two decades of experience at the crossroads of design, development, and automation. I don’t choose between creativity and code — I use both to build smarter digital systems.

My work isn’t about just launching websites. It’s about crafting **intelligent experiences** that connect human intuition with machine precision. I’m fluent in both strategy and execution, design thinking and engineering — and I bring it all into every project.

🌍 *Global Impact* 🧠 *Visionary Thinking* 🛠 *Technical Execution* 🤝 *Human-Centered Collaboration*

---

### **Career Timeline**

📍 *20+ years of building future-ready digital solutions.*

* **2004** — Freelance Designer: Built first client websites, mastered Adobe Suite.  
* **2008** — Creative Agency Lead: Led UX-driven projects and design teams.  
* **2012** — Senior Developer: Full-stack, database optimization, performance-focused.  
* **2016** — Tech Consultant: Advised companies across North America on digital transformation.  
* **2018** — Founder, AIAA.dev: Pioneered AI integration and custom workflow automation.  
* **2024** — Creative Technologist: Delivering AI-powered, design-forward digital systems globally.

---

### **Experience by the Numbers**

✅ **20+ years** blending design & tech 🚀 **80+ projects** across industries 🌐 **15+ countries** served 🏆 **Multiple industry awards**

Highlights:

* 📈 *40%+ improvement in business processes*  
* 🤖 *Early AI adopter since 2018*  
* 🌎 *Clients from 5 continents*

---

### **Recognized Expertise**

**Certifications**

* AWS Certified Solutions Architect (2023)  
* Google AI/ML Certification (2022)  
* React Advanced Patterns – Meta (2023)  
* UX Design Professional – Adobe (2021)

**Speaking Engagements**

* *AI & Design Summit* – “The Future of Creative AI”  
* *Montreal Tech Conference* – “Bridging Design & Development”

**Publications**

* *Smashing Magazine*: “AI-Driven Design Systems” (15K+ reads)  
* *Medium*: “The Creative Technologist Manifesto” (8K+ reads)  
* *TechCrunch*: “Montreal’s Tech Renaissance” (12K+ reads)

**Open Source**

* `react-ai-components` – 2.3K ⭐  
* `design-system-ai` – 1.8K ⭐  
* `montreal-tech-map` – 950 ⭐

---

### **My Approach**

Tech should empower people. My process starts with understanding your goals and ends with **smart, intuitive** systems that free up your time and drive results.

---

### **What I Value**

✨ **Innovation** – Always evolving 🤝 **Collaboration** – Co-create with purpose ✅ **Quality** – Future-proof solutions 🔍 **Transparency** – No jargon, just clarity

---

### **Let’s Build Something Extraordinary**

With 20 years of experience, a global reach, and a passion for innovation, I’m ready to take on your next digital challenge.

**\[Start Your Project\]** • **\[View My Work\]** 📬 *Response within 24h • Currently available*

---

---

## **Page Services**

**Smart. Scalable. Future-Ready.** From concept to launch, I deliver digital solutions that combine design, development, and AI automation to help your business thrive.

---

### **The Four Pillars of Creative Technology**

Where strategy meets execution — and creativity meets intelligence.

#### ✅ Web Development

**Custom, high-performance websites** Built with the latest tech to deliver fast, responsive, and beautiful experiences. **Includes:**

* Responsive design for all devices  
* SEO optimization  
* Lightning-fast performance  
* Modern UI/UX  
* CMS integration 🛠 *Tech used: React, Next.js, Tailwind, TypeScript*

---

#### 🤖 AI & Automation

**Smarter workflows, less busywork** Automate repetitive tasks, improve efficiency, and integrate AI into your day-to-day. **Includes:**

* AI-powered chatbots  
* Workflow automation  
* Data processing scripts  
* App/tool integrations  
* Custom AI features 🛠 *Tech used: OpenAI, n8n, LangChain, Zapier*

---

#### 🎨 Design & Branding

**Make your brand unforgettable** Craft a cohesive, professional identity that speaks to your audience. **Includes:**

* Brand identity design  
* Logo \+ visual systems  
* UI/UX for web & apps  
* Full design systems  
* Brand guidelines 🛠 *Tools: Figma, Adobe CC, Framer*

---

#### 📊 Digital Strategy

**Plan smarter, grow faster** Get expert guidance on digital transformation, tech investment, and scalable solutions. **Includes:**

* Digital strategy roadmaps  
* Process and tech audits  
* Workflow optimization  
* Team onboarding & training  
* Ongoing strategic support

---

### **My Process**

1. **Discovery** — Understand your goals & users  
2. **Design** — Create engaging visuals & systems  
3. **Development** — Build scalable, efficient tech  
4. **AI Integration** — Add intelligence to workflows  
5. **Launch** — Monitor, refine & scale

---

### **Experience Snapshot**

📅 **20+ Years** in creative tech 🚀 **150+ Projects** successfully delivered 🤝 **50+ Clients** across industries 🔁 **95% Client Retention** — because results matter

---

### **Pricing & Investment**

Every project is unique. I offer **custom quotes** based on your goals, scope, and timeline. 💬 *Book a free 30-min consultation to get started.*

---

### **Let’s Build Something Great**

Need a standout website? Want to automate tasks with AI? Looking to scale your brand? Let’s bring your digital vision to life.

🎯 **\[Start Your Project\]** 📅 **\[Schedule a Free Consultation\]** ✅ *100% satisfaction guarantee*

---

---

## **Page Work/Examples/Portfolio**

**Creative Work. Strategic Impact.**  
 Explore how I fuse design, development, and AI to deliver real results.

---

### **Work That Speaks for Itself**

Each project is a story — of creativity, technology, and transformation.  
 From SaaS platforms and AI tools to mobile apps and design systems, I craft intelligent solutions that make a difference.

🎯 **20+ Projects**  
 🤝 **50+ Clients**  
 🏆 *Featured in industry publications*

---

### **Featured Projects**

#### **🔧 AIAA.dev — AI Automation Platform**

Revolutionizing creative workflows with intelligent task automation.  
 **Impact:**

* 10K+ users

* 85% automation rate

* 40+ hrs/week saved  
   **Key Features:** AI model training, dashboards, API integrations  
   **Client:** AIAA Labs  
   👉 *“Transformed our creative process.”*

---

#### **🌐 Montreal Tech Hub**

Platform uniting Montreal's tech community with events and networking.  
 **Impact:**

* 2.5K+ members

* 150+ events

* 78% engagement  
   **Key Features:** Job board, bilingual support, forums  
   👉 *“It’s where our community connects and grows.”*

---

#### **♻️ EcoTrack Analytics**

Helping businesses reduce their carbon footprint through smart data.  
 **Impact:**

* 25% CO₂ reduction

* 1M+ data points tracked  
   **Key Features:** IoT integration, real-time dashboards, predictive analytics  
   👉 *“Unmatched visibility into our sustainability impact.”*

---

#### **💸 FinanceFlow Mobile**

AI-powered personal finance app for smarter money management.  
 **Impact:**

* 50K+ downloads

* $2M+ saved

* 4.8★ user rating  
   **Key Features:** Budgeting automation, AI insights, cross-platform app  
   👉 *“It’s changed how I manage my money.”*

---

#### **🎨 CreativeStudio Pro**

Real-time collaborative design tool with AI assistance.  
 **Impact:**

* 10K+ projects

* 60% faster workflows  
   **Key Features:** Live editing, version control, design automation  
   👉 *“A total game-changer for design teams.”*

---

#### **🏥 HealthConnect Platform**

Telemedicine system for secure, scalable healthcare delivery.  
 **Impact:**

* 25K+ consultations

* 96% satisfaction  
   **Key Features:** HIPAA-compliant video, e-records, AI symptom checker  
   👉 *“Healthcare made accessible and secure.”*

---

### **All Projects**

Looking for something specific?  
 **Filter by:**  
 🧠 AI & Automation | 🌐 Web Platforms | 📱 Mobile Apps | 🎨 Design Tools | 🏥 Healthcare

---

### **Let’s Build Something Amazing**

Have a vision? I’ll help you bring it to life.  
 Whether it’s AI, web, or creative tech — I’m ready.

**\[Start a Project\]** • **\[Download Portfolio\]**  
 📬 *Response within 24h*

---

---

## **Page Contact**

**Let’s Build Something Extraordinary**  
 Have a project in mind? Let’s connect and bring it to life with smart design, AI integration, and modern tech.

---

### **Let’s Work Together**

Whether you’re launching a web platform, automating with AI, or rethinking your digital strategy — I’m here to help.

📨 **24hr Response Time**  
 🌍 **Global Collaboration**  
 🔒 **100% Confidential**

---

### **Quick Contact Form**

Tell me a bit about your project. I’ll get back to you within a day.

**Required Fields:**

* Full Name

* Email Address

* Project Type

* Message

Optional: Company, Budget Range, Timeline, and Project Details.  
 ✅ *Free consultation available*

👉 **\[Send Project Inquiry\]**

---

### **Prefer to Reach Out Directly?**

📧 **Email:** hello@nickybruno.ca  
 📞 **Phone:** \+1 (514) 555-0123  
 📍 **Location:** Montreal, QC – available globally

---

### **Connect Online**

* \[LinkedIn\] — For updates & networking

* \[GitHub\] — See my code & projects

* \[Twitter\] — Follow thoughts & trends

* \[Instagram\] — Peek behind the scenes

---

### **Need a Detailed Quote?**

For complex projects, fill out a multi-step brief to help define your scope, features, and goals.  
 🎯 Covers timeline, budget, challenges, and vision.  
 👉 **\[Start Detailed Brief\]**

---

### **FAQs — Quick Answers**

* **Project timelines?** Typically 2–12 weeks, depending on scope.

* **Work globally?** Yes — remote and on-site projects welcome.

* **AI services?** Yes — from automation to custom solutions.

* **Revisions?** Always included (2–3 rounds per project).

* **Payments?** 50% upfront, balance on delivery or by milestones.

* **Ongoing support?** Absolutely — maintenance packages available.

❓ **Don’t see your question?** \[Ask Me Directly\]

---

### **Let’s Talk**

I’ve helped startups, brands, and teams level up their digital presence — now let’s do the same for you.

**\[Start a Conversation\]** • **\[Schedule a Consultation\]**  
 📍 *Based in Montreal • Serving clients worldwide*

---

---

# Chatbot Content

{  
  "title": "Ask Nicky’s AI",  
  "subtitle": "Instant support, anytime",  
  "placeholder": "Type your question here...",  
  "send": "Send",  
  "typing": "Hang tight, crafting a response...",  
  "welcome": "Hey there\! I’m Nicky’s AI assistant. Need help with a project or have a question?",  
  "suggestionsTitle": "Try asking:",  
  "suggestion1": "What kind of services do you provide?",  
  "suggestion2": "How much does a custom website cost?",  
  "suggestion3": "Can you integrate AI into my business?",  
  "suggestion4": "Are you currently accepting new projects?",  
  "statusOnline": "Available Now",  
  "statusOffline": "Currently Offline",  
  "statusConnecting": "Connecting to assistant...",  
  "statusError": "Oops\! Something went wrong.",  
  "errorSendFailed": "Couldn’t send your message. Please try again.",  
  "errorNetworkError": "Network issue — check your internet connection.",  
  "errorServerError": "Server is down. Please try again later.",  
  "errorMessageTooLong": "Message is too long. Try shortening it.",  
  "errorEmptyMessage": "Type something before hitting send.",  
  "actionMinimize": "Hide chat",  
  "actionMaximize": "Open chat",  
  "actionClose": "Close assistant",  
  "actionClear": "Clear chat history",  
  "actionRetry": "Try again",  
  "accessibilityOpenChat": "Open support chat window",  
  "accessibilityCloseChat": "Close support chat",  
  "accessibilitySendMessage": "Press to send message",  
  "accessibilityMessageInput": "Message input field",  
  "accessibilityChatHistory": "Previous chat messages"  
}

---

---

# Globals {

  "navigation": {  
    "home": "Home",  
    "about": "About",  
    "services": "Services",  
    "portfolio": "Portfolio",  
    "testimonials": "Testimonials",  
    "contact": "Contact",  
    "cta": "Start a Project"  
  },  
  "common": {  
    "loading": "Loading...",  
    "error": "Oops\! Something went wrong.",  
    "retry": "Retry",  
    "close": "Close",  
    "open": "Open",  
    "next": "Next",  
    "previous": "Previous",  
    "submit": "Submit",  
    "cancel": "Cancel",  
    "save": "Save",  
    "edit": "Edit",  
    "delete": "Delete",  
    "view": "View",  
    "learnMore": "Learn More",  
    "getStarted": "Get Started",  
    "readMore": "Read More",  
    "seeMore": "See More",  
    "showLess": "Show Less",  
    "showMore": "Show More",  
    "viewProject": "View Project",  
    "viewCase": "View Case",  
    "viewCaseStudy": "View Case Study",  
    "liveDemo": "Live Demo",  
    "caseStudy": "Case Study",  
    "featuredProject": "Featured Project",  
    "industryAwards": "Industry Awards",  
    "communityLeader": "Community Leader",  
    "continuousLearning": "Lifelong Learner",  
    "creativeTechnologist": "Creative Technologist"  
  },  
  "seo": {  
    "title": "Nicky Bruno | Creative Technologist & Experience Designer",  
    "description": "Explore the digital work of Nicky Bruno — blending design, development, and AI storytelling to deliver future-ready experiences.",  
    "keywords": "creative technologist, web design, AI automation, UX strategy, Montreal digital consultant"  
  },  
  "meta": {  
    "siteName": "Nicky Bruno",  
    "author": "Nicky Bruno",  
    "language": "en",  
    "charset": "utf-8"  
  },  
  "languageSwitcher": {  
    "label": "Language",  
    "current": "English",  
    "switchTo": "Switch to",  
    "english": "English",  
    "french": "Français",  
    "ariaLabel": "Select website language"  
  },  
  "footer": {  
    "title": "Nicky Bruno",  
    "subtitle": "Creative Technologist & Digital Consultant",  
    "description": "Crafting modern, intelligent experiences through thoughtful design and cutting-edge technology.",  
    "sections": {  
      "services": {  
        "title": "Services",  
        "items": \[  
          "Web Development",  
          "AI & Automation",  
          "Design & Branding",  
          "Digital Strategy"  
        \]  
      },  
      "company": {  
        "title": "Company",  
        "items": \[  
          "About",  
          "Portfolio",  
          "Testimonials",  
          "Contact"  
        \]  
      },  
      "resources": {  
        "title": "Resources",  
        "items": \[  
          "Blog",  
          "Case Studies",  
          "Docs",  
          "Support"  
        \]  
      },  
      "legal": {  
        "title": "Legal",  
        "items": \[  
          "Privacy Policy",  
          "Terms of Use",  
          "Cookie Policy",  
          "GDPR Info"  
        \]  
      }  
    },  
    "contact": {  
      "title": "Let’s Connect",  
      "email": "hello@nickybruno.com",  
      "location": "Montreal, Canada",  
      "description": "Working remotely with clients worldwide"  
    },  
    "social": {  
      "title": "Connect Online",  
      "linkedin": "LinkedIn",  
      "twitter": "Twitter",  
      "github": "GitHub",  
      "dribbble": "Dribbble"  
    },  
    "newsletter": {  
      "title": "Join the Newsletter",  
      "description": "Get fresh insights on AI, design, and creative

# 

---

---




================================================
FILE: docs/rate-limiting-security-implementation.md
================================================
# Rate Limiting & Security Implementation

## Overview

This document outlines the implementation of rate limiting and security measures for the Nicky Bruno chatbot workflow to prevent abuse, spam, and ensure fair usage.

## Current Security Status

**Issues Identified:**
- No rate limiting implemented
- No abuse prevention mechanisms
- No IP-based restrictions
- No session validation
- Potential for spam and resource abuse

## Rate Limiting Strategy

### Implementation Levels

#### Level 1: Session-Based Rate Limiting
- **Limit:** 10 messages per 5-minute window per session
- **Scope:** Individual user sessions
- **Action:** Temporary cooldown with friendly message

#### Level 2: IP-Based Rate Limiting
- **Limit:** 50 messages per hour per IP address
- **Scope:** IP address across all sessions
- **Action:** Extended cooldown with escalation notice

#### Level 3: Global Rate Limiting
- **Limit:** 1000 messages per hour globally
- **Scope:** Entire chatbot system
- **Action:** System-wide throttling

## Implementation Plan

### Step 1: Add Rate Limiting Node

#### Node Configuration
```json
{
  "type": "n8n-nodes-base.if",
  "name": "Rate Limiter",
  "parameters": {
    "conditions": {
      "options": {
        "caseSensitive": true,
        "leftValue": "",
        "typeValidation": "strict",
        "version": 2
      },
      "conditions": [
        {
          "leftValue": "={{ $json.sessionId }}",
          "rightValue": "rate_limit_exceeded",
          "operator": {
            "type": "string",
            "operation": "notEquals"
          }
        }
      ],
      "combinator": "and"
    }
  }
}
```

#### Rate Limiting Logic
```javascript
// Pseudo-code for rate limiting logic
const sessionId = $json.sessionId;
const currentTime = new Date();
const timeWindow = 5 * 60 * 1000; // 5 minutes in milliseconds
const messageLimit = 10;

// Check if session exists in rate limit store
const sessionData = getSessionData(sessionId);

if (sessionData) {
  const recentMessages = sessionData.messages.filter(
    msg => (currentTime - msg.timestamp) < timeWindow
  );
  
  if (recentMessages.length >= messageLimit) {
    return "rate_limit_exceeded";
  }
}

return "rate_limit_ok";
```

### Step 2: Create Rate Limit Storage

#### Google Sheets Integration
**Sheet Name:** `rate_limits`
**Columns:**
- `session_id` (String)
- `ip_address` (String)
- `message_count` (Number)
- `last_message_time` (DateTime)
- `blocked_until` (DateTime)
- `violation_count` (Number)

#### Data Structure
```json
{
  "session_id": "session-1703010900000",
  "ip_address": "192.168.1.100",
  "message_count": 8,
  "last_message_time": "2024-12-19T20:35:00.000Z",
  "blocked_until": null,
  "violation_count": 0
}
```

### Step 3: Implement Rate Limit Check

#### Node Sequence
1. **Extract Session Data** - Get current session information
2. **Check Rate Limits** - Validate against all rate limiting rules
3. **Update Counters** - Increment message count and update timestamps
4. **Route Based on Result** - Continue or block based on rate limit status

#### Rate Limit Check Logic
```javascript
// Rate limit validation function
function checkRateLimits(sessionId, ipAddress) {
  const currentTime = new Date();
  
  // Get session data
  const sessionData = getSessionData(sessionId);
  const ipData = getIPData(ipAddress);
  
  // Check session rate limit (10 messages per 5 minutes)
  if (sessionData && isSessionRateLimited(sessionData, currentTime)) {
    return {
      allowed: false,
      reason: "session_rate_limit",
      retryAfter: calculateRetryAfter(sessionData.lastMessageTime)
    };
  }
  
  // Check IP rate limit (50 messages per hour)
  if (ipData && isIPRateLimited(ipData, currentTime)) {
    return {
      allowed: false,
      reason: "ip_rate_limit",
      retryAfter: calculateRetryAfter(ipData.lastMessageTime)
    };
  }
  
  return { allowed: true };
}
```

## Response Messages

### Rate Limit Exceeded Messages

#### English
```json
{
  "success": false,
  "error": "rate_limit_exceeded",
  "message": "You've sent quite a few messages! Please wait a moment before sending another message. This helps ensure everyone gets a great experience.",
  "retryAfter": 300,
  "suggestion": "Feel free to browse my portfolio while you wait, or schedule a consultation for a more detailed discussion."
}
```

#### French
```json
{
  "success": false,
  "error": "rate_limit_exceeded",
  "message": "Vous avez envoyé plusieurs messages ! Veuillez attendre un moment avant d'envoyer un autre message. Cela aide à garantir une excellente expérience pour tous.",
  "retryAfter": 300,
  "suggestion": "N'hésitez pas à parcourir mon portfolio pendant que vous attendez, ou planifiez une consultation pour une discussion plus détaillée."
}
```

### IP Blocked Messages

#### English
```json
{
  "success": false,
  "error": "ip_blocked",
  "message": "We've detected unusual activity from your IP address. Please contact us directly if you need assistance.",
  "contact": "nickdevmtl@gmail.com",
  "retryAfter": 3600
}
```

## Security Measures

### Input Validation

#### Message Validation
```javascript
function validateMessage(message) {
  // Check message length
  if (message.length > 1000) {
    return { valid: false, error: "message_too_long" };
  }
  
  // Check for spam patterns
  if (containsSpamPatterns(message)) {
    return { valid: false, error: "spam_detected" };
  }
  
  // Check for malicious content
  if (containsMaliciousContent(message)) {
    return { valid: false, error: "malicious_content" };
  }
  
  return { valid: true };
}
```

#### Spam Detection Patterns
- Repeated identical messages
- Excessive special characters
- URLs in messages (unless specifically allowed)
- Suspicious keyword patterns
- Rapid message sending patterns

### Session Security

#### Session Validation
```javascript
function validateSession(sessionId) {
  // Check session format
  if (!isValidSessionFormat(sessionId)) {
    return { valid: false, error: "invalid_session" };
  }
  
  // Check session age
  if (isSessionExpired(sessionId)) {
    return { valid: false, error: "session_expired" };
  }
  
  // Check session integrity
  if (!isSessionIntact(sessionId)) {
    return { valid: false, error: "session_tampered" };
  }
  
  return { valid: true };
}
```

## Monitoring and Alerting

### Key Metrics to Monitor

#### Rate Limiting Metrics
- Rate limit violations per hour
- Average messages per session
- Peak usage times
- Geographic distribution of violations

#### Security Metrics
- Spam detection rate
- Malicious content attempts
- Session hijacking attempts
- IP blocking frequency

### Alert Thresholds

#### Warning Alerts
- Rate limit violations > 10 per hour
- Spam attempts > 5 per hour
- Unusual traffic patterns

#### Critical Alerts
- Rate limit violations > 50 per hour
- Spam attempts > 20 per hour
- Potential DDoS attack patterns
- Multiple IP blocks in short time

## Implementation Checklist

### Phase 1: Basic Rate Limiting
- [ ] Add rate limiting node to workflow
- [ ] Implement session-based rate limiting
- [ ] Create rate limit storage in Google Sheets
- [ ] Add rate limit exceeded responses
- [ ] Test with normal usage patterns

### Phase 2: Enhanced Security
- [ ] Implement IP-based rate limiting
- [ ] Add input validation
- [ ] Create spam detection
- [ ] Add session validation
- [ ] Test with abuse scenarios

### Phase 3: Monitoring & Optimization
- [ ] Set up monitoring dashboards
- [ ] Configure alerting
- [ ] Analyze usage patterns
- [ ] Optimize rate limits based on data
- [ ] Document incident response procedures

## Testing Scenarios

### Normal Usage Testing
- Send 5 messages in 5 minutes (should work)
- Send 10 messages in 5 minutes (should work)
- Send 11 messages in 5 minutes (should be blocked)

### Abuse Testing
- Send 50 messages rapidly (should trigger IP limit)
- Send spam-like content (should be blocked)
- Use multiple sessions from same IP (should be tracked)

### Edge Case Testing
- Very long messages
- Special characters and emojis
- Empty or whitespace-only messages
- Session ID manipulation attempts

## Rollback Plan

### Emergency Rollback
1. Disable rate limiting node
2. Restore previous workflow version
3. Monitor for abuse patterns
4. Investigate and fix issues
5. Re-enable with adjustments

### Gradual Rollback
1. Increase rate limits temporarily
2. Monitor impact on legitimate users
3. Adjust thresholds based on data
4. Fine-tune implementation
5. Restore normal operation

## Best Practices

### Rate Limit Configuration
- Start with generous limits
- Monitor usage patterns
- Adjust based on legitimate usage
- Consider time-of-day variations
- Account for different user types

### Security Considerations
- Log all security events
- Implement proper error handling
- Use secure session management
- Regular security audits
- Keep documentation updated

### User Experience
- Provide clear error messages
- Suggest alternative actions
- Avoid blocking legitimate users
- Offer escalation paths
- Maintain professional tone

---

*Last updated: December 19, 2024*
*Document version: 1.0*



================================================
FILE: docs/troubleshooting.md
================================================
# Troubleshooting Guide

Common issues and solutions for the portfolio website integrations.

---

## Contact Form Issues

### "Unexpected end of JSON input" Error

**Symptoms:**
- `SyntaxError: Unexpected end of JSON input` in console
- Form shows error state after submission
- Error occurs at `response.json()` line

**Cause:** 
Webhook URL mismatch - the code is trying to reach a webhook that doesn't exist, so n8n returns HTML/empty response instead of JSON.

**Solution:**
```typescript
// Verify webhook URL matches n8n configuration
// CORRECT: 
const response = await fetch('https://n8n.nickyhome.casa/webhook-test/contact-form', {...})

// INCORRECT:
const response = await fetch('https://n8n.nickyhome.casa/webhook/contact-form', {...})
//                                                      ^^^^
//                                                      Missing "-test"
```

**Prevention:**
The updated code now includes response validation:
```typescript
// Check response status
if (!response.ok) {
  console.error('Server error:', response.status, response.statusText);
  setSubmitStatus('error');
  return;
}

// Check response is JSON before parsing
const contentType = response.headers.get('content-type');
if (!contentType || !contentType.includes('application/json')) {
  console.error('Invalid response type:', contentType);
  setSubmitStatus('error');
  return;
}
```

---

### Form Not Submitting

**Symptoms:**
- Form appears stuck after clicking submit
- No success or error message
- Loading state doesn't end

**Possible Causes & Solutions:**

1. **Network Error**
   ```javascript
   // Check browser console for errors
   // Look for: "Failed to fetch" or "Network request failed"
   ```
   **Solution:** 
   - Verify n8n instance is running at `https://n8n.nickyhome.casa`
   - Check internet connection
   - Verify webhook URL is correct in `ContactForm.tsx`
   - Must be: `https://n8n.nickyhome.casa/webhook-test/contact-form`

2. **CORS Error**
   ```
   Access to fetch has been blocked by CORS policy:
   No 'Access-Control-Allow-Origin' header is present
   ```
   **Solution:**
   
   ✅ **FIXED:** The workflow now allows CORS from:
   - `http://localhost:3000` (development)
   - `https://nickybruno.com` (production)
   - `https://www.nickybruno.com` (production with www)
   
   **If you still see CORS errors:**
   1. Open n8n workflow editor: https://n8n.nickyhome.casa
   2. Click on "Contact Form Webhook" node
   3. Expand "Options" section
   4. Set "Allowed Origins" to:
      ```
      http://localhost:3000,https://nickybruno.com,https://www.nickybruno.com
      ```
   5. Save and reactivate workflow
   
   **For different ports:**
   Add your port to allowed origins (e.g., `http://localhost:3001`)

3. **Workflow Inactive**
   **Solution:**
   - Open n8n: https://n8n.nickyhome.casa
   - Find "nickybruno.com" workflow
   - Click the toggle to activate it
   - Verify status shows "Active"

---

### Email Not Received

**Symptoms:**
- Form submits successfully
- Success message appears
- But no email arrives

**Possible Causes & Solutions:**

1. **Check Spam Folder**
   - Look in spam/junk folder
   - Mark as "Not Spam" if found
   - Add sender to contacts

2. **Gmail Credentials Expired**
   **Solution:**
   ```
   1. Go to n8n → Credentials
   2. Find "Gmail OAuth2"
   3. Click "Test" button
   4. If failed, click "Reconnect"
   5. Re-authorize with Google
   6. Test workflow again
   ```

3. **Email Address Invalid**
   - Verify email format is correct
   - Check for typos in address
   - Test with a different email

4. **Gmail API Quota Exceeded**
   **Solution:**
   - Check Google Cloud Console quota
   - Wait for quota reset (usually 24 hours)
   - Or increase quota limits

5. **Workflow Error**
   **Check Execution Logs:**
   ```
   1. Go to n8n → Executions
   2. Find latest failed execution
   3. Click to view details
   4. Check "Send Confirmation Email" node
   5. Review error message
   ```

---

### Validation Errors

**Symptoms:**
- Form shows error message
- Response: "Validation failed"
- Fields highlighted in red

**Solutions by Field:**

1. **"Name is required"**
   - Ensure name field is filled
   - Cannot be empty or whitespace only

2. **"Valid email is required"**
   - Check email format: `user@domain.com`
   - No spaces or special characters
   - Must include @ and domain extension

3. **"Message is required"**
   - Ensure message textarea is filled
   - Cannot be empty or whitespace only

**Test Pattern:**
```javascript
// Email validation regex
/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/

// Examples:
✅ john@example.com
✅ jane.doe@company.co.uk
❌ invalid.email
❌ @example.com
❌ user@
```

---

### Form State Issues

**Problem: Form doesn't clear after submission**

**Solution:**
```typescript
// Check ContactForm.tsx line ~87-98
// Ensure this code runs after successful submission:
setFormData({
  name: '',
  email: '',
  company: '',
  projectType: '',
  budget: '',
  timeline: '',
  message: '',
  newsletter: false,
  terms: false
});
```

**Problem: Loading state stuck**

**Solution:**
```typescript
// Ensure finally block always runs:
} finally {
  setIsSubmitting(false);
}
```

---

## n8n Workflow Issues

### Workflow Won't Activate

**Error:** "Cannot activate workflow"

**Solutions:**

1. **Missing Credentials**
   - Ensure Gmail OAuth2 credential exists
   - Name must be exactly: "Gmail OAuth2"
   - Test credential is working

2. **Webhook Conflict**
   - Another workflow using same webhook path
   - Change path or deactivate conflicting workflow

3. **Node Configuration Error**
   - Open workflow editor
   - Look for red exclamation marks on nodes
   - Fix missing required fields

### Execution Fails

**Check Error Type:**

1. **"Node not found" Error**
   ```
   Solution: Update workflow node connections
   Verify all nodes are properly connected
   ```

2. **"Credential not found" Error**
   ```
   Solution: Re-link Gmail credentials
   1. Click on "Send Confirmation Email" node
   2. Under Credentials, select "Gmail OAuth2"
   3. Save workflow
   ```

3. **"Expression Error" Error**
   ```
   Solution: Check expression syntax
   Common issues:
   - Missing {{ }} around expressions
   - Typo in field names (e.g., $json.body.name)
   - Accessing undefined properties
   ```

---

## API Testing

### Test with cURL

**Valid Request:**
```powershell
curl -X POST https://n8n.nickyhome.casa/webhook-test/contact-form `
  -H "Content-Type: application/json" `
  -v `
  -d '{
    "name": "Test User",
    "email": "test@example.com",
    "message": "Test message"
  }'
```

**Expected Response:**
```
< HTTP/1.1 200 OK
< Content-Type: application/json

{
  "success": true,
  "message": "Thank you! Your message has been received...",
  "data": {
    "name": "Test User",
    "email": "test@example.com",
    "timestamp": "2025-10-15T20:30:00.000Z"
  }
}
```

**Invalid Request (Test Validation):**
```powershell
curl -X POST https://n8n.nickyhome.casa/webhook-test/contact-form `
  -H "Content-Type: application/json" `
  -d '{
    "name": "",
    "email": "invalid",
    "message": ""
  }'
```

**Expected Response:**
```
< HTTP/1.1 400 Bad Request
< Content-Type: application/json

{
  "success": false,
  "message": "Validation failed. Please check your form data.",
  "errors": [
    "Name is required",
    "Valid email is required",
    "Message is required"
  ]
}
```

### Response Codes

| Code | Meaning | Action |
|------|---------|--------|
| 200 | Success | Email sent, form processed |
| 400 | Bad Request | Fix validation errors |
| 404 | Not Found | Check webhook URL |
| 500 | Server Error | Check n8n logs |
| 503 | Service Unavailable | n8n may be down |

---

## Development Issues

### TypeScript Errors

**Error:** Type errors in ContactForm.tsx

**Common Issues:**

1. **useState type mismatch**
   ```typescript
   // Ensure submitStatus type allows null
   const [submitStatus, setSubmitStatus] = useState<'success' | 'error' | null>(null);
   ```

2. **Event handler types**
   ```typescript
   // Use proper event type
   const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
     e.preventDefault();
     // ...
   }
   ```

### Build Errors

**Error:** "Module not found"

**Solution:**
```bash
# Clear Next.js cache
rm -rf .next

# Reinstall dependencies
npm ci

# Rebuild
npm run build
```

### Environment Issues

**Missing translations:**
```bash
# Verify translation files exist:
src/i18n/messages/en/contact.json
src/i18n/messages/fr/contact.json

# Check keys match in ContactForm.tsx:
t('contact.sections.form.submit')
```

---

## Gmail OAuth Issues

### Token Expired

**Error:** "Token has been expired or revoked"

**Solution:**
```
1. Go to n8n → Credentials → Gmail OAuth2
2. Click "Reconnect"
3. Sign in with Google account
4. Grant permissions:
   - View email messages
   - Send email
5. Click "Allow"
6. Test credential
```

### Permission Denied

**Error:** "Insufficient permissions"

**Solution:**
```
1. Check Google Cloud Console
2. Verify Gmail API is enabled
3. Check OAuth consent screen status
4. Ensure scopes include:
   - https://www.googleapis.com/auth/gmail.send
   - https://www.googleapis.com/auth/gmail.compose
```

### Quota Exceeded

**Error:** "Quota exceeded for quota metric"

**Check Quotas:**
```
1. Google Cloud Console
2. APIs & Services → Dashboard
3. Gmail API → Quotas
4. Review daily limits
```

**Default Limits:**
- Send: 500 emails/day (free tier)
- 100 emails/day (new accounts)

**Solutions:**
- Wait for quota reset (midnight Pacific Time)
- Request quota increase
- Upgrade to paid tier

---

## Debugging Checklist

### When form doesn't work:

- [ ] n8n instance is accessible: https://n8n.nickyhome.casa
- [ ] Workflow "nickybruno.com" is active
- [ ] Gmail OAuth2 credential is connected and valid
- [ ] Webhook URL in code matches actual endpoint
- [ ] Browser console shows no errors
- [ ] Network tab shows 200 or 400 response
- [ ] Required fields (name, email, message) are filled
- [ ] Email format is valid
- [ ] Internet connection is stable

### When email doesn't arrive:

- [ ] Check spam/junk folder
- [ ] Verify email address is correct
- [ ] Check n8n execution logs for errors
- [ ] Test Gmail credential in n8n
- [ ] Check Google Cloud Console quotas
- [ ] Try different email address
- [ ] Wait 5 minutes (occasional delays)
- [ ] Check Gmail API status page

---

## Getting More Help

### n8n Logs

**Access Execution Logs:**
```
1. Go to: https://n8n.nickyhome.casa/executions
2. Filter by workflow: "nickybruno.com"
3. Click on failed execution
4. Review each node's output
5. Look for error messages in red
```

### Browser DevTools

**Check Console:**
```
1. Press F12 (Windows) or Cmd+Option+I (Mac)
2. Go to Console tab
3. Look for red error messages
4. Copy error text for debugging
```

**Check Network:**
```
1. Open DevTools (F12)
2. Go to Network tab
3. Submit form
4. Find POST to webhook URL
5. Check:
   - Status code
   - Request payload
   - Response body
   - Headers
```

### Support Contacts

- **Email:** nickdevmtl@gmail.com
- **n8n Dashboard:** https://n8n.nickyhome.casa
- **GitHub Issues:** (if repository is public)

---

## Common Error Messages

### "Failed to fetch"
**Cause:** Network error or CORS  
**Solution:** Check n8n instance is running, verify CORS settings

### "Validation failed"
**Cause:** Required fields missing or invalid  
**Solution:** Check form inputs, ensure name, email, message are filled

### "Workflow not found"
**Cause:** Workflow deleted or renamed  
**Solution:** Verify workflow ID matches in n8n

### "Credential not found"
**Cause:** Gmail credential missing or renamed  
**Solution:** Ensure credential named "Gmail OAuth2" exists

### "Rate limit exceeded"
**Cause:** Too many requests  
**Solution:** Wait and try again, implement rate limiting

---

## Prevention Tips

### Best Practices

1. **Test Regularly**
   - Weekly form submission test
   - Monthly full integration test
   - Check email delivery

2. **Monitor Logs**
   - Review n8n executions weekly
   - Watch for error patterns
   - Set up alerts for failures

3. **Keep Credentials Fresh**
   - Test Gmail OAuth monthly
   - Renew before expiration
   - Keep backup credentials

4. **Backup Configuration**
   - Export n8n workflow monthly
   - Document changes
   - Version control integration code

5. **Update Dependencies**
   - Keep Next.js updated
   - Update n8n when stable versions release
   - Review breaking changes

---

**Last Updated:** October 15, 2025  
**For additional help, see:** [contact-form-n8n-integration.md](./contact-form-n8n-integration.md)




================================================
FILE: docs/dev/new-full-text-content.md
================================================
# **🌐 Nicky Bruno — Website Content**

**Bilingual Content (English & French)**  
 *Last updated: October 2025*

---

## **🧩 Globals**

### **Navigation**

**EN**

* Home

* About

* Services

* Portfolio

* Testimonials

* Contact

* CTA: Start a Project

**FR**

* Accueil

* À propos

* Services

* Portfolio

* Témoignages

* Contact

* CTA : Démarrer un projet

---

### **Footer**

**EN**

* Services: Web Development, AI & Automation, Design & Branding, Digital Strategy

* Company: About, Portfolio, Testimonials, Contact

* Resources: Blog, Case Studies, Docs, Support

* Legal: Privacy Policy, Terms of Use, Cookie Policy, GDPR Info

* Contact: hello@nickybruno.com — Montreal, Canada — Working remotely worldwide

* Social: LinkedIn, Twitter, GitHub, Dribbble

* Newsletter: “Join the Newsletter – Get fresh insights on AI, design, and creative technology.”

**FR**

* Services : Développement Web, IA & Automatisation, Conception & Image de marque, Stratégie numérique

* Entreprise : À propos, Portefeuille, Témoignages, Contact

* Ressources : Blog, Études de cas, Documents, Assistance

* Juridique : Politique de confidentialité, Conditions d’utilisation, Politique en matière de cookies, Informations RGPD

* Contact : hello@nickybruno.com — Montréal, Canada — Clients dans le monde entier

* Réseaux : LinkedIn, Twitter, GitHub, Dribbble

* Infolettre : « Recevez les dernières nouvelles sur l’IA, le design et la création numérique. »

---

## **🏠 Home Page**

### **Hero / Headline**

**EN**

**Design. Automate. Elevate.**  
 I create powerful digital systems that simplify, streamline, and scale your business.  
 From stunning websites to smart automation and AI-infused tools — I help you work smarter and stand out online.  
 🔧 20+ years experience 🚀 80+ projects delivered ⏱ 4,000+ hours saved  
 \[See My Work\] • \[Book a Discovery Call\]  
 📍 Based in Montreal • Available for projects

**FR**

**Concevoir. Automatiser. Améliorer.**  
 Je crée des systèmes numériques puissants qui simplifient, rationalisent et développent votre activité.  
 Des sites web époustouflants aux outils d’automatisation et d’IA intelligents — je vous aide à travailler plus efficacement et à vous démarquer en ligne.  
 🔧 Plus de 20 ans d’expérience 🚀 80+ projets ⏱ 4 000+ heures économisées  
 \[Voir mon travail\] • \[Réserver un appel découverte\]  
 📍 Basé à Montréal • Disponible pour des projets

---

### **Intro**

**EN**  
 Hi, I’m Nicky Bruno — a creative technologist and digital consultant.  
 I help businesses, startups, and entrepreneurs build modern websites, custom automations, and AI-driven systems that save time, boost visibility, and look incredible.

**FR**  
 Bonjour \! Je m’appelle Nicky Bruno, technologue créatif et consultant numérique.  
 J’aide les entreprises, startups et entrepreneurs à créer des sites web modernes, des automatisations personnalisées et des systèmes IA qui font gagner du temps et renforcent leur présence en ligne.

---

### **What I Do**

**EN**  
 Modern solutions that blend creativity, tech, and strategy:

* Web Design & Development

* Automation & AI

* Brand & Digital Strategy

**FR**  
 Des solutions modernes alliant créativité, technologie et stratégie :

* Conception et développement web

* Automatisation et IA

* Stratégie de marque et stratégie numérique

---

### **Why It Works**

**EN**  
 💰 10+ hours/week saved – like automating client bookings for local teams  
 🚀 Boosted visibility – 45 % more bookings in 60 days  
 🧠 Tech made simple – no jargon, just clear results

**FR**  
 💰 Plus de 10 heures économisées par semaine – grâce à l’automatisation des réservations clients  
 🚀 Visibilité accrue – \+45 % de réservations en 60 jours  
 🧠 Technologie simplifiée – pas de jargon, juste des solutions claires

---

### **Featured Work**

**EN**

* Sofia AI Desk — Automated support, 60 % faster replies

* Next X Level — Bilingual e-commerce, smooth UX

* Lumicerra Labs — Real-time lighting dashboard  
   🔍 \[Explore Portfolio\]

**FR**

* Sofia AI Desk — Assistance client automatisée, réponses 60 % plus rapides

* Next X Level — E-commerce bilingue, expérience fluide

* Lumicerra Labs — Tableau de bord éclairage temps réel  
   🔍 \[Découvrir le portefeuille\]

---

### **Client Voices**

**EN**

“Nicky simplified our workflow. We save hours every week.”  
 — Sofia Ops Team

“Creative vision \+ tech skills \= transformed results.”  
 — Alexandra, CEO InnovateTech

**FR**

« Nicky a simplifié notre flux de travail ; nous gagnons des heures chaque semaine. »  
 — Équipe Sofia Ops

« Vision créative \+ compétences techniques \= résultats transformés. »  
 — Alexandra, PDG InnovateTech

---

### **Call to Action**

**EN**  
 Want your digital systems to work harder for you? Let’s build something remarkable.  
 🎯 \[Book a Discovery Call\]

**FR**  
 Vous souhaitez optimiser vos systèmes numériques ? Créons ensemble quelque chose d’extraordinaire.  
 🎯 \[Réserver un appel découverte\]

---

## **👤 About Page**

### **Who I Am**

**EN**  
 Creative Technologist & Digital Consultant based in Montreal. 20+ years of experience blending design, code & AI automation to create intelligent digital experiences.

**FR**  
 Technologue créatif et consultant numérique à Montréal. Plus de 20 ans d’expérience alliant design, développement et IA pour créer des expériences numériques intelligentes.

---

### **Career Timeline**

| Year | EN | FR |
| ----- | ----- | ----- |
| 2004 | Freelance Designer – First client sites, Adobe Suite | Designer indépendant – Premiers sites clients, Adobe Suite |
| 2008 | Creative Agency Lead – UX projects & design teams | Responsable d’agence créative – Projets UX, équipes de conception |
| 2012 | Senior Developer – Full-stack & DB optimization | Développeur senior – Full stack et optimisation BDD |
| 2016 | Tech Consultant – Digital transformation | Consultant technique – Transformation numérique |
| 2018 | Founder AIAA.dev – AI integration pioneer | Fondateur AIAA.dev – Intégration IA et automatisation |
| 2024 | Creative Technologist – Global AI systems | Technologue créatif – Systèmes IA à portée mondiale |

---

### **Experience by Numbers**

**EN**

* 20+ years experience

* 80+ projects

* 15+ countries served

* 40 % business process improvement

**FR**

* Plus de 20 ans d’expérience

* 80+ projets

* 15+ pays desservis

* \+40 % d’efficacité opérationnelle

---

### **Recognized Expertise**

**EN**  
 Certifications: AWS Architect, Google AI/ML, React Advanced, Adobe UX  
 Talks: AI & Design Summit, Montreal Tech Conference  
 Publications: Smashing Magazine, Medium, TechCrunch  
 Open Source: react-ai-components, design-system-ai, montreal-tech-map

**FR**  
 Certifications : AWS, Google AI/ML, React Avancé, Adobe UX  
 Conférences : AI & Design Summit, Conférence Technologique Montréal  
 Publications : Smashing Magazine, Medium, TechCrunch  
 Open Source : react-ai-components, design-system-ai, montreal-tech-map

---

### **Values & Approach**

**EN**  
 Tech should empower people. My approach combines innovation, collaboration, quality and clarity.

**FR**  
 La technologie doit servir les gens. Mon approche allie innovation, collaboration, qualité et transparence.

---

### **CTA**

**EN** \[Start Your Project\] • \[View My Work\]  
 **FR** \[Commencez votre projet\] • \[Voir mon travail\]

---

## **⚙️ Services**

### **Intro**

**EN**  
 Smart. Scalable. Future-Ready. From concept to launch, I deliver design \+ development \+ AI automation solutions that help businesses thrive.

**FR**  
 Intelligentes. Évolutives. Prêtes pour l’avenir. De la conception au lancement, je fournis des solutions numériques combinant design, développement et automatisation IA.

---

### **Four Pillars**

1. **Web Development** / **Développement Web**

2. **AI & Automation** / **IA et Automatisation**

3. **Design & Branding** / **Design et Image de marque**

4. **Digital Strategy** / **Stratégie numérique**

---

### **Process**

**EN**  
 1 Discovery → 2 Design → 3 Development → 4 AI Integration → 5 Launch

**FR**  
 1 Découverte → 2 Conception → 3 Développement → 4 Intégration IA → 5 Lancement

---

### **Experience Snapshot**

**EN**  
 20+ years • 150+ projects • 95 % client retention

**FR**  
 20+ ans • 150+ projets • 95 % de fidélisation

---

### **Pricing & CTA**

**EN** Custom quotes \+ free 30 min consultation → \[Book Now\]  
 **FR** Devis personnalisés \+ consultation gratuite → \[Réserver maintenant\]

---

## **🧠 Portfolio / Work**

### **Intro**

**EN**  
 Creative Work. Strategic Impact. Each project is a story of design \+ technology \+ transformation.  
 **FR**  
 Travail créatif. Impact stratégique. Chaque projet raconte une histoire de créativité et de technologie.

---

### **Featured Projects**

| Project | EN Summary | FR Résumé |
| ----- | ----- | ----- |
| AIAA.dev | AI Automation Platform – 10 K users • 85 % automation | Plateforme d’automatisation IA – 10 000 utilisateurs • 85 % d’automatisation |
| Montreal Tech Hub | Community platform • 2.5 K members • 150 events | Plateforme communautaire • 2 500 membres • 150 événements |
| EcoTrack Analytics | IoT \+ real-time carbon tracking • 25 % CO₂ reduction | Suivi carbone en temps réel • –25 % CO₂ |
| FinanceFlow Mobile | AI finance app • 50 K downloads • 4.8★ | Application financière IA • 50 000 téléchargements • 4,8★ |
| CreativeStudio Pro | Real-time collaboration tool • 60 % faster workflows | Outil collaboratif temps réel • Flux de travail \+60 % |
| HealthConnect Platform | Telemedicine • 25 K consultations • 96 % satisfaction | Télémédecine • 25 000 consultations • 96 % de satisfaction |

---

### **CTA**

**EN** \[Start a Project\] • \[Download Portfolio\]  
 **FR** \[Lancer un projet\] • \[Télécharger le portefeuille\]

---

## **📬 Contact**

### **Hero**

**EN** Let’s Build Something Extraordinary. Have a project in mind? Let’s connect.  
 **FR** Construisons quelque chose d’extraordinaire. Vous avez un projet en tête ? Contactez-moi.

---

### **Quick Contact Form**

**EN**  
 Full Name • Email • Project Type • Message (Required)  
 Optional : Company / Budget / Timeline / Details

**FR**  
 Nom • Courriel • Type de projet • Message (Obligatoire)  
 Facultatif : Entreprise / Budget / Calendrier / Détails

---

### **Direct Contact**

📧 hello@nickybruno.ca  
 📞 \+1 (514) 555-0123  
 📍 Montreal • Worldwide Clients

---

### **FAQs**

| EN Question | EN Answer | FR Question | FR Réponse |
| ----- | ----- | ----- | ----- |
| Project timeline ? | 2 – 12 weeks depending on scope | Durée des projets ? | Environ 2 à 12 semaines |
| Do you work globally ? | Yes – remote and on-site projects welcome | Travail international ? | Oui, à distance ou sur site |
| AI services ? | Yes – automation to custom solutions | Services IA ? | Oui – de l’automatisation aux solutions personnalisées |
| Revisions ? | 2 – 3 rounds included | Révisions ? | 2 à 3 cycles inclus |
| Payments ? | 50 % upfront • balance on delivery | Paiements ? | 50 % à l’avance, solde à la livraison |
| Support ? | Yes – maintenance plans available | Assistance ? | Oui – forfaits de maintenance disponibles |

---

### **Final CTA**

**EN** \[Start a Conversation\] • \[Schedule a Consultation\]  
 **FR** \[Entamer une conversation\] • \[Prendre rendez-vous pour une consultation\]

---

## **🤖 Chatbot Content**

**EN**

Title: Ask Nicky’s AI    
Subtitle: Instant support, anytime    
Placeholder: Type your question here…    
Suggestions:    
\- What services do you provide?    
\- How much does a custom website cost?    
\- Can you integrate AI into my business?    
\- Are you accepting new projects?  

**FR**

Titre : Demandez à l’IA de Nicky    
Sous-titre : Assistance instantanée, à tout moment    
Exemples :    
\- Quels services proposez-vous ?    
\- Combien coûte un site web personnalisé ?    
\- Pouvez-vous intégrer l’IA dans mon entreprise ?    
\- Acceptez-vous de nouveaux projets ?    



================================================
FILE: public/_redirects
================================================
/* /index.html 200


================================================
FILE: public/manifest.json
================================================
{
  "short_name": "nicky-bruno-portfolio",
  "name": "nicky-bruno-portfolio",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}



================================================
FILE: public/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/chatgpt.webp
================================================
[Binary file]


================================================
FILE: public/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/svgtopng.zip
================================================
[Binary file]


================================================
FILE: src/app/globals.css
================================================
@import '../styles/tailwind.css';
@import '../styles/index.css';



================================================
FILE: src/app/layout.tsx
================================================
import type { ReactNode } from 'react';
import { headers } from 'next/headers';
import './globals.css';

export default async function RootLayout({ children }: { children: ReactNode }) {
  const headersList = await headers();
  const locale = headersList.get('x-next-intl-locale') ?? 'en';

  return (
    <html lang={locale} suppressHydrationWarning>
      <body className="bg-background font-inter text-foreground antialiased">
        {children}
      </body>
    </html>
  );
}



================================================
FILE: src/app/not-found.tsx
================================================
'use client';

import { type FC } from 'react';
import { useRouter } from 'next/navigation';
import Button from 'components/ui/Button';

const NotFound: FC = () => {
  const router = useRouter();

  const handleGoHome = () => {
    router.push('/');
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-background p-4">
      <div className="text-center max-w-md">
        <div className="flex justify-center mb-6">
          <div className="relative">
            <h1 className="text-9xl font-bold text-primary opacity-20">404</h1>
          </div>
        </div>

        <h2 className="text-2xl font-medium text-foreground mb-2">Page Not Found</h2>
        <p className="text-muted-foreground mb-8">
          The page you're looking for doesn't exist. Let's get you back!
        </p>

        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <Button variant="default" iconName="ArrowLeft" iconPosition="left" onClick={() => router.back()}>
            Go Back
          </Button>

          <Button
            variant="outline"
            iconName="Home"
            iconPosition="left"
            onClick={handleGoHome}
          >
            Back to Home
          </Button>
        </div>
      </div>
    </div>
  );
};

export default NotFound;



================================================
FILE: src/app/opengraph-image.tsx
================================================
import { ImageResponse } from 'next/og';

export const size = {
  width: 1200,
  height: 630,
};

export const contentType = 'image/png';

export default function OpengraphImage() {
  return new ImageResponse(
    (
      <div
        style={{
          width: '100%',
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'flex-start',
          padding: '96px',
          background: 'radial-gradient(circle at 20% 20%, rgba(0,255,209,0.2), transparent 60%), radial-gradient(circle at 80% 30%, rgba(0,255,209,0.1), transparent 55%)',
          backgroundColor: '#040404',
          color: '#f5f5f5',
          fontFamily: 'Space Grotesk, Inter, sans-serif',
        }}
      >
        <div
          style={{
            display: 'flex',
            padding: '12px 20px',
            borderRadius: '9999px',
            border: '1px solid rgba(0,255,209,0.4)',
            backgroundColor: 'rgba(0,255,209,0.08)',
            fontSize: '20px',
            letterSpacing: '0.08em',
            textTransform: 'uppercase',
            marginBottom: '28px',
          }}
        >
          Creative Technologist
        </div>
        <h1
          style={{
            fontSize: '72px',
            fontWeight: 700,
            margin: 0,
            lineHeight: 1.1,
          }}
        >
          Nicky Bruno
        </h1>
        <p
          style={{
            fontSize: '28px',
            marginTop: '24px',
            maxWidth: '720px',
            color: 'rgba(245,245,245,0.78)',
            lineHeight: 1.4,
          }}
        >
          Designing intelligent experiences at the intersection of design, code, and AI automation.
        </p>
      </div>
    ),
    size
  );
}



================================================
FILE: src/app/page.tsx
================================================
import {redirect} from 'next/navigation';
import {defaultLocale} from '@/i18n/config';

// Fallback server-side redirect from "/" to "/<defaultLocale>"
// Ensures root path works even if middleware doesn't match "/"
export default function RootRedirect() {
  redirect(`/${defaultLocale}`);
}



================================================
FILE: src/app/[locale]/layout.tsx
================================================
import type { ReactNode } from 'react';
import { notFound } from 'next/navigation';
import { NextIntlClientProvider } from 'next-intl';
import { setRequestLocale } from 'next-intl/server';
import ScrollToTop from 'components/ScrollToTop';
import Chatbot from '@/components/ui/Chatbot';
import { getMessages } from '@/i18n/getMessages';
import { type Locale, locales } from '@/i18n/config';

type LocaleLayoutProps = {
  children: ReactNode;
  params: Promise<{ locale: Locale }>;
};

export function generateStaticParams() {
  return locales.map((locale) => ({ locale }));
}

export default async function LocaleLayout({ children, params }: LocaleLayoutProps) {
  const { locale } = await params;

  if (!locales.includes(locale)) {
    notFound();
  }

  setRequestLocale(locale);

  const messages = await getMessages(locale);

  return (
    <NextIntlClientProvider locale={locale} messages={messages}>
      <ScrollToTop />
      {children}
      <Chatbot />
    </NextIntlClientProvider>
  );
}



================================================
FILE: src/app/[locale]/page.tsx
================================================
import Header from 'components/ui/Header';
import Footer from 'components/ui/Footer';
import HeroExperience from 'components/sections/hero/HeroExperience';
import HomeIntro from 'components/sections/home/HomeIntro';
import HomeCapabilities from 'components/sections/home/HomeCapabilities';
import HomeBenefits from 'components/sections/home/HomeBenefits';
import TechStackShowcase from 'components/sections/home/TechStackShowcase';
import HomeFeaturedProjects from 'components/sections/home/HomeFeaturedProjects';
import HomeTestimonials from 'components/sections/home/HomeTestimonials';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';

export async function generateMetadata({ params }: { params: Promise<{ locale: string }> }): Promise<Metadata> {
  const { locale } = await params;
  const t = await getTranslations({ locale, namespace: 'home' });

  return {
    title: t('metadata.title'),
    description: t('metadata.description'),
    alternates: {
      canonical: `/${locale}`,
    },
    openGraph: {
      title: t('metadata.ogTitle'),
      description: t('metadata.ogDescription'),
      siteName: t('metadata.ogSiteName'),
      type: 'website',
      locale: locale,
    },
  };
}

export default function LocaleHomePage() {
  return (
    <>
      <Header />
      <HeroExperience />
      <HomeIntro />
      <HomeCapabilities />
      <HomeBenefits />
      <TechStackShowcase />
      <HomeFeaturedProjects />
      <HomeTestimonials />
      <Footer />
    </>
  );
}



================================================
FILE: src/app/[locale]/about/page.tsx
================================================
import Header from 'components/ui/Header';
import Footer from 'components/ui/Footer';
import AboutSection from 'components/sections/about/AboutSection';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';

export async function generateMetadata({ params }: { params: Promise<{ locale: string }> }): Promise<Metadata> {
  const { locale } = await params;
  const t = await getTranslations({ locale, namespace: 'about' });

  return {
    title: t('metadata.title'),
    description: t('metadata.description'),
    alternates: {
      canonical: `/${locale}/about`,
    },
    openGraph: {
      title: t('metadata.ogTitle'),
      description: t('metadata.ogDescription'),
      type: 'website',
      locale: locale,
    },
  };
}

export default function AboutPage() {
  return (
    <>
      <Header />
      <AboutSection />
      <Footer />
    </>
  );
}



================================================
FILE: src/app/[locale]/contact/page.tsx
================================================
import Header from 'components/ui/Header';
import Footer from 'components/ui/Footer';
import ContactSection from 'components/sections/contact/ContactSection';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';

export async function generateMetadata({ params }: { params: Promise<{ locale: string }> }): Promise<Metadata> {
  const { locale } = await params;
  const t = await getTranslations({ locale, namespace: 'contact' });

  return {
    title: t('metadata.title'),
    description: t('metadata.description'),
    alternates: {
      canonical: `/${locale}/contact`,
    },
    openGraph: {
      title: t('metadata.ogTitle'),
      description: t('metadata.ogDescription'),
      type: 'website',
      locale: locale,
    },
  };
}

export default function ContactPage() {
  return (
    <>
      <Header />
      <ContactSection />
      <Footer />
    </>
  );
}



================================================
FILE: src/app/[locale]/portfolio/page.tsx
================================================
import Header from 'components/ui/Header';
import Footer from 'components/ui/Footer';
import PortfolioSection from 'components/sections/portfolio/PortfolioSection';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';

export async function generateMetadata({ params }: { params: Promise<{ locale: string }> }): Promise<Metadata> {
  const { locale } = await params;
  const t = await getTranslations({ locale, namespace: 'portfolio' });

  return {
    title: t('metadata.title'),
    description: t('metadata.description'),
    alternates: {
      canonical: `/${locale}/portfolio`,
    },
    openGraph: {
      title: t('metadata.ogTitle'),
      description: t('metadata.ogDescription'),
      type: 'website',
      locale: locale,
    },
  };
}

export default function PortfolioPage() {
  return (
    <>
      <Header />
      <PortfolioSection />
      <Footer />
    </>
  );
}



================================================
FILE: src/app/[locale]/services/page.tsx
================================================
import Header from 'components/ui/Header';
import Footer from 'components/ui/Footer';
import ServicesSection from 'components/sections/services/ServicesSection';
import type { Metadata } from 'next';
import { getTranslations } from 'next-intl/server';

export async function generateMetadata({ params }: { params: Promise<{ locale: string }> }): Promise<Metadata> {
  const { locale } = await params;
  const t = await getTranslations({ locale, namespace: 'services' });

  return {
    title: t('metadata.title'),
    description: t('metadata.description'),
    alternates: {
      canonical: `/${locale}/services`,
    },
    openGraph: {
      title: t('metadata.ogTitle'),
      description: t('metadata.ogDescription'),
      type: 'website',
      locale: locale,
    },
  };
}

export default function ServicesPage() {
  return (
    <>
      <Header />
      <ServicesSection />
      <Footer />
    </>
  );
}



================================================
FILE: src/components/AppIcon.tsx
================================================
import React from 'react';
import * as LucideIcons from 'lucide-react';
import { HelpCircle, type LucideIcon, type LucideProps } from 'lucide-react';

export type IconName = keyof typeof LucideIcons;

interface IconProps extends Omit<LucideProps, "ref"> {
  name: IconName | string;
}

const Icon: React.FC<IconProps> = ({
  name,
  size = 24,
  color = 'currentColor',
  className = '',
  strokeWidth = 2,
  ...props
}) => {
  const IconComponent = (LucideIcons as unknown as Record<string, LucideIcon | undefined>)[name];

  if (!IconComponent) {
    return (
      <HelpCircle
        size={size}
        color="gray"
        strokeWidth={strokeWidth}
        className={className}
        {...props}
      />
    );
  }

  return (
    <IconComponent
      size={size}
      color={color}
      strokeWidth={strokeWidth}
      className={className}
      {...props}
    />
  );
};

export default Icon;



================================================
FILE: src/components/AppImage.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React, { forwardRef } from 'react';

const FALLBACK_IMAGE = "/assets/images/profil_portrait.jpg";

interface AppImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {
  src: string;
  fallbackSrc?: string;
}

const Image = forwardRef<HTMLImageElement, AppImageProps>(function AppImage(
  {
    src,
    alt = "Image Name",
    className = "",
    fallbackSrc = FALLBACK_IMAGE,
    onError,
    ...props
  },
  ref
) {
  const handleError: React.ReactEventHandler<HTMLImageElement> = (event) => {
    const currentTarget = event.currentTarget;
    if (currentTarget.dataset?.fallbackApplied) {
      onError?.(event);
      return;
    }

    currentTarget.dataset.fallbackApplied = "true";
    currentTarget.src = fallbackSrc;
    onError?.(event);
  };

  return (
    <img
      ref={ref}
      src={src}
      alt={alt}
      className={className}
      onError={handleError}
      {...props}
    />
  );
});

export default Image;



================================================
FILE: src/components/ErrorBoundary.tsx
================================================
import React from "react";
import Icon from "./AppIcon";

interface ErrorBoundaryState {
  hasError: boolean;
}

type ErrorBoundaryProps = React.PropsWithChildren<Record<string, unknown>>;

declare global {
  interface Window {
    __COMPONENT_ERROR__?: (error: Error, info: React.ErrorInfo) => void;
  }
}

class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(): ErrorBoundaryState {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    (error as Error & { __ErrorBoundary?: boolean }).__ErrorBoundary = true;
    if (typeof window !== "undefined") {
      window.__COMPONENT_ERROR__?.(error, errorInfo);
    }
  }

  render(): React.ReactNode {
    if (this.state?.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-neutral-50">
          <div className="text-center p-8 max-w-md">
            <div className="flex justify-center items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" width="42px" height="42px" viewBox="0 0 32 33" fill="none">
                <path d="M16 28.5C22.6274 28.5 28 23.1274 28 16.5C28 9.87258 22.6274 4.5 16 4.5C9.37258 4.5 4 9.87258 4 16.5C4 23.1274 9.37258 28.5 16 28.5Z" stroke="#343330" strokeWidth="2" strokeMiterlimit="10" />
                <path d="M11.5 15.5C12.3284 15.5 13 14.8284 13 14C13 13.1716 12.3284 12.5 11.5 12.5C10.6716 12.5 10 13.1716 10 14C10 14.8284 10.6716 15.5 11.5 15.5Z" fill="#343330" />
                <path d="M20.5 15.5C21.3284 15.5 22 14.8284 22 14C22 13.1716 21.3284 12.5 20.5 12.5C19.6716 12.5 19 13.1716 19 14C19 14.8284 19.6716 15.5 20.5 15.5Z" fill="#343330" />
                <path d="M21 22.5C19.9625 20.7062 18.2213 19.5 16 19.5C13.7787 19.5 12.0375 20.7062 11 22.5" stroke="#343330" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              </svg>
            </div>
            <div className="flex flex-col gap-1 text-center">
              <h1 className="text-2xl font-medium text-neutral-800">Something went wrong</h1>
              <p className="text-neutral-600 text-base w w-8/12 mx-auto">We encountered an unexpected error while processing your request.</p>
            </div>
            <div className="flex justify-center items-center mt-6">
              <button
                onClick={() => {
                  window.location.href = "/";
                }}
                className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded flex items-center gap-2 transition-colors duration-200 shadow-sm"
                type="button"
              >
                <Icon name="ArrowLeft" size={18} color="#fff" />
                Back
              </button>
            </div>
          </div >
        </div >
      );
    }

    return this.props?.children;
  }
}

export default ErrorBoundary;



================================================
FILE: src/components/ScrollToTop.tsx
================================================
'use client';

import { type FC, useEffect } from "react";
import { usePathname } from "next/navigation";

const ScrollToTop: FC = () => {
  const pathname = usePathname();

  useEffect(() => {
    if (typeof window === "undefined") return;
    window.scrollTo(0, 0);
  }, [pathname]);

  return null;
};

export default ScrollToTop;



================================================
FILE: src/components/sections/about/AboutSection.tsx
================================================
'use client';

import { type FC, useEffect } from 'react';
import { useLocale, useTranslations } from 'next-intl';
import Link from 'next/link';
import CareerTimeline from './CareerTimeline';
import CredentialsShowcase from './CredentialsShowcase';
import ExperienceCounter from './ExperienceCounter';
import PersonalIntro from './PersonalIntro';

const AboutSection: FC = () => {
  const locale = useLocale();
  const t = useTranslations('about');
  const tGlobal = useTranslations('global');

  useEffect(() => {
    if (typeof window !== 'undefined') {
      window.scrollTo(0, 0);
    }
  }, []);

  return (
    <div className="min-h-screen bg-background">

      <main className="pt-16">
        {/* Personal Introduction Section */}
        <section className="py-16 lg:py-24">
          <div className="mx-auto max-w-7xl px-6 lg:px-8">
            <PersonalIntro />
          </div>
        </section>

        {/* Experience Counter Section */}
        <section className="bg-gradient-to-br from-card/20 to-transparent py-16 lg:py-24">
          <div className="mx-auto max-w-6xl px-6 lg:px-8">
            <ExperienceCounter />
          </div>
        </section>

        {/* Career Timeline Section */}
        <section className="py-16 lg:py-24">
          <div className="mx-auto max-w-6xl px-6 lg:px-8">
            <CareerTimeline />
          </div>
        </section>

        {/* Credentials & Recognition Section */}
        <section className="bg-gradient-to-br from-card/20 to-transparent py-16 lg:py-24">
          <div className="mx-auto max-w-7xl px-6 lg:px-8">
            <CredentialsShowcase />
          </div>
        </section>

        {/* Call to Action Section */}
        <section className="py-16 lg:py-24">
          <div className="mx-auto max-w-4xl px-6 lg:px-8 text-center">
            <div className="space-y-8 rounded-2xl border border-primary/20 bg-gradient-to-br from-primary/10 to-transparent p-12 backdrop-blur-sm">
              <div className="space-y-4">
                <h2 className="text-3xl font-space-grotesk font-bold text-foreground lg:text-4xl">
                  {t('sections.cta.title')}
                  <span className="text-glow block text-primary">{t('sections.cta.titleHighlight')}</span>
                </h2>

                <p className="mx-auto max-w-2xl text-lg text-muted-foreground">
                  {t('sections.cta.description')}
                </p>
              </div>

              <div className="flex flex-col items-center justify-center gap-4 sm:flex-row">
                <Link
                  href={`/${locale}/contact`}
                  className="inline-flex items-center justify-center rounded-lg bg-primary px-8 py-4 font-space-grotesk font-semibold text-black transition-smooth hover:bg-primary/90 glow-neon hover:glow-neon-active"
                >
                  {t('sections.cta.buttons.startProject')}
                </Link>

                <Link
                  href={`/${locale}/portfolio`}
                  className="inline-flex items-center justify-center rounded-lg border border-border px-8 py-4 font-space-grotesk font-semibold text-foreground transition-smooth hover:border-primary/50"
                >
                  {t('sections.cta.buttons.viewWork')}
                </Link>
              </div>

              <div className="flex items-center justify-center space-x-8 text-sm text-muted-foreground">
                <div className="flex items-center space-x-2">
                  <div className="h-2 w-2 animate-pulse rounded-full bg-primary" />
                  <span>{t('sections.cta.status.available')}</span>
                </div>
                <div className="h-1 w-1 rounded-full bg-border" />
                <div className="flex items-center space-x-2">
                  <span>{t('sections.cta.status.response')}</span>
                </div>
              </div>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
};

export default AboutSection;



================================================
FILE: src/components/sections/about/CareerTimeline.tsx
================================================
'use client';

import React, { type FC, useState } from "react";
import Icon, { type IconName } from "components/AppIcon";
import { useTranslations } from 'next-intl';

interface Milestone {
  year: string;
  title: string;
  company: string;
  location: string;
  description: string;
  icon: IconName;
  color: string;
  achievements: string[];
}

const CareerTimeline: FC = () => {
  const t = useTranslations('about.sections.timeline');
  const [activeIndex, setActiveIndex] = useState(0);

  const milestones: Milestone[] = [
    {
      year: "2004",
      title: t('milestones.2004.title'),
      company: t('milestones.2004.company'),
      location: t('milestones.2004.location'),
      description: t('milestones.2004.description'),
      icon: "Palette",
      color: "text-blue-400",
      achievements: [t('milestones.2004.achievements.0'), t('milestones.2004.achievements.1'), t('milestones.2004.achievements.2')],
    },
    {
      year: "2008",
      title: t('milestones.2008.title'),
      company: t('milestones.2008.company'),
      location: t('milestones.2008.location'),
      description: t('milestones.2008.description'),
      icon: "Monitor",
      color: "text-green-400",
      achievements: [t('milestones.2008.achievements.0'), t('milestones.2008.achievements.1'), t('milestones.2008.achievements.2')],
    },
    {
      year: "2012",
      title: t('milestones.2012.title'),
      company: t('milestones.2012.company'),
      location: t('milestones.2012.location'),
      description: t('milestones.2012.description'),
      icon: "Code",
      color: "text-purple-400",
      achievements: [t('milestones.2012.achievements.0'), t('milestones.2012.achievements.1'), t('milestones.2012.achievements.2')],
    },
    {
      year: "2016",
      title: t('milestones.2016.title'),
      company: t('milestones.2016.company'),
      location: t('milestones.2016.location'),
      description: t('milestones.2016.description'),
      icon: "Lightbulb",
      color: "text-yellow-400",
      achievements: [t('milestones.2016.achievements.0'), t('milestones.2016.achievements.1'), t('milestones.2016.achievements.2')],
    },
    {
      year: "2018",
      title: t('milestones.2018.title'),
      company: t('milestones.2018.company'),
      location: t('milestones.2018.location'),
      description: t('milestones.2018.description'),
      icon: "Brain",
      color: "text-primary",
      achievements: [t('milestones.2018.achievements.0'), t('milestones.2018.achievements.1'), t('milestones.2018.achievements.2')],
    },
    {
      year: "2024",
      title: t('milestones.2024.title'),
      company: t('milestones.2024.company'),
      location: t('milestones.2024.location'),
      description: t('milestones.2024.description'),
      icon: "Zap",
      color: "text-primary",
      achievements: [t('milestones.2024.achievements.0'), t('milestones.2024.achievements.1'), t('milestones.2024.achievements.2')],
    },
  ];

  return (
    <div className="space-y-12">
      <div className="text-center">
        <div className="flex items-center justify-center space-x-3 mb-4">
          <div className="w-12 h-1 bg-primary rounded-full" />
          <span className="text-sm font-mono text-primary uppercase tracking-wider">{t('badge')}</span>
          <div className="w-12 h-1 bg-primary rounded-full" />
        </div>

        <h3 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
          {t('title')}
        </h3>

        <p className="text-muted-foreground max-w-2xl mx-auto">
          {t('description')}
        </p>
      </div>
      <div className="relative">
        <div className="absolute left-8 lg:left-1/2 lg:-translate-x-0.5 top-0 bottom-0 w-0.5 bg-gradient-to-b from-primary via-primary/50 to-transparent" />

        <div className="space-y-12">
          {milestones.map((milestone, index) => (
            <div
              key={milestone.year}
              className={`relative flex flex-col lg:flex-row items-start lg:items-center ${index % 2 === 0 ? "lg:flex-row" : "lg:flex-row-reverse"
                }`}
              onMouseEnter={() => setActiveIndex(index)}
            >
              <div className="absolute left-8 lg:left-1/2 lg:-translate-x-1/2 w-4 h-4 bg-background border-2 border-primary rounded-full z-10">
                <div
                  className={`absolute inset-1 rounded-full transition-smooth ${activeIndex === index ? "bg-primary glow-neon" : "bg-primary/50"
                    }`}
                />
              </div>

              <div
                className={`ml-20 lg:ml-0 lg:w-5/12 ${index % 2 === 0 ? "lg:mr-auto lg:pr-8" : "lg:ml-auto lg:pl-8"
                  }`}
              >
                <div
                  className={`bg-card/50 backdrop-blur-sm rounded-xl border border-border/50 p-6 transition-smooth hover:border-primary/30 group ${activeIndex === index ? "glow-neon border-primary/50" : ""
                    }`}
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      <div className="bg-primary/10 rounded-lg p-2 group-hover:bg-primary/20 transition-smooth">
                        <Icon name={milestone.icon} size={20} className={milestone.color} />
                      </div>
                      <div>
                        <div className="text-2xl font-space-grotesk font-bold text-primary">
                          {milestone.year}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="mb-4">
                    <h4 className="text-xl font-space-grotesk font-bold text-foreground mb-1">
                      {milestone.title}
                    </h4>
                    <div className="flex items-center space-x-2 text-sm text-muted-foreground">
                      <span className="font-medium">{milestone.company}</span>
                      <div className="w-1 h-1 bg-border rounded-full" />
                      <div className="flex items-center space-x-1">
                        <Icon name="MapPin" size={12} />
                        <span>{milestone.location}</span>
                      </div>
                    </div>
                  </div>

                  <p className="text-muted-foreground leading-relaxed mb-4">
                    {milestone.description}
                  </p>

                  <div className="space-y-2">
                    <h5 className="text-sm font-space-grotesk font-semibold text-foreground">{t('keyAchievements')}</h5>
                    <div className="flex flex-wrap gap-2">
                      {milestone.achievements.map((achievement) => (
                        <span
                          key={achievement}
                          className="px-3 py-1 bg-primary/10 text-primary text-xs rounded-full border border-primary/20"
                        >
                          {achievement}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="bg-gradient-to-br from-primary/10 to-transparent backdrop-blur-sm rounded-2xl border border-primary/20 p-8 text-center">
        <div className="flex items-center justify-center space-x-2 mb-4">
          <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
          <span className="text-sm font-mono text-primary uppercase tracking-wider">{t('currentStatus.badge')}</span>
          <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
        </div>

        <h4 className="text-2xl font-space-grotesk font-bold text-foreground mb-2">
          {t('currentStatus.title')}
        </h4>

        <p className="text-muted-foreground max-w-lg mx-auto">
          {t('currentStatus.description')}
        </p>
      </div>
    </div>
  );
};

export default CareerTimeline;



================================================
FILE: src/components/sections/about/CredentialsShowcase.tsx
================================================
'use client';

import React, { type FC } from "react";
import { useTranslations } from "next-intl";
import Icon, { type IconName } from "components/AppIcon";

interface CertConfig {
  key: string;
  icon: IconName;
  color: string;
}

interface SpeakingConfig {
  key: string;
  icon: IconName;
}

interface PublicationConfig {
  key: string;
  icon: IconName;
}

interface OpenSourceConfig {
  key: string;
  icon: IconName;
}

const certConfigs: CertConfig[] = [
  { key: "aws", icon: "Cloud", color: "text-orange-400" },
  { key: "google", icon: "Brain", color: "text-blue-400" },
  { key: "react", icon: "Code", color: "text-cyan-400" },
  { key: "ux", icon: "Palette", color: "text-purple-400" },
];

const speakingConfigs: SpeakingConfig[] = [
  { key: "aiSummit", icon: "Mic" },
  { key: "montrealTech", icon: "Users" },
  { key: "reactMeetup", icon: "Zap" },
];

const publicationConfigs: PublicationConfig[] = [
  { key: "designSystems", icon: "BookOpen" },
  { key: "manifesto", icon: "FileText" },
  { key: "renaissance", icon: "Newspaper" },
];

const openSourceConfigs: OpenSourceConfig[] = [
  { key: "reactAi", icon: "Github" },
  { key: "designSystemAi", icon: "Palette" },
  { key: "montrealMap", icon: "Map" },
];

const CredentialsShowcase: FC = () => {
  const t = useTranslations("about.sections.credentials");
  return (
    <div className="space-y-16">
      <div className="text-center">
        <div className="flex items-center justify-center space-x-3 mb-4">
          <div className="w-12 h-1 bg-primary rounded-full" />
          <span className="text-sm font-mono text-primary uppercase tracking-wider">{t('badge')}</span>
          <div className="w-12 h-1 bg-primary rounded-full" />
        </div>

        <h3 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
          {t('title')}
        </h3>

        <p className="text-muted-foreground max-w-2xl mx-auto">
          {t('description')}
        </p>
      </div>

      <div className="space-y-8">
        <h4 className="text-2xl font-space-grotesk font-bold text-foreground text-center">
          {t('sections.certifications.title')}
        </h4>

        <div className="grid lg:grid-cols-4 gap-6">
          {certConfigs.map((config) => (
            <div
              key={config.key}
              className="bg-card/50 backdrop-blur-sm rounded-xl border border-border/50 p-6 hover:border-primary/30 transition-smooth group"
            >
              <div className="flex items-start space-x-4">
                <div className="bg-primary/10 rounded-lg p-3 group-hover:bg-primary/20 transition-smooth">
                  <Icon name={config.icon} size={20} className={config.color} />
                </div>

                <div className="flex-1 space-y-2">
                  <h5 className="font-space-grotesk font-semibold text-foreground text-sm">
                    {t(`sections.certifications.items.${config.key}.title`)}
                  </h5>
                  <p className="text-xs text-muted-foreground">{t(`sections.certifications.items.${config.key}.issuer`)}</p>
                  <span className="text-xs text-primary font-mono bg-primary/10 px-2 py-1 rounded">
                    {t(`sections.certifications.items.${config.key}.year`)}
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="space-y-8">
        <h4 className="text-2xl font-space-grotesk font-bold text-foreground text-center">
          {t('sections.speaking.title')}
        </h4>

        <div className="grid lg:grid-cols-3 gap-6">
          {speakingConfigs.map((config) => (
            <div
              key={config.key}
              className="bg-card/50 backdrop-blur-sm rounded-xl border border-border/50 p-6 hover:border-primary/30 transition-smooth group"
            >
              <div className="flex items-start space-x-4">
                <div className="bg-primary/10 rounded-lg p-3 group-hover:bg-primary/20 transition-smooth">
                  <Icon name={config.icon} size={20} className="text-primary" />
                </div>

                <div className="flex-1 space-y-2">
                  <h5 className="font-space-grotesk font-semibold text-foreground">
                    {t(`sections.speaking.items.${config.key}.event`)}
                  </h5>
                  <p className="text-sm text-muted-foreground">{t(`sections.speaking.items.${config.key}.topic`)}</p>
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <div className="flex items-center space-x-1">
                      <Icon name="MapPin" size={12} />
                      <span>{t(`sections.speaking.items.${config.key}.location`)}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Icon name="Users" size={12} />
                      <span>{t(`sections.speaking.items.${config.key}.attendees`)}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="space-y-8">
        <h4 className="text-2xl font-space-grotesk font-bold text-foreground text-center">
          {t('sections.publications.title')}
        </h4>

        <div className="grid lg:grid-cols-3 gap-6">
          {publicationConfigs.map((config) => (
            <div
              key={config.key}
              className="bg-card/50 backdrop-blur-sm rounded-xl border border-border/50 p-6 hover:border-primary/30 transition-smooth group"
            >
              <div className="flex items-start space-x-4">
                <div className="bg-primary/10 rounded-lg p-3 group-hover:bg-primary/20 transition-smooth">
                  <Icon name={config.icon} size={20} className="text-primary" />
                </div>

                <div className="flex-1 space-y-2">
                  <h5 className="font-space-grotesk font-semibold text-foreground text-sm">
                    {t(`sections.publications.items.${config.key}.title`)}
                  </h5>
                  <p className="text-sm text-muted-foreground">{t(`sections.publications.items.${config.key}.publication`)}</p>
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <span>{t(`sections.publications.items.${config.key}.date`)}</span>
                    <div className="flex items-center space-x-1">
                      <Icon name="Eye" size={12} />
                      <span>{t(`sections.publications.items.${config.key}.reads`)} {t('sections.publications.reads')}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="space-y-8">
        <h4 className="text-2xl font-space-grotesk font-bold text-foreground text-center">
          {t('sections.openSource.title')}
        </h4>

        <div className="grid lg:grid-cols-3 gap-6">
          {openSourceConfigs.map((config) => (
            <div
              key={config.key}
              className="bg-card/50 backdrop-blur-sm rounded-xl border border-border/50 p-6 hover:border-primary/30 transition-smooth group"
            >
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="bg-primary/10 rounded-lg p-3 group-hover:bg-primary/20 transition-smooth">
                    <Icon name={config.icon} size={20} className="text-primary" />
                  </div>
                  <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                    <Icon name="Star" size={12} />
                    <span>{t(`sections.openSource.items.${config.key}.stars`)}</span>
                  </div>
                </div>

                <div>
                  <h5 className="font-space-grotesk font-semibold text-foreground mb-2">
                    {t(`sections.openSource.items.${config.key}.project`)}
                  </h5>
                  <p className="text-sm text-muted-foreground mb-3">{t(`sections.openSource.items.${config.key}.description`)}</p>
                  <span className="text-xs text-primary font-mono bg-primary/10 px-2 py-1 rounded">
                    {t(`sections.openSource.items.${config.key}.language`)}
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="bg-gradient-to-br from-primary/10 to-transparent backdrop-blur-sm rounded-2xl border border-primary/20 p-8 text-center">
        <div className="space-y-6">
          <div className="flex items-center justify-center space-x-2">
            <Icon name="Award" size={24} className="text-primary" />
            <h4 className="text-2xl font-space-grotesk font-bold text-foreground">
              {t('sections.communityImpact.title')}
            </h4>
          </div>

          <div className="grid md:grid-cols-3 gap-6">
            <div className="space-y-2">
              <div className="text-3xl font-space-grotesk font-bold text-primary">{t('sections.communityImpact.stats.readers.value')}</div>
              <p className="text-sm text-muted-foreground">{t('sections.communityImpact.stats.readers.label')}</p>
            </div>
            <div className="space-y-2">
              <div className="text-3xl font-space-grotesk font-bold text-primary">{t('sections.communityImpact.stats.stars.value')}</div>
              <p className="text-sm text-muted-foreground">{t('sections.communityImpact.stats.stars.label')}</p>
            </div>
            <div className="space-y-2">
              <div className="text-3xl font-space-grotesk font-bold text-primary">{t('sections.communityImpact.stats.attendees.value')}</div>
              <p className="text-sm text-muted-foreground">{t('sections.communityImpact.stats.attendees.label')}</p>
            </div>
          </div>

          <p className="text-muted-foreground max-w-lg mx-auto">
            {t('sections.communityImpact.description')}
          </p>
        </div>
      </div>
    </div>
  );
};

export default CredentialsShowcase;



================================================
FILE: src/components/sections/about/ExperienceCounter.tsx
================================================
'use client';

import React, { type FC, useEffect, useMemo, useState } from "react";
import { useTranslations } from "next-intl";
import Icon, { type IconName } from "components/AppIcon";

const TARGET_YEARS = 20;
const TARGET_PROJECTS = 150;
const TARGET_CLIENTS = 85;
const TARGET_AWARDS = 12;

type StatSetting = {
  icon: IconName;
  suffix: string;
  labelKey: string;
  descriptionKey: string;
  color: string;
  target: number;
};

const statSettings: StatSetting[] = [
  {
    icon: "Calendar",
    target: TARGET_YEARS,
    suffix: "+",
    labelKey: "years.label",
    descriptionKey: "years.description",
    color: "text-primary",
  },
  {
    icon: "Briefcase",
    target: TARGET_PROJECTS,
    suffix: "+",
    labelKey: "projects.label",
    descriptionKey: "projects.description",
    color: "text-blue-400",
  },
  {
    icon: "Users",
    target: TARGET_CLIENTS,
    suffix: "+",
    labelKey: "clients.label",
    descriptionKey: "clients.description",
    color: "text-green-400",
  },
  {
    icon: "Award",
    target: TARGET_AWARDS,
    suffix: "",
    labelKey: "awards.label",
    descriptionKey: "awards.description",
    color: "text-yellow-400",
  },
];

const ExperienceCounter: FC = () => {
  const t = useTranslations("about.sections.experienceCounter");
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    const durationMs = 2000;
    const steps = 60;
    const stepDuration = durationMs / steps;

    let currentStep = 0;
    const timer = window.setInterval(() => {
      currentStep += 1;
      const nextProgress = Math.min(currentStep / steps, 1);
      setProgress(nextProgress);

      if (nextProgress >= 1) {
        window.clearInterval(timer);
      }
    }, stepDuration);

    return () => window.clearInterval(timer);
  }, []);

  const stats = useMemo(
    () =>
      statSettings.map((setting) => ({
        ...setting,
        label: t(`stats.${setting.labelKey}`),
        description: t(`stats.${setting.descriptionKey}`),
        value: Math.floor(setting.target * progress),
      })),
    [progress, t]
  );

  return (
    <div className="bg-gradient-to-br from-card/50 to-transparent backdrop-blur-sm rounded-2xl border border-border/50 p-8 lg:p-12">
      <div className="text-center mb-12">
        <div className="flex items-center justify-center space-x-3 mb-4">
          <div className="w-12 h-1 bg-primary rounded-full" />
          <span className="text-sm font-mono text-primary uppercase tracking-wider">{t('badge')}</span>
          <div className="w-12 h-1 bg-primary rounded-full" />
        </div>

        <h3 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
          {t('title')}
        </h3>

        <p className="text-muted-foreground max-w-2xl mx-auto">
          {t('description')}
        </p>
      </div>
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8">
        {stats.map((stat) => (
          <div key={stat.label} className="text-center group">
            <div className="relative mb-6">
              <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-transparent rounded-full blur-xl opacity-50 group-hover:opacity-100 transition-smooth" />

              <div className="relative bg-card/80 backdrop-blur-sm rounded-full w-20 h-20 mx-auto flex items-center justify-center border border-border/50 group-hover:border-primary/30 transition-smooth glow-neon">
                <Icon name={stat.icon} size={32} className={stat.color} />
              </div>
            </div>

            <div className="space-y-2">
              <div className="text-4xl lg:text-5xl font-space-grotesk font-bold text-foreground">
                {stat.value}
                <span className={stat.color}>{stat.suffix}</span>
              </div>

              <h4 className="font-space-grotesk font-semibold text-foreground text-lg">
                {stat.label}
              </h4>

              <p className="text-sm text-muted-foreground leading-relaxed">
                {stat.description}
              </p>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-12 pt-8 border-t border-border/30">
        <div className="grid md:grid-cols-3 gap-6 text-center">
          <div className="space-y-2">
            <div className="flex items-center justify-center space-x-2">
              <Icon name="TrendingUp" size={20} className="text-primary" />
              <span className="font-space-grotesk font-semibold text-foreground">{t('highlights.growth.label')}</span>
            </div>
            <p className="text-sm text-muted-foreground">{t('highlights.growth.description')}</p>
          </div>

          <div className="space-y-2">
            <div className="flex items-center justify-center space-x-2">
              <Icon name="Globe" size={20} className="text-primary" />
              <span className="font-space-grotesk font-semibold text-foreground">{t('highlights.global.label')}</span>
            </div>
            <p className="text-sm text-muted-foreground">{t('highlights.global.description')}</p>
          </div>

          <div className="space-y-2">
            <div className="flex items-center justify-center space-x-2">
              <Icon name="Zap" size={20} className="text-primary" />
              <span className="font-space-grotesk font-semibold text-foreground">{t('highlights.pioneer.label')}</span>
            </div>
            <p className="text-sm text-muted-foreground">{t('highlights.pioneer.description')}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExperienceCounter;



================================================
FILE: src/components/sections/about/PersonalIntro.tsx
================================================
import React, { type FC } from "react";
import Image from "components/AppImage";
import Icon, { type IconName } from "components/AppIcon";
import { useTranslations } from 'next-intl';

const PersonalIntro: FC = () => {
  const t = useTranslations('about.sections.intro');
  const tGlobal = useTranslations('global');

  const attributes: Array<{ icon: IconName; label: string; desc: string }> = [
    { icon: "Brain", label: t('attributes.visionary.label'), desc: t('attributes.visionary.desc') },
    { icon: "Code2", label: t('attributes.technical.label'), desc: t('attributes.technical.desc') },
    { icon: "Heart", label: t('attributes.human.label'), desc: t('attributes.human.desc') },
    { icon: "Users", label: t('attributes.collaborative.label'), desc: t('attributes.collaborative.desc') },
  ];
  return (
    <div className="grid lg:grid-cols-2 gap-12 lg:gap-16 items-center">
      <div className="relative order-2 lg:order-1">
        <div className="relative max-w-md mx-auto lg:max-w-none">
          <div className="relative overflow-hidden rounded-2xl bg-gradient-to-br from-primary/10 to-transparent p-1">
            <div className="relative overflow-hidden rounded-xl bg-card">
              <Image
                src="/assets/images/nicky-profile-img.png"
                alt={t('imageAlt')}
                className="w-full h-[400px] lg:h-[500px] object-cover"
              />

              <div className="absolute top-6 right-6 bg-background/90 backdrop-blur-sm rounded-lg p-3 glow-neon">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
                  <span className="text-xs font-mono text-primary">{t('status')}</span>
                </div>
              </div>

              <div className="absolute bottom-6 left-6 bg-background/90 backdrop-blur-sm rounded-lg p-3 glow-neon">
                <div className="flex items-center space-x-2">
                  <Icon name="MapPin" size={16} className="text-primary" />
                  <span className="text-xs font-mono text-foreground">{t('location')}</span>
                </div>
              </div>
            </div>
          </div>

          <div className="absolute -top-4 -left-4 bg-primary/10 backdrop-blur-sm rounded-full p-3 glow-neon animate-bounce">
            <Icon name="Code" size={20} className="text-primary" />
          </div>

          <div
            className="absolute -bottom-4 -right-4 bg-primary/10 backdrop-blur-sm rounded-full p-3 glow-neon animate-bounce"
            style={{ animationDelay: "0.5s" }}
          >
            <Icon name="Palette" size={20} className="text-primary" />
          </div>

          <div
            className="absolute top-1/2 -right-6 bg-primary/10 backdrop-blur-sm rounded-full p-3 glow-neon animate-bounce"
            style={{ animationDelay: "1s" }}
          >
            <Icon name="Zap" size={20} className="text-primary" />
          </div>
        </div>
      </div>

      <div className="order-1 lg:order-2 space-y-8">
        <div className="space-y-6">
          <div className="space-y-4">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-1 bg-primary rounded-full" />
              <span className="text-sm font-mono text-primary uppercase tracking-wider">{t('badge')}</span>
            </div>

            <h2 className="text-4xl lg:text-5xl font-space-grotesk font-bold text-foreground leading-tight">
              {t('title')}
              <span className="block text-primary text-glow">{t('titleHighlight')}</span>
            </h2>
          </div>

          <div className="space-y-4 text-muted-foreground leading-relaxed">
            <p className="text-lg">
              {t('paragraph1')}
            </p>

            <p>
              {t('paragraph2')}
            </p>

            <p>
              {t('paragraph3')}
            </p>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          {attributes.map((attr) => (
            <div
              key={attr.label}
              className="bg-card/50 backdrop-blur-sm rounded-lg p-4 border border-border/50 hover:border-primary/30 transition-smooth group"
            >
              <div className="flex items-start space-x-3">
                <div className="bg-primary/10 rounded-lg p-2 group-hover:bg-primary/20 transition-smooth">
                  <Icon name={attr.icon} size={20} className="text-primary" />
                </div>
                <div>
                  <h4 className="font-space-grotesk font-semibold text-foreground text-sm">{attr.label}</h4>
                  <p className="text-xs text-muted-foreground mt-1">{attr.desc}</p>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="flex items-center space-x-4 pt-4">
          <div className="flex items-center space-x-2 text-sm text-muted-foreground">
            <Icon name="MapPin" size={16} className="text-primary" />
            <span>{t('location')}</span>
          </div>
          <div className="w-1 h-1 bg-border rounded-full" />
          <div className="flex items-center space-x-2 text-sm text-muted-foreground">
            <Icon name="Globe" size={16} className="text-primary" />
            <span>{t('globalImpact')}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PersonalIntro;



================================================
FILE: src/components/sections/contact/ContactForm.tsx
================================================
'use client';

import React, { useState } from 'react';
import { useTranslations, useLocale } from 'next-intl';
import Icon from 'components/AppIcon';
import Button from 'components/ui/Button';
import { Checkbox } from 'components/ui/Checkbox';
import Input from 'components/ui/Input';
import Select from 'components/ui/Select';

const ContactForm = () => {
  const t = useTranslations('contact.sections.form');
  const locale = useLocale(); // Get current language (en/fr)
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    company: '',
    projectType: '',
    budget: '',
    timeline: '',
    message: '',
    newsletter: false,
    terms: false
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});

  const projectTypeOptions = [
    { value: 'web-development', label: t('fields.projectType.options.web') },
    { value: 'ai-integration', label: t('fields.projectType.options.ai') },
    { value: 'design-consultation', label: t('fields.projectType.options.design') },
    { value: 'automation', label: t('fields.projectType.options.automation') },
    { value: 'full-stack', label: t('fields.projectType.options.fullstack') },
    { value: 'other', label: t('fields.projectType.options.other') }
  ];

  const budgetOptions = [
    { value: '5k-15k', label: t('fields.budget.options.5k-15k') },
    { value: '15k-30k', label: t('fields.budget.options.15k-30k') },
    { value: '30k-50k', label: t('fields.budget.options.30k-50k') },
    { value: '50k+', label: t('fields.budget.options.50k+') },
    { value: 'discuss', label: t('fields.budget.options.discuss') }
  ];

  const timelineOptions = [
    { value: 'asap', label: t('fields.timeline.options.asap') },
    { value: '1-2-months', label: t('fields.timeline.options.1-2months') },
    { value: '3-6-months', label: t('fields.timeline.options.3-6months') },
    { value: '6-months+', label: t('fields.timeline.options.6months+') },
    { value: 'flexible', label: t('fields.timeline.options.flexible') }
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    // Clear validation error when user starts typing
    if (validationErrors[field]) {
      setValidationErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  const validateForm = () => {
    const errors: Record<string, string> = {};

    // Name validation
    if (!formData.name.trim()) {
      errors.name = t('validation.nameRequired');
    }

    // Email validation
    if (!formData.email.trim()) {
      errors.email = t('validation.emailRequired');
    } else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(formData.email)) {
      errors.email = t('validation.emailInvalid');
    }

    // Project type validation
    if (!formData.projectType) {
      errors.projectType = t('validation.projectTypeRequired');
    }

    // Message validation
    if (!formData.message.trim()) {
      errors.message = t('validation.messageRequired');
    }

    // Terms validation
    if (!formData.terms) {
      errors.terms = t('validation.termsRequired');
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e) => {
    e?.preventDefault();

    // Validate form before submitting
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus(null);

    try {
      const response = await fetch('https://n8n.nickyhome.casa/webhook/contact-form', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          formType: 'contact', // Distinguish from project brief
          name: formData.name,
          email: formData.email,
          company: formData.company,
          projectType: formData.projectType,
          budget: formData.budget,
          timeline: formData.timeline,
          message: formData.message,
          newsletter: formData.newsletter,
          terms: formData.terms,
          language: locale // User's selected language (en/fr)
        }),
      });

      // Check if response is OK and has JSON content
      if (!response.ok) {
        console.error('Server error:', response.status, response.statusText);
        setSubmitStatus('error');
        return;
      }

      // Check if response is JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        console.error('Invalid response type:', contentType);
        setSubmitStatus('error');
        return;
      }

      const result = await response.json();

      if (result.success) {
        setSubmitStatus('success');
        // Clear form on success
        setFormData({
          name: '',
          email: '',
          company: '',
          projectType: '',
          budget: '',
          timeline: '',
          message: '',
          newsletter: false,
          terms: false
        });
      } else {
        console.error('Submission failed:', result.message, result.errors);
        setSubmitStatus('error');
      }
    } catch (error) {
      console.error('Network error:', error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="bg-card border border-border rounded-xl p-8 glow-neon hover:glow-neon-active transition-smooth">
      <div className="mb-8">
        <div className="flex items-center space-x-3 mb-4">
          <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
            <Icon name="MessageCircle" size={24} className="text-primary" />
          </div>
          <div>
            <h3 className="text-2xl font-space-grotesk font-bold text-foreground">
              {t('title')}
            </h3>
            <p className="text-sm text-muted-foreground mt-1">
              {t('description')}
            </p>
          </div>
        </div>
      </div>
      <form onSubmit={handleSubmit} className="space-y-6" noValidate>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <Input
              label={t('fields.name.label')}
              type="text"
              placeholder={t('fields.name.placeholder')}
              value={formData?.name}
              onChange={(e) => handleInputChange('name', e?.target?.value)}
            />
            {validationErrors.name && (
              <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
                <Icon name="AlertCircle" size={14} />
                <span>{validationErrors.name}</span>
              </p>
            )}
          </div>
          <div>
            <Input
              label={t('fields.email.label')}
              type="email"
              placeholder={t('fields.email.placeholder')}
              value={formData?.email}
              onChange={(e) => handleInputChange('email', e?.target?.value)}
            />
            {validationErrors.email && (
              <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
                <Icon name="AlertCircle" size={14} />
                <span>{validationErrors.email}</span>
              </p>
            )}
          </div>
        </div>

        <Input
          label={t('fields.company.label')}
          type="text"
          placeholder={t('fields.company.placeholder')}
          value={formData?.company}
          onChange={(e) => handleInputChange('company', e?.target?.value)}
        />

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <Select
              label={t('fields.projectType.label')}
              placeholder={t('fields.projectType.placeholder')}
              options={projectTypeOptions}
              value={formData?.projectType}
              onChange={(value) => handleInputChange('projectType', value)}
            />
            {validationErrors.projectType && (
              <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
                <Icon name="AlertCircle" size={14} />
                <span>{validationErrors.projectType}</span>
              </p>
            )}
          </div>
          <Select
            label={t('fields.budget.label')}
            placeholder={t('fields.budget.placeholder')}
            options={budgetOptions}
            value={formData?.budget}
            onChange={(value) => handleInputChange('budget', value)}
          />
          <Select
            label={t('fields.timeline.label')}
            placeholder={t('fields.timeline.placeholder')}
            options={timelineOptions}
            value={formData?.timeline}
            onChange={(value) => handleInputChange('timeline', value)}
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-foreground mb-2">
            {t('fields.message.label')}
          </label>
          <textarea
            className="w-full h-32 px-4 py-3 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent resize-none transition-smooth"
            placeholder={t('fields.message.placeholder')}
            value={formData?.message}
            onChange={(e) => handleInputChange('message', e?.target?.value)}
          />
          {validationErrors.message && (
            <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
              <Icon name="AlertCircle" size={14} />
              <span>{validationErrors.message}</span>
            </p>
          )}
        </div>

        <div className="space-y-4">
          <Checkbox
            label={t('newsletter.title')}
            description={t('newsletter.description')}
            checked={formData?.newsletter}
            onChange={(e) => handleInputChange('newsletter', e?.target?.checked)}
          />
          <div>
            <Checkbox
              label={t('terms.label')}
              description={t('terms.description')}
              checked={formData?.terms}
              onChange={(e) => handleInputChange('terms', e?.target?.checked)}
            />
            {validationErrors.terms && (
              <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
                <Icon name="AlertCircle" size={14} />
                <span>{validationErrors.terms}</span>
              </p>
            )}
          </div>
        </div>

        {submitStatus === 'success' && (
          <div className="p-4 bg-success/10 border border-success/20 rounded-lg">
            <div className="flex items-center space-x-3">
              <Icon name="CheckCircle" size={20} className="text-success" />
              <div>
                <p className="text-success font-medium">{t('success')}</p>
                <p className="text-success/80 text-sm">I'll get back to you within 24 hours.</p>
              </div>
            </div>
          </div>
        )}

        {submitStatus === 'error' && (
          <div className="p-4 bg-error/10 border border-error/20 rounded-lg">
            <div className="flex items-center space-x-3">
              <Icon name="AlertCircle" size={20} className="text-error" />
              <div>
                <p className="text-error font-medium">{t('error')}</p>
                <p className="text-error/80 text-sm">Please try again or contact me directly.</p>
              </div>
            </div>
          </div>
        )}

        <Button
          type="submit"
          variant="default"
          size="lg"
          fullWidth
          loading={isSubmitting}
          iconName="Send"
          iconPosition="right"
          className="glow-neon hover:glow-neon-active"
        >
          {isSubmitting ? 'Sending Message...' : t('submit')}
        </Button>
      </form>
      <div className="mt-6 pt-6 border-t border-border">
        <p className="text-xs text-muted-foreground text-center">
          {t('responseTime')}
        </p>
      </div>
    </div>
  );
};

export default ContactForm;



================================================
FILE: src/components/sections/contact/ContactInfo.tsx
================================================
import React from 'react';
import Icon from 'components/AppIcon';
import Button from 'components/ui/Button';
import { useTranslations } from 'next-intl';

const ContactInfo = () => {
  const t = useTranslations('contact.sections.info');
  const tSocial = useTranslations('contact.sections.social');
  const tQuickActions = useTranslations('contact.sections.quickActions');

  const contactMethods = [
    {
      icon: 'Mail',
      label: t('items.email.label'),
      value: t('items.email.value'),
      description: t('items.email.description'),
      action: 'mailto:hello@nickybruno.ca'
    },
    {
      icon: 'Phone',
      label: t('items.phone.label'),
      value: t('items.phone.value'),
      description: t('items.phone.description'),
      action: 'tel:+15145550123'
    },
    {
      icon: 'MapPin',
      label: t('items.location.label'),
      value: t('items.location.value'),
      description: t('items.location.description'),
      action: null
    },
    {
      icon: 'Clock',
      label: t('items.response.label'),
      value: t('items.response.value'),
      description: t('items.response.description'),
      action: null
    }
  ];

  const socialLinks = [
    {
      icon: 'Linkedin',
      label: tSocial('items.linkedin.name'),
      url: 'https://linkedin.com/in/nickybruno',
      description: tSocial('items.linkedin.description')
    },
    {
      icon: 'Github',
      label: tSocial('items.github.name'),
      url: 'https://github.com/nickybruno',
      description: tSocial('items.github.description')
    },
    {
      icon: 'Twitter',
      label: tSocial('items.twitter.name'),
      url: 'https://twitter.com/nickybruno',
      description: tSocial('items.twitter.description')
    },
    {
      icon: 'Instagram',
      label: tSocial('items.instagram.name'),
      url: 'https://instagram.com/nickybruno.tech',
      description: tSocial('items.instagram.description')
    }
  ];

  return (
    <div className="space-y-8">
      {/* Contact Methods */}
      <div className="bg-card border border-border rounded-xl p-8">
        <h3 className="text-2xl font-space-grotesk font-bold text-foreground mb-6">
          {t('title')}
        </h3>
        <div className="space-y-6">
          {contactMethods?.map((method, index) => (
            <div key={index} className="group">
              {method?.action ? (
                <a
                  href={method?.action}
                  className="flex items-start space-x-4 p-4 rounded-lg hover:bg-muted/50 transition-smooth"
                >
                  <div className="flex-shrink-0 w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center group-hover:bg-primary/20 transition-smooth">
                    <Icon name={method?.icon} size={20} className="text-primary" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-foreground group-hover:text-primary transition-smooth">
                      {method?.label}
                    </h4>
                    <p className="text-foreground font-mono text-sm mt-1">
                      {method?.value}
                    </p>
                    <p className="text-muted-foreground text-sm mt-1">
                      {method?.description}
                    </p>
                  </div>
                  <Icon name="ExternalLink" size={16} className="text-muted-foreground group-hover:text-primary transition-smooth" />
                </a>
              ) : (
                <div className="flex items-start space-x-4 p-4">
                  <div className="flex-shrink-0 w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                    <Icon name={method?.icon} size={20} className="text-primary" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-foreground">
                      {method?.label}
                    </h4>
                    <p className="text-foreground font-mono text-sm mt-1">
                      {method?.value}
                    </p>
                    <p className="text-muted-foreground text-sm mt-1">
                      {method?.description}
                    </p>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
      {/* Social Links */}
      <div className="bg-card border border-border rounded-xl p-8">
        <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-6">
          {tSocial('title')}
        </h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {socialLinks?.map((social, index) => (
            <a
              key={index}
              href={social?.url}
              target="_blank"
              rel="noopener noreferrer"
              className="group flex items-center space-x-3 p-4 border border-border rounded-lg hover:border-primary/50 hover:bg-primary/5 transition-smooth"
            >
              <div className="flex-shrink-0 w-10 h-10 bg-muted rounded-lg flex items-center justify-center group-hover:bg-primary/20 transition-smooth">
                <Icon name={social?.icon} size={18} className="text-muted-foreground group-hover:text-primary transition-smooth" />
              </div>
              <div className="flex-1">
                <h4 className="font-medium text-foreground group-hover:text-primary transition-smooth">
                  {social?.label}
                </h4>
                <p className="text-muted-foreground text-sm">
                  {social?.description}
                </p>
              </div>
              <Icon name="ExternalLink" size={14} className="text-muted-foreground group-hover:text-primary transition-smooth" />
            </a>
          ))}
        </div>
      </div>
      {/* Quick Actions */}
      <div className="bg-card border border-border rounded-xl p-8">
        <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-6">
          {tQuickActions('title')}
        </h3>
        <div className="space-y-4">
          <Button
            variant="outline"
            fullWidth
            iconName="Calendar"
            iconPosition="left"
            className="justify-start"
          >
            {tQuickActions('items.0')}
          </Button>
          <Button
            variant="outline"
            fullWidth
            iconName="Download"
            iconPosition="left"
            className="justify-start"
          >
            {tQuickActions('items.1')}
          </Button>
          <Button
            variant="outline"
            fullWidth
            iconName="FileText"
            iconPosition="left"
            className="justify-start"
          >
            {tQuickActions('items.2')}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ContactInfo;



================================================
FILE: src/components/sections/contact/ContactSection.tsx
================================================
'use client';

import { useEffect } from 'react';
import { motion, type Variants } from 'framer-motion';
import { useLocale, useTranslations } from 'next-intl';
import Header from 'components/ui/Header';
import Icon from 'components/AppIcon';
import Button from 'components/ui/Button';
import ContactForm from './ContactForm';
import ContactInfo from './ContactInfo';
import FAQSection from './FAQSection';
import LocationMap from './LocationMap';
import ProjectBrief from './ProjectBrief';

const MotionDiv = (props: any) => <motion.div {...props} />;

const ContactSection = () => {
  const locale = useLocale();
  const t = useTranslations('contact');
  const tGlobal = useTranslations('global');

  const containerVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.6,
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6 }
    }
  };

  const floatingVariants: Variants = {
    animate: {
      y: [-10, 10, -10],
      transition: {
        duration: 6,
        repeat: Infinity,
        ease: "easeInOut"
      }
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <section className="relative pt-24 pb-16 overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10" />

        {/* Floating Elements */}
        <MotionDiv
          variants={floatingVariants}
          animate="animate"
          className="absolute top-32 left-10 w-20 h-20 bg-primary/10 rounded-full blur-xl"
        />
        <MotionDiv
          variants={floatingVariants}
          animate="animate"
          style={{ animationDelay: '2s' }}
          className="absolute top-48 right-16 w-32 h-32 bg-primary/5 rounded-full blur-2xl"
        />
        <MotionDiv
          variants={floatingVariants}
          animate="animate"
          style={{ animationDelay: '4s' }}
          className="absolute bottom-32 left-1/4 w-24 h-24 bg-primary/8 rounded-full blur-xl"
        />

        <div className="relative max-w-7xl mx-auto px-6 lg:px-8">
          <MotionDiv
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center mb-16"
          >
            <div className="inline-flex items-center space-x-2 bg-primary/10 border border-primary/20 rounded-full px-4 py-2 mb-6">
              <Icon name="Zap" size={16} className="text-primary" />
              <span className="text-primary font-medium text-sm">
                {t('sections.hero.badge')}
              </span>
            </div>

            <h1 className="text-4xl md:text-6xl lg:text-7xl font-space-grotesk font-bold text-foreground mb-6">
              {t('sections.hero.title')}
              <span className="block text-primary glow-neon">
                {t('sections.hero.titleHighlight')}
              </span>
            </h1>

            <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
              {t('sections.hero.description')}
            </p>
          </MotionDiv>

          {/* Quick Contact Stats */}
          <MotionDiv
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16"
          >
            <div className="text-center">
              <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4 glow-neon">
                <Icon name="Clock" size={24} className="text-primary" />
              </div>
              <h3 className="font-space-grotesk font-bold text-foreground mb-2">
                {t('sections.hero.stats.response.title')}
              </h3>
              <p className="text-muted-foreground text-sm">
                {t('sections.hero.stats.response.description')}
              </p>
            </div>

            <div className="text-center">
              <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4 glow-neon">
                <Icon name="Globe" size={24} className="text-primary" />
              </div>
              <h3 className="font-space-grotesk font-bold text-foreground mb-2">
                {t('sections.hero.stats.global.title')}
              </h3>
              <p className="text-muted-foreground text-sm">
                {t('sections.hero.stats.global.description')}
              </p>
            </div>

            <div className="text-center">
              <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4 glow-neon">
                <Icon name="Shield" size={24} className="text-primary" />
              </div>
              <h3 className="font-space-grotesk font-bold text-foreground mb-2">
                {t('sections.hero.stats.confidential.title')}
              </h3>
              <p className="text-muted-foreground text-sm">
                {t('sections.hero.stats.confidential.description')}
              </p>
            </div>
          </MotionDiv>
        </div>
      </section>
      {/* Main Content */}
      <section className="py-16">
        <div className="max-w-7xl mx-auto px-6 lg:px-8">
          <MotionDiv
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="space-y-16"
          >
            {/* Contact Form & Info Grid */}
            <MotionDiv variants={itemVariants} className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2">
                <ContactForm />
              </div>
              <div className="lg:col-span-1">
                <ContactInfo />
              </div>
            </MotionDiv>

            {/* Visual Divider */}
            <MotionDiv variants={itemVariants} className="relative py-8">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-border"></div>
              </div>
              <div className="relative flex justify-center">
                <span className="bg-background px-6 text-sm text-muted-foreground uppercase tracking-wider font-medium">
                  or
                </span>
              </div>
            </MotionDiv>

            {/* Project Brief Questionnaire */}
            <MotionDiv variants={itemVariants}>
              <ProjectBrief />
            </MotionDiv>

            {/* Location & FAQ Grid */}
            <MotionDiv variants={itemVariants} className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <LocationMap />
              <FAQSection />
            </MotionDiv>

            {/* Call to Action */}
            <MotionDiv
              variants={itemVariants}
              className="bg-gradient-to-r from-primary/10 via-primary/5 to-primary/10 border border-primary/20 rounded-2xl p-12 text-center"
            >
              <div className="max-w-3xl mx-auto">
                <h2 className="text-3xl md:text-4xl font-space-grotesk font-bold text-foreground mb-6">
                  {t('sections.cta.title')}
                </h2>
                <p className="text-lg text-muted-foreground mb-8">
                  {t('sections.cta.description')}
                </p>

                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <Button
                    variant="default"
                    size="lg"
                    iconName="MessageCircle"
                    iconPosition="left"
                    className="glow-neon hover:glow-neon-active"
                  >
                    {t('sections.cta.buttons.startConversation')}
                  </Button>
                  <Button
                    variant="outline"
                    size="lg"
                    iconName="Calendar"
                    iconPosition="left"
                  >
                    {t('sections.cta.buttons.scheduleConsultation')}
                  </Button>
                </div>

                <div className="mt-8 pt-8 border-t border-primary/20">
                  <p className="text-sm text-muted-foreground">
                    {t('sections.cta.location')}
                  </p>
                </div>
              </div>
            </MotionDiv>
          </MotionDiv>
        </div>
      </section>
    </div>
  );
};

export default ContactSection;



================================================
FILE: src/components/sections/contact/FAQSection.tsx
================================================
'use client';

import React, { useState } from 'react';
import Icon from 'components/AppIcon';
import { useTranslations } from 'next-intl';

const FAQSection = () => {
  const t = useTranslations('contact.sections.faq');
  const [openFAQ, setOpenFAQ] = useState(0);

  const faqs = [
    {
      question: t('items.timeline.question'),
      answer: t('items.timeline.answer')
    },
    {
      question: t('items.international.question'),
      answer: t('items.international.answer')
    },
    {
      question: t('items.aiServices.question'),
      answer: t('items.aiServices.answer')
    },
    {
      question: t('items.revisions.question'),
      answer: t('items.revisions.answer')
    },
    {
      question: t('items.payment.question'),
      answer: t('items.payment.answer')
    },
    {
      question: t('items.support.question'),
      answer: t('items.support.answer')
    }
  ];

  const toggleFAQ = (index) => {
    setOpenFAQ(openFAQ === index ? -1 : index);
  };

  return (
    <div className="bg-card border border-border rounded-xl p-8">
      <div className="mb-8">
        <h3 className="text-2xl font-space-grotesk font-bold text-foreground mb-3">
          {t('title')}
        </h3>
        <p className="text-muted-foreground">
          {t('subtitle')}
        </p>
      </div>
      <div className="space-y-4">
        {faqs?.map((faq, index) => (
          <div
            key={index}
            className="border border-border rounded-lg overflow-hidden transition-smooth hover:border-primary/50"
          >
            <button
              onClick={() => toggleFAQ(index)}
              className="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-muted/50 transition-smooth"
            >
              <h4 className="font-medium text-foreground pr-4">
                {faq?.question}
              </h4>
              <Icon
                name={openFAQ === index ? "ChevronUp" : "ChevronDown"}
                size={20}
                className={`text-muted-foreground transition-smooth ${openFAQ === index ? 'text-primary' : ''
                  }`}
              />
            </button>

            {openFAQ === index && (
              <div className="px-6 pb-4">
                <div className="pt-2 border-t border-border">
                  <p className="text-muted-foreground whitespace-pre-line leading-relaxed">
                    {faq?.answer}
                  </p>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
      <div className="mt-8 pt-6 border-t border-border">
        <div className="text-center">
          <p className="text-muted-foreground mb-4">
            {t('cta.title')}
          </p>
          <a
            href="mailto:hello@nickybruno.ca?subject=Question about your services"
            className="inline-flex items-center space-x-2 text-primary hover:text-primary/80 transition-smooth"
          >
            <Icon name="Mail" size={16} />
            <span className="font-medium">{t('cta.button')}</span>
          </a>
        </div>
      </div>
    </div>
  );
};

export default FAQSection;



================================================
FILE: src/components/sections/contact/LocationMap.tsx
================================================
import React from 'react';
import Icon from 'components/AppIcon';
import { useTranslations } from 'next-intl';

const LocationMap = () => {
  const t = useTranslations('contact.sections.location');
  // Montreal coordinates
  const lat = 45.5017;
  const lng = -73.5673;

  const locationDetails = [
    {
      icon: 'MapPin',
      label: t('details.address.label'),
      value: t('details.address.value')
    },
    {
      icon: 'Clock',
      label: t('details.timezone.label'),
      value: t('details.timezone.value')
    },
    {
      icon: 'Globe',
      label: t('details.serviceArea.label'),
      value: t('details.serviceArea.value')
    },
    {
      icon: 'Plane',
      label: t('details.travel.label'),
      value: t('details.travel.value')
    }
  ];

  return (
    <div className="bg-card border border-border rounded-xl overflow-hidden">
      <div className="p-8 pb-6">
        <h3 className="text-2xl font-space-grotesk font-bold text-foreground mb-3">
          {t('title')}
        </h3>
        <p className="text-muted-foreground mb-6">
          {t('description')}
        </p>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {locationDetails?.map((detail, index) => (
            <div key={index} className="flex items-center space-x-3">
              <div className="flex-shrink-0 w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
                <Icon name={detail?.icon} size={18} className="text-primary" />
              </div>
              <div>
                <p className="text-sm font-medium text-foreground">
                  {detail?.label}
                </p>
                <p className="text-sm text-muted-foreground">
                  {detail?.value}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
      <div className="h-64 bg-muted relative overflow-hidden">
        <iframe
          width="100%"
          height="100%"
          loading="lazy"
          title="Montreal, Quebec, Canada"
          referrerPolicy="no-referrer-when-downgrade"
          src={`https://www.google.com/maps?q=${lat},${lng}&z=12&output=embed`}
          className="border-0"
        />

        {/* Overlay with contact info */}
        <div className="absolute bottom-4 left-4 right-4">
          <div className="bg-background/95 backdrop-blur-sm border border-border rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <h4 className="font-medium text-foreground text-sm">
                  {t('studio.name')}
                </h4>
                <p className="text-xs text-muted-foreground">
                  {t('studio.tagline')}
                </p>
              </div>
              <div className="flex items-center space-x-2">
                <Icon name="MapPin" size={16} className="text-primary" />
                <span className="text-xs text-primary font-medium">
                  {t('studio.location')}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LocationMap;



================================================
FILE: src/components/sections/contact/ProjectBrief.tsx
================================================
'use client';

import React, { useState } from 'react';
import Icon from 'components/AppIcon';
import Button from 'components/ui/Button';
import { Checkbox } from 'components/ui/Checkbox';
import Input from 'components/ui/Input';
import Select from 'components/ui/Select';
import { useTranslations, useLocale } from 'next-intl';

const ProjectBrief = () => {
  const t = useTranslations('contact.sections.projectBrief');
  const locale = useLocale(); // Get current language (en/fr)
  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [briefData, setBriefData] = useState({
    // Contact Info
    name: '',
    email: '',
    phone: '',
    company: '',
    // Project Details
    projectGoal: '',
    targetAudience: '',
    keyFeatures: [],
    designPreference: '',
    techRequirements: [],
    timeline: '',
    budget: '',
    inspiration: '',
    challenges: ''
  });

  const totalSteps = 4;

  const designPreferenceOptions = [
    { value: 'modern-minimal', label: 'Modern & Minimal' },
    { value: 'bold-creative', label: 'Bold & Creative' },
    { value: 'corporate-professional', label: 'Corporate & Professional' },
    { value: 'artistic-experimental', label: 'Artistic & Experimental' },
    { value: 'not-sure', label: 'Not Sure Yet' }
  ];

  const featureOptions = [
    { value: 'responsive-design', label: 'Responsive Design' },
    { value: 'cms-integration', label: 'Content Management' },
    { value: 'e-commerce', label: 'E-commerce Functionality' },
    { value: 'user-authentication', label: 'User Authentication' },
    { value: 'api-integration', label: 'API Integration' },
    { value: 'analytics', label: 'Analytics & Tracking' },
    { value: 'seo-optimization', label: 'SEO Optimization' },
    { value: 'ai-features', label: 'AI-Powered Features' }
  ];

  const techOptions = [
    { value: 'react', label: 'React/Next.js' },
    { value: 'wordpress', label: 'WordPress' },
    { value: 'shopify', label: 'Shopify' },
    { value: 'custom-backend', label: 'Custom Backend' },
    { value: 'headless-cms', label: 'Headless CMS' },
    { value: 'ai-integration', label: 'AI Integration' },
    { value: 'no-preference', label: 'No Preference' }
  ];

  const handleInputChange = (field, value) => {
    setBriefData(prev => ({
      ...prev,
      [field]: value
    }));
    // Clear validation error when user starts typing
    if (validationErrors[field]) {
      setValidationErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  const handleArrayChange = (field, value, checked) => {
    setBriefData(prev => ({
      ...prev,
      [field]: checked
        ? [...prev?.[field], value]
        : prev?.[field]?.filter(item => item !== value)
    }));
  };

  const validateCurrentStep = () => {
    const errors: Record<string, string> = {};

    switch (currentStep) {
      case 1:
        // Step 1: Contact info & project overview validation
        if (!briefData.name.trim()) {
          errors.name = t('validation.nameRequired');
        }
        if (!briefData.email.trim()) {
          errors.email = t('validation.emailRequired');
        } else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(briefData.email)) {
          errors.email = t('validation.emailInvalid');
        }
        if (!briefData.projectGoal.trim()) {
          errors.projectGoal = t('validation.projectGoalRequired');
        }
        if (!briefData.targetAudience.trim()) {
          errors.targetAudience = t('validation.targetAudienceRequired');
        }
        break;

      case 2:
        // Step 2: Key features - optional, no validation needed
        break;

      case 3:
        // Step 3: Design & Tech - optional, no validation needed
        break;

      case 4:
        // Step 4: Timeline, budget & challenges - optional, no validation needed
        break;
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const nextStep = () => {
    // Validate current step before proceeding
    if (!validateCurrentStep()) {
      return;
    }

    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
      // Clear errors when moving to next step
      setValidationErrors({});
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      // Clear errors when going back
      setValidationErrors({});
    }
  };

  const validateForm = () => {
    const errors: Record<string, string> = {};

    // Name validation
    if (!briefData.name.trim()) {
      errors.name = t('validation.nameRequired');
    }

    // Email validation
    if (!briefData.email.trim()) {
      errors.email = t('validation.emailRequired');
    } else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(briefData.email)) {
      errors.email = t('validation.emailInvalid');
    }

    // Project goal validation
    if (!briefData.projectGoal.trim()) {
      errors.projectGoal = t('validation.projectGoalRequired');
    }

    // Target audience validation
    if (!briefData.targetAudience.trim()) {
      errors.targetAudience = t('validation.targetAudienceRequired');
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const generateBrief = async () => {
    // Validate form before submitting
    if (!validateForm()) {
      // Scroll to first error (step 1 has contact info)
      setCurrentStep(1);
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus(null);

    try {
      const response = await fetch('https://n8n.nickyhome.casa/webhook/contact-form', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          formType: 'projectBrief', // Distinguish from contact form
          // Contact Info
          name: briefData.name,
          email: briefData.email,
          phone: briefData.phone,
          company: briefData.company,
          // Project Details
          projectGoal: briefData.projectGoal,
          targetAudience: briefData.targetAudience,
          keyFeatures: briefData.keyFeatures,
          designPreference: briefData.designPreference,
          techRequirements: briefData.techRequirements,
          timeline: briefData.timeline,
          budget: briefData.budget,
          inspiration: briefData.inspiration,
          challenges: briefData.challenges,
          language: locale // User's selected language (en/fr)
        }),
      });

      // Check if response is OK and has JSON content
      if (!response.ok) {
        console.error('Server error:', response.status, response.statusText);
        setSubmitStatus('error');
        return;
      }

      // Check if response is JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        console.error('Invalid response type:', contentType);
        setSubmitStatus('error');
        return;
      }

      const result = await response.json();

      if (result.success) {
        setSubmitStatus('success');
        // Reset form to step 1 and clear data
        setCurrentStep(1);
        setValidationErrors({});
        setBriefData({
          name: '',
          email: '',
          phone: '',
          company: '',
          projectGoal: '',
          targetAudience: '',
          keyFeatures: [],
          designPreference: '',
          techRequirements: [],
          timeline: '',
          budget: '',
          inspiration: '',
          challenges: ''
        });
      } else {
        console.error('Submission failed:', result.message, result.errors);
        setSubmitStatus('error');
      }
    } catch (error) {
      console.error('Network error:', error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-2">
                {t('stepTitle.1')}
              </h3>
              <p className="text-muted-foreground">
                {t('stepDescription.1')}
              </p>
              <div className="mt-3 inline-flex items-center space-x-2 text-sm text-primary/80">
                <Icon name="Info" size={16} />
                <span>{locale === 'fr' ? 'Les champs marqués * sont requis pour continuer' : 'Fields marked with * are required to continue'}</span>
              </div>
            </div>

            {/* Contact Information */}
            <div className="bg-primary/5 border border-primary/20 rounded-lg p-6 space-y-4">
              <h4 className="font-medium text-foreground flex items-center space-x-2 mb-4">
                <Icon name="User" size={18} className="text-primary" />
                <span>{t('contactInfo.title')}</span>
              </h4>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Input
                    label={t('contactInfo.fields.name.label')}
                    type="text"
                    placeholder={t('contactInfo.fields.name.placeholder')}
                    value={briefData?.name}
                    onChange={(e) => handleInputChange('name', e?.target?.value)}
                  />
                  {validationErrors.name && (
                    <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
                      <Icon name="AlertCircle" size={14} />
                      <span>{validationErrors.name}</span>
                    </p>
                  )}
                </div>
                <div>
                  <Input
                    label={t('contactInfo.fields.email.label')}
                    type="email"
                    placeholder={t('contactInfo.fields.email.placeholder')}
                    value={briefData?.email}
                    onChange={(e) => handleInputChange('email', e?.target?.value)}
                  />
                  {validationErrors.email && (
                    <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
                      <Icon name="AlertCircle" size={14} />
                      <span>{validationErrors.email}</span>
                    </p>
                  )}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Input
                  label={t('contactInfo.fields.phone.label')}
                  type="tel"
                  placeholder={t('contactInfo.fields.phone.placeholder')}
                  value={briefData?.phone}
                  onChange={(e) => handleInputChange('phone', e?.target?.value)}
                />
                <Input
                  label={t('contactInfo.fields.company.label')}
                  type="text"
                  placeholder={t('contactInfo.fields.company.placeholder')}
                  value={briefData?.company}
                  onChange={(e) => handleInputChange('company', e?.target?.value)}
                />
              </div>
            </div>

            {/* Project Overview */}
            <div className="space-y-4 pt-4">
              <h4 className="font-medium text-foreground flex items-center space-x-2">
                <Icon name="Target" size={18} className="text-primary" />
                <span>Project Overview</span>
              </h4>

              <div>
                <Input
                  label={t('fields.goal.label')}
                  type="text"
                  placeholder={t('fields.goal.placeholder')}
                  value={briefData?.projectGoal}
                  onChange={(e) => handleInputChange('projectGoal', e?.target?.value)}
                />
                {validationErrors.projectGoal && (
                  <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
                    <Icon name="AlertCircle" size={14} />
                    <span>{validationErrors.projectGoal}</span>
                  </p>
                )}
              </div>
              <div>
                <Input
                  label={t('fields.audience.label')}
                  type="text"
                  placeholder={t('fields.audience.placeholder')}
                  value={briefData?.targetAudience}
                  onChange={(e) => handleInputChange('targetAudience', e?.target?.value)}
                />
                {validationErrors.targetAudience && (
                  <p className="mt-1 text-sm text-red-500 flex items-center space-x-1">
                    <Icon name="AlertCircle" size={14} />
                    <span>{validationErrors.targetAudience}</span>
                  </p>
                )}
              </div>
              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  {t('fields.inspiration.label')}
                </label>
                <textarea
                  className="w-full h-24 px-4 py-3 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent resize-none transition-smooth"
                  placeholder={t('fields.inspiration.placeholder')}
                  value={briefData?.inspiration}
                  onChange={(e) => handleInputChange('inspiration', e?.target?.value)}
                />
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-2">
                Features & Functionality
              </h3>
              <p className="text-muted-foreground">
                What features do you need for your project?
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-4">
                Key Features (select all that apply)
              </label>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {featureOptions?.map((feature) => (
                  <Checkbox
                    key={feature?.value}
                    label={feature?.label}
                    checked={briefData?.keyFeatures?.includes(feature?.value)}
                    onChange={(e) => handleArrayChange('keyFeatures', feature?.value, e?.target?.checked)}
                  />
                ))}
              </div>
            </div>
            <Select
              label="Design Preference"
              placeholder="Choose a style"
              options={designPreferenceOptions}
              value={briefData?.designPreference}
              onChange={(value) => handleInputChange('designPreference', value)}
            />
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-2">
                Technical Requirements
              </h3>
              <p className="text-muted-foreground">
                Any specific technical preferences or requirements?
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-4">
                Technology Preferences (select all that apply)
              </label>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {techOptions?.map((tech) => (
                  <Checkbox
                    key={tech?.value}
                    label={tech?.label}
                    checked={briefData?.techRequirements?.includes(tech?.value)}
                    onChange={(e) => handleArrayChange('techRequirements', tech?.value, e?.target?.checked)}
                  />
                ))}
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Specific challenges or concerns?
              </label>
              <textarea
                className="w-full h-24 px-4 py-3 bg-input border border-border rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent resize-none transition-smooth"
                placeholder="Any technical challenges, integrations, or specific requirements..."
                value={briefData?.challenges}
                onChange={(e) => handleInputChange('challenges', e?.target?.value)}
              />
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-2">
                Timeline & Budget
              </h3>
              <p className="text-muted-foreground">
                When do you need this completed and what's your budget range?
              </p>
            </div>
            <Input
              label="Desired Timeline"
              type="text"
              placeholder="e.g., 2 months, by end of year, flexible..."
              value={briefData?.timeline}
              onChange={(e) => handleInputChange('timeline', e?.target?.value)}
            />
            <Input
              label="Budget Range"
              type="text"
              placeholder="e.g., $10K-20K CAD, flexible, let's discuss..."
              value={briefData?.budget}
              onChange={(e) => handleInputChange('budget', e?.target?.value)}
            />
            <div className="bg-primary/5 border border-primary/20 rounded-lg p-6">
              <div className="flex items-start space-x-3">
                <Icon name="Lightbulb" size={20} className="text-primary mt-1" />
                <div>
                  <h4 className="font-medium text-foreground mb-2">
                    What happens next?
                  </h4>
                  <ul className="text-sm text-muted-foreground space-y-1">
                    <li>• I'll review your brief and prepare a custom proposal</li>
                    <li>• We'll schedule a consultation call to discuss details</li>
                    <li>• You'll receive a detailed project timeline and quote</li>
                    <li>• We can start as soon as you're ready!</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="bg-card border border-border rounded-xl p-8">
      {/* Header with Description */}
      <div className="mb-8">
        <div className="flex items-center space-x-3 mb-4">
          <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
            <Icon name="FileText" size={24} className="text-primary" />
          </div>
          <div className="flex-1">
            <h2 className="text-2xl font-space-grotesk font-bold text-foreground">
              {t('title')}
            </h2>
            <p className="text-sm text-muted-foreground mt-1">
              {t('subtitle')}
            </p>
          </div>
          <div className="text-sm text-muted-foreground text-right">
            {t('step')} {currentStep} {t('of')} {totalSteps}
          </div>
        </div>

        {/* Progress Bar */}
        <div className="w-full bg-muted rounded-full h-2">
          <div
            className="bg-primary h-2 rounded-full transition-smooth"
            style={{ width: `${(currentStep / totalSteps) * 100}%` }}
          />
        </div>
      </div>

      {renderStep()}

      <div className="flex justify-between mt-8 pt-6 border-t border-border">
        <Button
          variant="outline"
          onClick={prevStep}
          disabled={currentStep === 1 || isSubmitting}
          iconName="ChevronLeft"
          iconPosition="left"
        >
          {t('navigation.previous')}
        </Button>

        {currentStep < totalSteps ? (
          <Button
            variant="default"
            onClick={nextStep}
            iconName="ChevronRight"
            iconPosition="right"
            className="glow-neon hover:glow-neon-active"
          >
            {t('navigation.next')}
          </Button>
        ) : (
          <Button
            variant="default"
            onClick={generateBrief}
            disabled={isSubmitting}
            iconName="FileText"
            iconPosition="left"
            className="glow-neon hover:glow-neon-active"
          >
            {isSubmitting ? t('status.submitting') : t('navigation.submit')}
          </Button>
        )}
      </div>

      {/* Success/Error Status */}
      {submitStatus === 'success' && (
        <div className="mt-6 p-4 bg-green-500/10 border border-green-500/20 rounded-lg flex items-start space-x-3">
          <Icon name="CheckCircle" size={20} className="text-green-500 mt-0.5 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-green-500 mb-1">{t('status.success.title')}</h4>
            <p className="text-sm text-green-500/80">
              {t('status.success.message')}
            </p>
          </div>
        </div>
      )}

      {submitStatus === 'error' && (
        <div className="mt-6 p-4 bg-red-500/10 border border-red-500/20 rounded-lg flex items-start space-x-3">
          <Icon name="AlertCircle" size={20} className="text-red-500 mt-0.5 flex-shrink-0" />
          <div>
            <h4 className="font-medium text-red-500 mb-1">{t('status.error.title')}</h4>
            <p className="text-sm text-red-500/80">
              {t('status.error.message')}
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProjectBrief;



================================================
FILE: src/components/sections/hero/FloatingTaglines.tsx
================================================
'use client';

import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';

const FloatingTaglines = () => {
  const t = useTranslations('home.floatingTaglines');
  const taglineKeys = ['one', 'two', 'three', 'four', 'five', 'six'] as const;

  const taglines = taglineKeys.map((key, index) => ({
    text: t(key),
    delay: index * 0.35,
  }));

  const orbitVariants = {
    animate: (custom) => ({
      rotate: 360,
      transition: {
        duration: 20 + custom * 2,
        repeat: Infinity,
        ease: "linear"
      }
    })
  };

  const floatVariants = {
    animate: {
      y: [0, -20, 0],
      transition: {
        duration: 3,
        repeat: Infinity,
        ease: "easeInOut"
      }
    }
  };

  return (
    <div className="absolute inset-0 pointer-events-none hidden md:block">
      {taglines?.map((tagline, index) => {
        const radius = 200 + index * 30;
        const angle = (index * 60) * (Math.PI / 180);
        const x = Math.cos(angle) * radius;
        const y = Math.sin(angle) * radius;

        return (
          <motion.div
            key={tagline?.text}
            className="absolute top-1/2 left-1/2"
            style={{
              transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`
            }}
            variants={orbitVariants}
            animate="animate"
            custom={index}
            initial={{ opacity: 0, scale: 0 }}
            whileInView={{ 
              opacity: 1, 
              scale: 1,
              transition: { delay: tagline?.delay, duration: 0.8 }
            }}
          >
            <motion.div
              variants={floatVariants}
              animate="animate"
              className="relative"
            >
              <div className="px-4 py-2 bg-primary/10 backdrop-blur-sm border border-primary/30 rounded-full">
                <span className="text-primary font-space-grotesk font-medium text-sm">
                  {tagline?.text}
                </span>
              </div>
              <div className="absolute inset-0 bg-primary/5 rounded-full blur-sm"></div>
            </motion.div>
          </motion.div>
        );
      })}
    </div>
  );
};

export default FloatingTaglines;



================================================
FILE: src/components/sections/hero/HeroContent.tsx
================================================
'use client';

import { useTranslations, useLocale } from 'next-intl';
import { motion } from 'framer-motion';
import Link from 'next/link';
import Button from 'components/ui/Button';

const statsOrder = ['experience', 'projects', 'hoursSaved'] as const;

const HeroContent = () => {
  const t = useTranslations('home.hero');
  const locale = useLocale();

  const textVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: (custom: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: custom * 0.2,
        duration: 0.8,
        ease: 'easeOut',
      },
    }),
  };

  const glowVariants = {
    animate: {
      textShadow: [
        '0 0 10px rgba(0, 255, 209, 0.5)',
        '0 0 20px rgba(0, 255, 209, 0.8)',
        '0 0 10px rgba(0, 255, 209, 0.5)',
      ],
      transition: {
        duration: 2,
        repeat: Infinity,
        ease: 'easeInOut',
      },
    },
  };

  const stats = statsOrder.map((key) => ({
    key,
    value: t(`stats.${key}.value`),
    label: t(`stats.${key}.label`),
  }));

  const primaryHref = `/${locale}/portfolio`;
  const secondaryHref = `/${locale}/contact`;

  return (
    <div className="relative z-10">
      <motion.div
        className="mb-6 md:mb-8"
        initial="hidden"
        animate="visible"
        variants={textVariants}
        custom={0}
      >
        <motion.h1
          className="mb-4 font-space-grotesk text-4xl font-bold leading-tight text-foreground md:text-6xl lg:text-7xl"
          variants={glowVariants}
          animate="animate"
        >
          {t('title')}
        </motion.h1>
        <motion.div
          className="h-1 w-24 rounded-full bg-gradient-to-r from-primary to-primary/50"
          initial={{ width: 0 }}
          animate={{ width: 96 }}
          transition={{ delay: 0.5, duration: 1 }}
        />
      </motion.div>

      <motion.h2
        className="mb-4 font-space-grotesk text-lg font-medium text-primary md:mb-6 md:text-2xl lg:text-3xl"
        initial="hidden"
        animate="visible"
        variants={textVariants}
        custom={1}
      >
        {t('subtitle')}
      </motion.h2>

      <motion.p
        className="mb-8 max-w-2xl font-inter text-base leading-relaxed text-muted-foreground md:mb-10 md:max-w-3xl md:text-lg lg:max-w-4xl"
        initial="hidden"
        animate="visible"
        variants={textVariants}
        custom={2}
      >
        {t('description')}
      </motion.p>

      <motion.div
        className="flex flex-col items-stretch gap-3 sm:flex-row sm:items-center sm:gap-4"
        initial="hidden"
        animate="visible"
        variants={textVariants}
        custom={3}
      >
        <Button
          asChild
          variant="default"
          size="lg"
          className="glow-neon transition-smooth hover:glow-neon-active magnetic-hover"
          iconName="ArrowRight"
          iconPosition="right"
          iconSize={20}
          aria-label={t('ctaPrimary')}
        >
          <Link href={primaryHref}>{t('ctaPrimary')}</Link>
        </Button>

        <Button
          asChild
          variant="outline"
          size="lg"
          className="border-primary/30 text-primary transition-smooth hover:bg-primary/10 magnetic-hover"
          iconName="Calendar"
          iconPosition="left"
          iconSize={18}
          aria-label={t('ctaSecondary')}
        >
          <Link href={secondaryHref}>{t('ctaSecondary')}</Link>
        </Button>
      </motion.div>

      {/* Stats moved below CTAs to improve layout and responsiveness */}
      <motion.div
        className="mt-10 grid grid-cols-2 gap-6 sm:grid-cols-3"
        initial="hidden"
        animate="visible"
        variants={textVariants}
        custom={4}
      >
        {stats.map((stat) => (
          <motion.div
            key={stat.key}
            className="text-left"
            whileHover={{ scale: 1.05 }}
            transition={{ type: 'spring', stiffness: 300 }}
          >
            <div className="mb-1 font-space-grotesk text-2xl font-bold text-primary">
              {stat.value}
            </div>
            <div className="font-inter text-xs uppercase tracking-wider text-muted-foreground">
              {stat.label}
            </div>
          </motion.div>
        ))}
      </motion.div>
    </div>
  );
};

export default HeroContent;



================================================
FILE: src/components/sections/hero/HeroExperience.tsx
================================================
'use client';

import { useCallback, useEffect, useState } from 'react';
import FloatingTaglines from './FloatingTaglines';
import HeroContent from './HeroContent';
import HeroPortrait from './HeroPortrait';
import HolographicOverlay from './HolographicOverlay';
import LoadingAnimation from './LoadingAnimation';
import ParallaxBackground from './ParallaxBackground';

const HeroExperience = () => {
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  useEffect(() => {
    const previousOverflow = document.body.style.overflow;
    document.body.style.overflow = isLoading ? 'hidden' : 'auto';

    return () => {
      document.body.style.overflow = previousOverflow;
    };
  }, [isLoading]);

  const handleLoadingComplete = useCallback(() => {
    setIsLoading(false);
  }, []);

  return (
    <>
      {isLoading && <LoadingAnimation onComplete={handleLoadingComplete} />}

      <div className="relative min-h-screen overflow-hidden bg-background text-foreground">
        <ParallaxBackground />
        <HolographicOverlay />

        <main className="relative z-10 flex min-h-screen flex-col items-stretch justify-center pt-16">
          <section className="relative w-full min-h-[calc(100vh-4rem)] px-6 lg:px-8 flex items-center">
            <FloatingTaglines />

            <div className="relative mx-auto w-full max-w-7xl grid items-center justify-items-start gap-10 md:gap-14 lg:gap-16 lg:grid-cols-[1.2fr_0.8fr]">
              <HeroContent />
              <HeroPortrait />
            </div>
          </section>
        </main>
      </div>
    </>
  );
};

export default HeroExperience;



================================================
FILE: src/components/sections/hero/HeroPortrait.tsx
================================================
'use client';

import React, { useEffect, useRef, useState } from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Image from 'components/AppImage';

const HeroPortrait = () => {
  const t = useTranslations('home.hero');
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [isLoaded, setIsLoaded] = useState(false);
  const imageRef = useRef<HTMLImageElement | null>(null);

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      const x = (e.clientX / window.innerWidth - 0.5) * 10;
      const y = (e.clientY / window.innerHeight - 0.5) * 10;
      setMousePosition({ x, y });
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  useEffect(() => {
    if (imageRef.current?.complete && imageRef.current?.naturalWidth) {
      setIsLoaded(true);
    }
  }, []);

  return (
    <div className="relative z-10">
      <motion.div
        className="relative"
        style={{
          transform: `translate(${mousePosition.x}px, ${mousePosition.y}px)`,
        }}
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{
          opacity: isLoaded ? 1 : 0,
          scale: isLoaded ? 1 : 0.8,
        }}
        transition={{ duration: 1, ease: 'easeOut' }}
      >
        <div className="relative mx-auto h-56 w-56 sm:h-72 sm:w-72 lg:h-96 lg:w-96">
          <div className="absolute inset-0 rounded-full bg-gradient-radial from-primary/20 via-primary/10 to-transparent blur-2xl" />

          <div className="relative h-full w-full overflow-hidden rounded-full border-2 border-primary/30 glow-neon">
            <Image
              src="/assets/images/nicky-profile-img.png"
              alt={t('portraitAlt')}
              className="h-full w-full object-cover"
              ref={imageRef}
              onLoad={() => setIsLoaded(true)}
              loading="eager"
              decoding="async"
              fetchPriority="high"
              sizes="(min-width: 1024px) 24rem, (min-width: 640px) 18rem, 14rem"
            />

            <div className="absolute inset-0 mix-blend-overlay bg-gradient-to-br from-primary/10 via-transparent to-primary/5" />

            <motion.div
              className="absolute inset-0 h-8 bg-gradient-to-b from-transparent via-primary/20 to-transparent"
              animate={{
                y: ['-2rem', '24rem', '-2rem'],
              }}
              transition={{
                duration: 3,
                repeat: Infinity,
                ease: 'linear',
              }}
            />
          </div>

          <motion.div
            className="absolute -top-4 -right-4 h-8 w-8 rounded border border-primary/40 bg-primary/10 backdrop-blur-sm hidden sm:block"
            animate={{
              rotate: 360,
              scale: [1, 1.1, 1],
            }}
            transition={{
              rotate: { duration: 10, repeat: Infinity, ease: 'linear' },
              scale: { duration: 2, repeat: Infinity, ease: 'easeInOut' },
            }}
          />

          <motion.div
            className="absolute -bottom-6 -left-6 hidden sm:flex h-6 w-12 items-center justify-center rounded-full border border-primary/30 bg-primary/5 backdrop-blur-sm"
            animate={{
              y: [0, -10, 0],
              opacity: [0.5, 1, 0.5],
            }}
            transition={{
              duration: 3,
              repeat: Infinity,
              ease: 'easeInOut',
              delay: 1,
            }}
          >
            <div className="h-2 w-2 rounded-full bg-primary/60" />
          </motion.div>

          <motion.div
            className="absolute top-1/4 -left-8 h-6 w-6 rounded-full border border-primary/35 bg-primary/10 backdrop-blur-sm hidden sm:block"
            animate={{
              x: [0, -5, 0],
              rotate: [0, 180, 360],
            }}
            transition={{
              duration: 4,
              repeat: Infinity,
              ease: 'easeInOut',
              delay: 0.5,
            }}
          />

          <motion.div
            className="absolute top-3/4 -right-8 h-4 w-10 rounded border border-primary/25 bg-primary/5 backdrop-blur-sm hidden sm:block"
            animate={{
              x: [0, 8, 0],
              opacity: [0.3, 0.8, 0.3],
            }}
            transition={{
              duration: 5,
              repeat: Infinity,
              ease: 'easeInOut',
              delay: 2,
            }}
          >
            <div className="p-1">
              <div className="h-0.5 w-full rounded bg-primary/40" />
            </div>
          </motion.div>
        </div>

        <motion.div
          className="absolute -bottom-8 left-1/2 flex -translate-x-1/2 items-center space-x-2 rounded-full border border-primary/20 bg-card/80 px-4 py-2 backdrop-blur-sm"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.5, duration: 0.8 }}
        >
          <motion.div
            className="h-2 w-2 rounded-full bg-primary"
            animate={{
              opacity: [1, 0.3, 1],
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: 'easeInOut',
            }}
          />
          <span className="text-xs font-inter text-muted-foreground">
            {t('status')}
          </span>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default HeroPortrait;



================================================
FILE: src/components/sections/hero/HolographicOverlay.tsx
================================================
'use client';

import { useEffect, useRef } from 'react';
import { motion } from 'framer-motion';

const HolographicOverlay = () => {
  const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef?.current;
    if (!canvas) return;

    const ctx = canvas?.getContext('2d');
    const particles = [];
    const particleCount = 50;

    // Set canvas size
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // Create particles
    for (let i = 0; i < particleCount; i++) {
      particles?.push({
        x: Math.random() * canvas?.width,
        y: Math.random() * canvas?.height,
        vx: (Math.random() - 0.5) * 0.5,
        vy: (Math.random() - 0.5) * 0.5,
        size: Math.random() * 2 + 1,
        opacity: Math.random() * 0.5 + 0.2
      });
    }

    // Animation loop
    let animationFrameId: number;

    const animate = () => {
      ctx?.clearRect(0, 0, canvas?.width, canvas?.height);
      
      // Update and draw particles
      particles?.forEach((particle, index) => {
        particle.x += particle?.vx;
        particle.y += particle?.vy;

        // Wrap around edges
        if (particle?.x < 0) particle.x = canvas?.width;
        if (particle?.x > canvas?.width) particle.x = 0;
        if (particle?.y < 0) particle.y = canvas?.height;
        if (particle?.y > canvas?.height) particle.y = 0;

        // Draw particle
        ctx?.beginPath();
        ctx?.arc(particle?.x, particle?.y, particle?.size, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(0, 255, 209, ${particle?.opacity})`;
        ctx?.fill();

        // Draw connections
        particles?.slice(index + 1)?.forEach(otherParticle => {
          const dx = particle?.x - otherParticle?.x;
          const dy = particle?.y - otherParticle?.y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 100) {
            ctx?.beginPath();
            ctx?.moveTo(particle?.x, particle?.y);
            ctx?.lineTo(otherParticle?.x, otherParticle?.y);
            ctx.strokeStyle = `rgba(0, 255, 209, ${0.1 * (1 - distance / 100)})`;
            ctx?.stroke();
          }
        });
      });

      animationFrameId = requestAnimationFrame(animate);
    };

    animationFrameId = requestAnimationFrame(animate);

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, []);

  return (
    <div className="absolute inset-0 pointer-events-none overflow-hidden">
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full"
        style={{ mixBlendMode: 'screen' }}
      />
      {/* Floating UI Elements */}
      <motion.div
        className="absolute top-1/4 left-1/4 w-32 h-20 border border-primary/30 rounded-lg backdrop-blur-sm"
        animate={{
          y: [0, -20, 0],
          rotate: [0, 5, 0],
        }}
        transition={{
          duration: 4,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      >
        <div className="p-3">
          <div className="w-full h-2 bg-primary/20 rounded mb-2"></div>
          <div className="w-3/4 h-1 bg-primary/30 rounded mb-1"></div>
          <div className="w-1/2 h-1 bg-primary/20 rounded"></div>
        </div>
      </motion.div>
      <motion.div
        className="absolute top-1/3 right-1/4 w-24 h-24 border border-primary/20 rounded-full backdrop-blur-sm flex items-center justify-center"
        animate={{
          y: [0, 15, 0],
          rotate: [0, -10, 0],
        }}
        transition={{
          duration: 5,
          repeat: Infinity,
          ease: "easeInOut",
          delay: 1
        }}
      >
        <div className="w-8 h-8 bg-primary/30 rounded-full"></div>
      </motion.div>
      <motion.div
        className="absolute bottom-1/3 left-1/3 w-28 h-16 border border-primary/25 rounded backdrop-blur-sm"
        animate={{
          y: [0, -10, 0],
          x: [0, 10, 0],
        }}
        transition={{
          duration: 6,
          repeat: Infinity,
          ease: "easeInOut",
          delay: 2
        }}
      >
        <div className="p-2">
          <div className="flex space-x-1 mb-2">
            <div className="w-2 h-2 bg-primary/40 rounded-full"></div>
            <div className="w-2 h-2 bg-primary/30 rounded-full"></div>
            <div className="w-2 h-2 bg-primary/20 rounded-full"></div>
          </div>
          <div className="w-full h-1 bg-primary/25 rounded"></div>
        </div>
      </motion.div>
      {/* Data Lines */}
      <motion.div
        className="absolute top-1/2 left-0 w-full h-px bg-gradient-to-r from-transparent via-primary/30 to-transparent"
        animate={{
          scaleX: [0, 1, 0],
        }}
        transition={{
          duration: 3,
          repeat: Infinity,
          ease: "easeInOut",
          delay: 0.5
        }}
      />
      <motion.div
        className="absolute top-2/3 left-0 w-full h-px bg-gradient-to-r from-transparent via-primary/20 to-transparent"
        animate={{
          scaleX: [0, 1, 0],
        }}
        transition={{
          duration: 4,
          repeat: Infinity,
          ease: "easeInOut",
          delay: 1.5
        }}
      />
    </div>
  );
};

export default HolographicOverlay;



================================================
FILE: src/components/sections/hero/LoadingAnimation.tsx
================================================
'use client';

import { useEffect, useMemo, useState } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import { useTranslations } from 'next-intl';

type LoadingAnimationProps = {
  onComplete: () => void;
};

const stepKeys = ['one', 'two', 'three', 'four', 'five'] as const;

const LoadingAnimation = ({ onComplete }: LoadingAnimationProps) => {
  const t = useTranslations('home.loading');
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState(0);

  const steps = useMemo(
    () => stepKeys.map((key) => t(`steps.${key}`)),
    [t]
  );

  useEffect(() => {
    const timer = window.setInterval(() => {
      setProgress((prev) => {
        const nextProgress = prev + Math.random() * 15;
        if (nextProgress >= 100) {
          window.clearInterval(timer);
          window.setTimeout(() => onComplete(), 500);
          return 100;
        }
        return nextProgress;
      });
    }, 200);

    return () => window.clearInterval(timer);
  }, [onComplete]);

  useEffect(() => {
    const stepTimer = window.setInterval(() => {
      setCurrentStep((prev) => (prev + 1) % steps.length);
    }, 800);

    return () => window.clearInterval(stepTimer);
  }, [steps.length]);

  return (
    <AnimatePresence>
      <motion.div
        className="fixed inset-0 z-50 flex items-center justify-center bg-background"
        initial={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="mx-auto max-w-md px-6 text-center">
          <motion.div
            className="mb-8"
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ duration: 0.8, ease: 'easeOut' }}
          >
            <div className="mx-auto flex h-16 w-16 items-center justify-center rounded-lg bg-gradient-to-br from-primary to-primary/70 font-space-grotesk text-2xl font-bold text-black glow-neon">
              NB
            </div>
          </motion.div>

          <motion.h3
            className="mb-4 text-sm font-space-grotesk uppercase tracking-[0.3em] text-muted-foreground"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
          >
            {t('title')}
          </motion.h3>

          <div className="mb-6">
            <div className="h-1 w-full overflow-hidden rounded-full bg-gray-800">
              <motion.div
                className="h-full rounded-full bg-gradient-to-r from-primary to-primary/70"
                initial={{ width: 0 }}
                animate={{ width: `${progress}%` }}
                transition={{ duration: 0.3 }}
              />
            </div>
            <motion.div
              className="mt-2 font-space-grotesk text-lg font-medium text-primary"
              key={progress}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
            >
              {Math.round(progress)}%
            </motion.div>
          </div>

          <motion.div
            className="mb-8 h-6"
            key={currentStep}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <p className="text-sm font-inter text-muted-foreground">
              {steps[currentStep]}
            </p>
          </motion.div>

          <div className="flex justify-center space-x-2">
            {[0, 1, 2].map((index) => (
              <motion.div
                key={index}
                className="h-2 w-2 rounded-full bg-primary/60"
                animate={{
                  scale: [1, 1.5, 1],
                  opacity: [0.5, 1, 0.5],
                }}
                transition={{
                  duration: 1,
                  repeat: Infinity,
                  delay: index * 0.2,
                  ease: 'easeInOut',
                }}
              />
            ))}
          </div>

          <div className="pointer-events-none absolute inset-0">
            <motion.div
              className="absolute left-1/4 top-1/4 h-12 w-20 rounded border border-primary/20 backdrop-blur-sm"
              animate={{
                opacity: [0, 0.5, 0],
                rotate: [0, 10, 0],
              }}
              transition={{
                duration: 3,
                repeat: Infinity,
                ease: 'easeInOut',
              }}
            />

            <motion.div
              className="absolute right-1/4 top-1/3 h-16 w-16 rounded-full border border-primary/15 backdrop-blur-sm"
              animate={{
                opacity: [0, 0.3, 0],
                scale: [0.8, 1.2, 0.8],
              }}
              transition={{
                duration: 4,
                repeat: Infinity,
                ease: 'easeInOut',
                delay: 1,
              }}
            />
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};

export default LoadingAnimation;



================================================
FILE: src/components/sections/hero/ParallaxBackground.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { motion, useScroll, useTransform } from 'framer-motion';

const ParallaxBackground = () => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const { scrollY } = useScroll();
  
  const backgroundY = useTransform(scrollY, [0, 500], [0, 150]);
  const backgroundOpacity = useTransform(scrollY, [0, 300], [1, 0.3]);
  const skylineY = useTransform(scrollY, [0, 500], [0, 100]);

  useEffect(() => {
    const handleMouseMove = (e) => {
      const x = (e?.clientX / window.innerWidth - 0.5) * 20;
      const y = (e?.clientY / window.innerHeight - 0.5) * 20;
      setMousePosition({ x, y });
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  return (
    <div className="absolute inset-0 overflow-hidden">
      {/* Main Background */}
      <motion.div
        className="absolute inset-0 bg-gradient-to-br from-background via-gray-900/50 to-background"
        style={{
          y: backgroundY,
          opacity: backgroundOpacity,
          translateX: `${mousePosition.x * 0.5}px`,
          translateY: `${mousePosition.y * 0.5}px`,
        }}
      />
      {/* Montreal Skyline Silhouette */}
      <motion.div
        className="absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-gray-800/30 to-transparent"
        style={{
          y: skylineY,
          translateX: `${mousePosition.x * 0.3}px`,
        }}
      >
        <div className="absolute bottom-0 left-0 right-0 h-16">
          {/* Simplified skyline shapes */}
          <div className="absolute bottom-0 left-1/4 w-8 h-12 bg-gray-700/40"></div>
          <div className="absolute bottom-0 left-1/3 w-6 h-16 bg-gray-600/40"></div>
          <div className="absolute bottom-0 left-1/2 w-10 h-10 bg-gray-700/40"></div>
          <div className="absolute bottom-0 right-1/3 w-7 h-14 bg-gray-600/40"></div>
          <div className="absolute bottom-0 right-1/4 w-9 h-8 bg-gray-700/40"></div>
        </div>
      </motion.div>
      {/* Depth Layers */}
      <motion.div
        className="absolute inset-0"
        style={{
          translateX: `${mousePosition.x * 0.2}px`,
          translateY: `${mousePosition.y * 0.2}px`,
        }}
      >
        {/* Layer 1 - Furthest */}
        <div className="absolute top-1/4 left-1/6 w-2 h-2 bg-primary/20 rounded-full blur-sm"></div>
        <div className="absolute top-1/3 right-1/5 w-1 h-1 bg-primary/30 rounded-full blur-sm"></div>
        <div className="absolute bottom-1/3 left-1/3 w-1.5 h-1.5 bg-primary/25 rounded-full blur-sm"></div>
      </motion.div>
      <motion.div
        className="absolute inset-0"
        style={{
          translateX: `${mousePosition.x * 0.4}px`,
          translateY: `${mousePosition.y * 0.4}px`,
        }}
      >
        {/* Layer 2 - Middle */}
        <div className="absolute top-1/5 right-1/4 w-3 h-3 bg-primary/30 rounded-full blur-sm"></div>
        <div className="absolute top-2/3 left-1/5 w-2 h-2 bg-primary/40 rounded-full blur-sm"></div>
        <div className="absolute bottom-1/4 right-1/3 w-2.5 h-2.5 bg-primary/35 rounded-full blur-sm"></div>
      </motion.div>
      <motion.div
        className="absolute inset-0"
        style={{
          translateX: `${mousePosition.x * 0.6}px`,
          translateY: `${mousePosition.y * 0.6}px`,
        }}
      >
        {/* Layer 3 - Closest */}
        <div className="absolute top-1/6 left-1/4 w-4 h-4 bg-primary/40 rounded-full blur-sm"></div>
        <div className="absolute top-1/2 right-1/6 w-3 h-3 bg-primary/50 rounded-full blur-sm"></div>
        <div className="absolute bottom-1/5 left-2/3 w-3.5 h-3.5 bg-primary/45 rounded-full blur-sm"></div>
      </motion.div>
      {/* Cinematic Lighting */}
      <div className="absolute inset-0 bg-gradient-radial from-transparent via-transparent to-background/80"></div>
      <div className="absolute top-0 left-0 right-0 h-32 bg-gradient-to-b from-background/50 to-transparent"></div>
      <div className="absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-background/80 to-transparent"></div>
    </div>
  );
};

export default ParallaxBackground;



================================================
FILE: src/components/sections/home/HomeBenefits.tsx
================================================
'use client';

import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';

const HomeBenefits = () => {
    const t = useTranslations('home.benefits');
    const tRealResults = useTranslations('home.realResults');

    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                staggerChildren: 0.2,
                delayChildren: 0.1,
            },
        },
    };

    const itemVariants = {
        hidden: { opacity: 0, y: 30 },
        visible: {
            opacity: 1,
            y: 0,
            transition: {
                duration: 0.8,
                ease: 'easeOut',
            },
        },
    };

    const benefits = [
        {
            key: 'timeSavings',
            icon: '💰',
            title: t('items.timeSavings.title'),
            example: t('items.timeSavings.example'),
        },
        {
            key: 'visibility',
            icon: '🚀',
            title: t('items.visibility.title'),
            example: t('items.visibility.example'),
        },
        {
            key: 'understanding',
            icon: '🧠',
            title: t('items.understanding.title'),
            example: t('items.understanding.example'),
        },
    ];

    return (
        <section className="relative py-20 px-6 lg:px-8 bg-background">
            <div className="absolute inset-0 pointer-events-none">
                <div className="absolute inset-0 bg-gradient-to-b from-transparent via-primary/5 to-transparent" />
            </div>

            <div className="relative max-w-6xl mx-auto">
                <motion.div
                    initial="hidden"
                    whileInView="visible"
                    viewport={{ once: true, amount: 0.2 }}
                    variants={containerVariants}
                >
                    <motion.div
                        variants={itemVariants}
                        className="text-center mb-16"
                    >
                        <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6 glow-neon">
                            <span>{t('title')}</span>
                        </div>

                        <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
                            {t('subtitle')}
                        </h2>
                    </motion.div>

                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        {benefits.map((benefit, idx) => (
                            <motion.div
                                key={benefit.key}
                                variants={itemVariants}
                                className="group relative rounded-2xl border border-border/60 bg-card/50 backdrop-blur-sm overflow-hidden"
                            >
                                {/* Animated gradient wash on hover */}
                                <motion.div
                                    className="pointer-events-none absolute -inset-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                                    initial={false}
                                    animate={{}}
                                >
                                    <motion.div
                                        className="absolute -inset-20 bg-[conic-gradient(var(--color-primary)_0deg,transparent_120deg)] opacity-30"
                                        animate={{ rotate: [0, 360] }}
                                        transition={{ duration: 12, ease: 'easeInOut', repeat: Infinity }}
                                    />
                                </motion.div>

                                <div className="relative p-8 flex flex-col gap-4">
                                    <div className="flex items-center gap-4 mb-4">
                                        <div className="text-4xl">{benefit.icon}</div>
                                        <div className="w-12 h-12 rounded-xl bg-primary/10 border border-primary/20 flex items-center justify-center glow-neon">
                                            <motion.div
                                                animate={{ rotate: [0, 10, 0, -10, 0] }}
                                                transition={{ duration: 8, ease: 'easeInOut', repeat: Infinity }}
                                            >
                                                <div className="w-6 h-6 rounded-full bg-primary/20" />
                                            </motion.div>
                                        </div>
                                    </div>

                                    <h3 className="text-xl font-semibold text-foreground mb-4">
                                        {benefit.title}
                                    </h3>

                                    <p className="text-sm text-muted-foreground leading-relaxed">
                                        {benefit.example}
                                    </p>

                                    <div className="mt-4 flex items-center text-sm text-primary/80">
                                        <span className="font-medium">{t('cta')}</span>
                                        <motion.div
                                            className="ml-1 transition-transform group-hover:translate-x-0.5"
                                            animate={{ x: [0, 4, 0] }}
                                            transition={{ duration: 2, repeat: Infinity }}
                                        >
                                            →
                                        </motion.div>
                                    </div>
                                </div>
                            </motion.div>
                        ))}
                    </div>
                </motion.div>
            </div>
        </section>
    );
};

export default HomeBenefits;



================================================
FILE: src/components/sections/home/HomeCapabilities.tsx
================================================
'use client';

import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';
import Icon from 'components/AppIcon';

const HomeCapabilities = () => {
  const t = useTranslations('home.capabilities');

  const capabilities = [
    {
      icon: 'Globe',
      title: t('items.webDesign.title'),
      description: t('items.webDesign.description'),
    },
    {
      icon: 'Workflow',
      title: t('items.automation.title'),
      description: t('items.automation.description'),
    },
    {
      icon: 'Palette',
      title: t('items.brandStrategy.title'),
      description: t('items.brandStrategy.description'),
    },
  ];

  const loopTransition = {
    duration: 6,
    ease: 'easeInOut' as const,
    repeat: Infinity,
    repeatType: 'loop' as const,
  };

  return (
    <section className="relative py-20 px-6 lg:px-8 bg-background">
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute inset-0 bg-gradient-to-b from-primary/5 via-transparent to-transparent" />
      </div>

      <div className="relative max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6 glow-neon">
            <Icon name="Sparkles" size={16} />
            <span>{t('title')}</span>
          </div>
          <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
            {t('subtitle')}
          </h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            {t('description')}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
          {capabilities.map((item, idx) => (
            <motion.div
              key={item.title}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true, amount: 0.2 }}
              transition={{ duration: 0.5, delay: idx * 0.05 }}
              className="group relative rounded-2xl border border-border/60 bg-card/50 backdrop-blur-sm overflow-hidden"
            >
              {/* Animated gradient wash on hover */}
              <motion.div
                className="pointer-events-none absolute -inset-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                initial={false}
                animate={{}}
              >
                <motion.div
                  className="absolute -inset-20 bg-[conic-gradient(var(--color-primary)_0deg,transparent_120deg)] opacity-30"
                  animate={{ rotate: [0, 360] }}
                  transition={{ ...loopTransition, duration: 12 }}
                />
              </motion.div>

              <div className="relative p-6 flex flex-col gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-12 h-12 rounded-xl bg-primary/10 border border-primary/20 flex items-center justify-center glow-neon">
                    <motion.div
                      animate={{ rotate: [0, 10, 0, -10, 0] }}
                      transition={{ ...loopTransition, duration: 8 }}
                    >
                      <Icon name={item.icon} size={24} className="text-primary" />
                    </motion.div>
                  </div>
                  <h3 className="text-lg font-semibold text-foreground">{item.title}</h3>
                </div>

                <p className="text-sm text-muted-foreground">{item.description}</p>

                <div className="mt-2 flex items-center text-sm text-primary/80">
                  <span className="font-medium">{t('cta')}</span>
                  <Icon name="ArrowRight" size={16} className="ml-1 transition-transform group-hover:translate-x-0.5" />
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default HomeCapabilities;



================================================
FILE: src/components/sections/home/HomeFeaturedProjects.tsx
================================================
'use client';

import { motion } from 'framer-motion';
import Link from 'next/link';
import Icon from 'components/AppIcon';
import { useLocale, useTranslations } from 'next-intl';

type MiniProject = {
  title: string;
  slug: string;
  year: number;
  excerpt: string;
  theme: {
    background: string;
    foreground: string;
  };
};

const PROJECTS: MiniProject[] = [
  {
    title: 'Sofia AI Desk',
    slug: 'sofia-ai-desk',
    year: 2025,
    excerpt: 'Automated customer support with a clear dashboard — ~60% faster responses.',
    theme: {
      background: 'radial-gradient(circle at 25% 25%, rgba(102,255,0,0.8), rgba(12,12,12,0.95))',
      foreground: '#e9ffe5',
    },
  },
  {
    title: 'Next X Level',
    slug: 'next-x-level',
    year: 2024,
    excerpt: 'Bilingual e‑commerce with clean mobile UX and automated product updates.',
    theme: {
      background: 'linear-gradient(140deg, rgba(8,8,8,0.95), rgba(100,255,188,0.45))',
      foreground: '#f0fffa',
    },
  },
  {
    title: 'Lumicerra Labs',
    slug: 'lumicerra-labs',
    year: 2023,
    excerpt: 'Real‑time dashboard for smart LED lighting with clear energy insights.',
    theme: {
      background: 'linear-gradient(130deg, rgba(8,12,40,0.9), rgba(102,255,0,0.4))',
      foreground: '#e6f4ff',
    },
  },
];

const HomeFeaturedProjects = () => {
  const locale = useLocale();
  const t = useTranslations('home.featuredProjects');
  const portfolioHref = `/${locale}/portfolio`;

  return (
    <section className="relative py-20 px-6 lg:px-8 bg-background">
      <div className="relative max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6 glow-neon">
            <Icon name="FolderOpen" size={16} />
            <span>{t('title')}</span>
          </div>
          <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
            {t('subtitle')}
          </h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            {t('description')}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {PROJECTS.map((p, idx) => (
            <motion.article
              key={p.slug}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true, amount: 0.2 }}
              transition={{ duration: 0.5, delay: idx * 0.05 }}
              className="group relative rounded-2xl overflow-hidden border border-border/60 bg-card/50 backdrop-blur-sm"
            >
              {/* Gradient motion layer */}
              <motion.div
                aria-hidden
                className="absolute inset-0"
                style={{
                  backgroundImage: p.theme.background,
                  backgroundSize: '200% 200%',
                  filter: 'saturate(1.1)',
                }}
                initial={{ opacity: 0.25, backgroundPosition: '0% 0%' }}
                whileHover={{ opacity: 0.5, backgroundPosition: '100% 100%' }}
                transition={{ duration: 1.2, ease: [0.22, 1, 0.36, 1] }}
              />
              {/* Subtle mask to keep theme consistent */}
              <div className="absolute inset-0 bg-gradient-to-b from-black/20 via-black/10 to-black/30" />

              <div className="relative p-6 min-h-[260px] flex flex-col justify-between">
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <span className="px-2 py-0.5 text-xs rounded-full bg-black/40 border border-white/10 text-[--card-foreground]">
                      {p.year}
                    </span>
                    <span className="text-xs text-white/70">{t('projects.sofia.type')}</span>
                  </div>
                  <h3
                    className="text-xl font-semibold"
                    style={{ color: p.theme.foreground }}
                  >
                    {p.title}
                  </h3>
                  <p className="text-sm leading-relaxed text-white/80">{p.excerpt}</p>
                </div>

                <div className="pt-4 flex items-center justify-between">
                  <Link
                    href={portfolioHref}
                    className="inline-flex items-center gap-1 text-sm font-medium text-white/90 hover:text-white transition-smooth"
                  >
                    {t('projects.sofia.cta')}
                    <Icon
                      name="ArrowRight"
                      size={16}
                      className="transition-transform group-hover:translate-x-1"
                    />
                  </Link>

                  <div className="flex -space-x-2 opacity-80">
                    <div className="w-6 h-6 rounded-full bg-primary/80 border border-white/20" />
                    <div className="w-6 h-6 rounded-full bg-emerald-400/80 border border-white/20" />
                    <div className="w-6 h-6 rounded-full bg-cyan-400/80 border border-white/20" />
                  </div>
                </div>
              </div>

              {/* Hover ring effect */}
              <motion.div
                className="pointer-events-none absolute inset-0 rounded-2xl ring-0 ring-primary/40"
                whileHover={{ boxShadow: '0 0 0 2px rgba(0,255,209,0.35)' }}
              />
            </motion.article>
          ))}
        </div>

        <div className="mt-10 text-center">
          <Link
            href={portfolioHref}
            className="inline-flex items-center gap-2 text-sm text-primary hover:underline"
          >
            {t('cta')}
            <Icon name="ArrowRight" size={16} />
          </Link>
        </div>
      </div>
    </section>
  );
};

export default HomeFeaturedProjects;



================================================
FILE: src/components/sections/home/HomeIntro.tsx
================================================
'use client';

import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';

const HomeIntro = () => {
    const t = useTranslations('home.intro');
    const tPersonalIntro = useTranslations('home.personalIntro');

    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                staggerChildren: 0.2,
                delayChildren: 0.1,
            },
        },
    };

    const itemVariants = {
        hidden: { opacity: 0, y: 30 },
        visible: {
            opacity: 1,
            y: 0,
            transition: {
                duration: 0.8,
                ease: 'easeOut',
            },
        },
    };

    return (
        <section className="relative py-20 px-6 lg:px-8 bg-background">
            <div className="absolute inset-0 pointer-events-none">
                <div className="absolute inset-0 bg-gradient-to-b from-transparent via-primary/5 to-transparent" />
            </div>

            <div className="relative max-w-4xl mx-auto">
                <motion.div
                    initial="hidden"
                    whileInView="visible"
                    viewport={{ once: true, amount: 0.3 }}
                    variants={containerVariants}
                >
                    <motion.div
                        variants={itemVariants}
                        className="text-center mb-12"
                    >
                        <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6 glow-neon">
                            <span>{tPersonalIntro('title')}</span>
                        </div>

                        <motion.h2
                            className="text-2xl lg:text-3xl font-space-grotesk font-bold text-foreground mb-6"
                            variants={itemVariants}
                        >
                            {t('greeting')}
                        </motion.h2>

                        <motion.p
                            className="text-lg lg:text-xl font-medium text-primary mb-8"
                            variants={itemVariants}
                        >
                            {t('tagline')}
                        </motion.p>

                        <motion.div
                            className="max-w-3xl mx-auto"
                            variants={itemVariants}
                        >
                            <div className="h-1 w-16 rounded-full bg-gradient-to-r from-primary to-primary/50 mx-auto mb-8" />

                            <p className="text-base lg:text-lg leading-relaxed text-muted-foreground">
                                {t('paragraph')}
                            </p>
                        </motion.div>
                    </motion.div>
                </motion.div>
            </div>
        </section>
    );
};

export default HomeIntro;



================================================
FILE: src/components/sections/home/HomeTestimonials.tsx
================================================
'use client';

import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Icon from 'components/AppIcon';
import TestimonialCarousel from 'components/sections/testimonials/TestimonialCarousel';

const HomeTestimonials = () => {
  const t = useTranslations('home.testimonials');
  const tStats = useTranslations('home.hero.stats');

  const stats = [
    { key: 'experience', value: tStats('experience.value'), label: tStats('experience.label'), icon: 'Award' },
    { key: 'projects', value: tStats('projects.value'), label: tStats('projects.label'), icon: 'FolderOpen' },
    { key: 'hoursSaved', value: tStats('hoursSaved.value'), label: tStats('hoursSaved.label'), icon: 'Clock' },
  ];

  const testimonials = [
    {
      id: 101,
      name: t('items.0.name'),
      role: t('items.0.role'),
      company: t('items.0.company'),
      avatar: '/assets/images/profil_portrait.jpg',
      companyLogo: '',
      content: t('items.0.content'),
      rating: 5,
      projectType: t('items.0.projectType'),
    },
    {
      id: 102,
      name: t('items.1.name'),
      role: t('items.1.role'),
      company: t('items.1.company'),
      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',
      companyLogo: '',
      content: t('items.1.content'),
      rating: 5,
      projectType: t('items.1.projectType'),
    },
    {
      id: 103,
      name: t('items.2.name'),
      role: t('items.2.role'),
      company: t('items.2.company'),
      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
      companyLogo: '',
      content: t('items.2.content'),
      rating: 5,
      projectType: t('items.2.projectType'),
    },
  ];

  return (
    <section id="testimonials" className="relative py-20 px-6 lg:px-8 bg-background">
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute inset-0 bg-gradient-to-b from-transparent via-primary/5 to-transparent" />
      </div>

      <div className="relative max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6 glow-neon">
            <Icon name="MessageSquare" size={16} />
            <span>{t('badge')}</span>
          </div>
          <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
            {t('heading')}
          </h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            {t('subheading')}
          </p>
        </div>

        <div className="max-w-4xl mx-auto">
          <TestimonialCarousel testimonials={testimonials} autoPlay interval={7000} />
        </div>

      </div>
    </section>
  );
};

export default HomeTestimonials;



================================================
FILE: src/components/sections/home/IconSphere.tsx
================================================
'use client';

import { useState, useEffect } from 'react';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';
import Image from 'next/image';

// Tech stack icons data
const ICONS = [
    { id: 'nextjs', label: 'Next.js', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/nextjs.png', href: 'https://nextjs.org' },
    { id: 'react', label: 'React', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/react.png', href: 'https://react.dev' },
    { id: 'typescript', label: 'TypeScript', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/typescript.png', href: 'https://typescriptlang.org' },
    { id: 'tailwind', label: 'Tailwind CSS', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/tailwindcss.png', href: 'https://tailwindcss.com' },
    { id: 'supabase', label: 'Supabase', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/supabase.png', href: 'https://supabase.com' },
    { id: 'postgresql', label: 'PostgreSQL', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/postgresql.png', href: 'https://postgresql.org' },
    { id: 'prisma', label: 'Prisma', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/prisma.png', href: 'https://prisma.io' },
    { id: 'nodejs', label: 'Node.js', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/nodejs.png', href: 'https://nodejs.org' },
    { id: 'n8n', label: 'n8n', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/n8n.png', href: 'https://n8n.io' },
    { id: 'openai', label: 'OpenAI', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/openai.png', href: 'https://openai.com' },
    { id: 'zapier', label: 'Zapier', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/zapier.png', href: 'https://zapier.com' },
    { id: 'docker', label: 'Docker', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/docker.png', href: 'https://docker.com' },
    { id: 'netlify', label: 'Netlify', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/netlify.png', href: 'https://netlify.com' },
    { id: 'cloudflare', label: 'Cloudflare', src: '/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/cloudflare.png', href: 'https://cloudflare.com' },
];

interface IconSphereProps {
    radius?: number;
    radiusMobile?: number;
    speed?: 'slow' | 'normal' | 'fast';
    className?: string;
}

// Generate circular positions (simpler approach)
const generateCirclePositions = (count: number, radius: number) => {
    const positions = [];

    for (let i = 0; i < count; i++) {
        const angle = (2 * Math.PI * i) / count;
        const x = radius * Math.cos(angle);
        const y = radius * Math.sin(angle);

        positions.push({ x, y, z: 0, angle });
    }

    return positions;
};

const IconSphere = ({
    radius = 140,
    radiusMobile = 90,
    speed = 'normal',
    className = ''
}: IconSphereProps) => {
    const [isMobile, setIsMobile] = useState(false);
    const [hoveredIcon, setHoveredIcon] = useState<string | null>(null);
    const t = useTranslations('home.techStack');

    // Speed configuration
    const speedConfig = {
        slow: 20,
        normal: 15,
        fast: 10
    };

    useEffect(() => {
        const checkMobile = () => {
            setIsMobile(window.innerWidth < 768);
        };

        checkMobile();
        window.addEventListener('resize', checkMobile);
        return () => window.removeEventListener('resize', checkMobile);
    }, []);

    const currentRadius = isMobile ? radiusMobile : radius;
    const circlePositions = generateCirclePositions(ICONS.length, currentRadius);

    return (
        <div className={`relative flex items-center justify-center ${className}`}>
            {/* Center logo/avatar */}
            <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-10 w-16 h-16 md:w-20 md:h-20 rounded-full bg-gradient-to-br from-primary to-primary/60 backdrop-blur-sm border border-white/10 flex items-center justify-center glow-neon">
                <span className="text-lg md:text-2xl font-bold text-primary-foreground">NB</span>
            </div>

            {/* Icon Circle Container */}
            <div className="relative w-full h-full min-h-[280px] md:min-h-[320px] flex items-center justify-center">
                {/* Rotating circle container */}
                <motion.div
                    className="relative w-full h-full flex items-center justify-center"
                    animate={{ rotate: 360 }}
                    transition={{
                        duration: speedConfig[speed],
                        repeat: Infinity,
                        ease: 'linear'
                    }}
                >
                    {/* Icons positioned in circle */}
                    {ICONS.map((icon, index) => {
                        const position = circlePositions[index];
                        const toolName = t(`tools.${icon.id}.name`);
                        const toolDescription = t(`tools.${icon.id}.description`);
                        const toolUrl = t(`tools.${icon.id}.url`);

                        return (
                            <motion.div
                                key={icon.id}
                                className="absolute cursor-pointer group"
                                style={{
                                    left: `calc(50% + ${position.x}px)`,
                                    top: `calc(50% + ${position.y}px)`,
                                    transform: 'translate(-50%, -50%)'
                                }}
                                initial={{ opacity: 0, scale: 0 }}
                                animate={{ opacity: 1, scale: 1 }}
                                transition={{
                                    duration: 0.8,
                                    delay: index * 0.1,
                                    type: 'spring',
                                    stiffness: 200
                                }}
                                whileHover={{ scale: 1.2 }}
                                onMouseEnter={() => setHoveredIcon(icon.id)}
                                onMouseLeave={() => setHoveredIcon(null)}
                                onClick={() => window.open(toolUrl, '_blank', 'noopener,noreferrer')}
                            >
                                {/* Icon container */}
                                <div className="w-12 h-12 md:w-14 md:h-14 rounded-xl bg-white/90 backdrop-blur-sm border border-border/60 flex items-center justify-center glow-neon group-hover:glow-neon-active transition-all duration-300">
                                    <Image
                                        src={icon.src}
                                        alt={toolName}
                                        width={28}
                                        height={28}
                                        className="w-7 h-7 md:w-8 md:h-8 object-contain"
                                    />
                                </div>

                                {/* Tooltip */}
                                {hoveredIcon === icon.id && (
                                    <motion.div
                                        initial={{ opacity: 0, y: 10 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        exit={{ opacity: 0, y: 10 }}
                                        className="absolute -top-16 left-1/2 -translate-x-1/2 bg-card/90 backdrop-blur-sm border border-border/60 rounded-lg px-3 py-2 text-xs whitespace-nowrap glow-neon z-20"
                                    >
                                        <div className="font-medium text-foreground">{toolName}</div>
                                        <div className="text-muted-foreground text-xs">{toolDescription}</div>
                                        <div className="absolute top-full left-1/2 -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-border/60" />
                                    </motion.div>
                                )}
                            </motion.div>
                        );
                    })}
                </motion.div>
            </div>
        </div>
    );
};

export default IconSphere;



================================================
FILE: src/components/sections/home/TechStackCloud.tsx
================================================
'use client';

import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';
import Image from 'next/image';

// ============================================================================
// CONFIGURATION - Easy to customize
// ============================================================================

const AUTO_ROTATION_SPEED = 0.005; // Radians per frame
const MOUSE_SENSITIVITY = 0.002;
const ICON_SIZE = 48;

// ============================================================================
// TECH STACK DATA - Using only icons that definitely exist
// ============================================================================

type TabType = 'all' | 'core' | 'automation' | 'cloud' | 'backend' | 'design';

interface TechItem {
    id: string;
    name: string;
    icon: string;
    color: string;
    category: Exclude<TabType, 'all'>;
}

const TECH_STACK: TechItem[] = [
    // 🧩 Core
    { id: 'react', name: 'React', icon: 'react.png', color: '#61DAFB', category: 'core' },
    { id: 'nextjs', name: 'Next.js', icon: 'nextjs.png', color: '#000000', category: 'core' },
    { id: 'typescript', name: 'TypeScript', icon: 'typescript.png', color: '#3178C6', category: 'core' },
    { id: 'javascript', name: 'JavaScript', icon: 'js.png', color: '#F7DF1E', category: 'core' },
    { id: 'tailwind', name: 'Tailwind CSS', icon: 'tailwindcss.png', color: '#06B6D4', category: 'core' },
    { id: 'nodejs', name: 'Node.js', icon: 'nodejs.png', color: '#339933', category: 'core' },
    // { id: 'python', name: 'Python', icon: 'python.png', color: '#3776AB', category: 'core' },
    // { id: 'postgresql', name: 'PostgreSQL', icon: 'postgresql.png', color: '#4169E1', category: 'core' },
    // { id: 'mongodb', name: 'MongoDB', icon: 'mongodb.png', color: '#47A248', category: 'core' },
    // { id: 'graphql', name: 'GraphQL', icon: 'graphql.png', color: '#E10098', category: 'core' },
    // { id: 'git', name: 'Git', icon: 'git.png', color: '#F05032', category: 'core' },
    // { id: 'redux', name: 'Redux', icon: 'redux.png', color: '#764ABC', category: 'core' },
    // { id: 'vite', name: 'Vite', icon: 'vitejs.png', color: '#646CFF', category: 'core' },
    // { id: 'webpack', name: 'Webpack', icon: 'webpack.png', color: '#8DD6F9', category: 'core' },

    // 🤖 Automation / AI
    { id: 'n8n', name: 'n8n', icon: 'n8n.png', color: '#F05A4B', category: 'automation' },
    { id: 'openai', name: 'OpenAI', icon: 'openai.png', color: '#10A37F', category: 'automation' },
    { id: 'huggingface', name: 'Hugging Face', icon: 'huggingface.png', color: '#FFD21E', category: 'automation' },
    // { id: 'langchain', name: 'LangChain', icon: 'langchain.png', color: '#2EC866', category: 'automation' },
    // { id: 'ollama', name: 'Ollama', icon: 'ollama.png', color: '#000000', category: 'automation' },
    // { id: 'replicate', name: 'Replicate', icon: 'replicate.png', color: '#00AEEF', category: 'automation' },
    // { id: 'vapi', name: 'Vapi', icon: 'vapi.png', color: '#8E24AA', category: 'automation' },
    // { id: 'cursor', name: 'Cursor AI', icon: 'cursor.png', color: '#0A84FF', category: 'automation' },
    // { id: 'chatgpt', name: 'ChatGPT', icon: 'chatgpt.png', color: '#10A37F', category: 'automation' },
    // { id: 'anthropic', name: 'Claude', icon: 'claude.png', color: '#FFD580', category: 'automation' },
    // { id: 'airflow', name: 'Apache Airflow', icon: 'airflow.png', color: '#017CEE', category: 'automation' },
    // { id: 'zapier', name: 'Zapier', icon: 'zapier.png', color: '#FF4A00', category: 'automation' },

    // ☁️ Cloud / DevOps
    { id: 'aws', name: 'AWS', icon: 'aws.png', color: '#FF9900', category: 'cloud' },
    { id: 'firebase', name: 'Firebase', icon: 'firebase.png', color: '#FFCA28', category: 'cloud' },
    { id: 'docker', name: 'Docker', icon: 'docker.png', color: '#2496ED', category: 'cloud' },
    { id: 'netlify', name: 'Netlify', icon: 'netlify.png', color: '#00AD9F', category: 'cloud' },
    { id: 'cloudflare', name: 'Cloudflare', icon: 'cloudflare.png', color: '#F38020', category: 'cloud' },
    { id: 'supabase', name: 'Supabase', icon: 'supabase.png', color: '#3ECF8E', category: 'cloud' },
    // { id: 'vercel', name: 'Vercel', icon: 'vercel.png', color: '#000000', category: 'cloud' },
    // { id: 'railway', name: 'Railway', icon: 'railway.png', color: '#0B0D0E', category: 'cloud' },
    // { id: 'digitalocean', name: 'DigitalOcean', icon: 'digitalocean.png', color: '#0080FF', category: 'cloud' },
    // { id: 'hetzner', name: 'Hetzner', icon: 'hetzner.png', color: '#D50C2D', category: 'cloud' },
    // { id: 'caddy', name: 'Caddy', icon: 'caddy.png', color: '#00BFA6', category: 'cloud' },
    // { id: 'traefik', name: 'Traefik', icon: 'traefik.png', color: '#24A1C1', category: 'cloud' },
    // { id: 'portainer', name: 'Portainer', icon: 'portainer.png', color: '#13BEF9', category: 'cloud' },
    // { id: 'kubernetes', name: 'Kubernetes', icon: 'kubernetes.png', color: '#326CE5', category: 'cloud' },

    // 🧠 Backend / API
    { id: 'fastapi', name: 'FastAPI', icon: 'fastapi.png', color: '#009688', category: 'backend' },
    { id: 'nestjs', name: 'NestJS', icon: 'nestjs.png', color: '#E0234E', category: 'backend' },
    { id: 'express', name: 'Express.js', icon: 'expressjs.png', color: '#000000', category: 'backend' },
    { id: 'prisma', name: 'Prisma', icon: 'prisma.png', color: '#2D3748', category: 'backend' },
    // { id: 'redis', name: 'Redis', icon: 'redis.png', color: '#DC382D', category: 'backend' },
    // { id: 'meilisearch', name: 'Meilisearch', icon: 'meilisearch.png', color: '#FF5CAA', category: 'backend' },
    // { id: 'strapi', name: 'Strapi', icon: 'strapi.png', color: '#2E7EEA', category: 'backend' },
    // { id: 'payload', name: 'Payload CMS', icon: 'payload.png', color: '#000000', category: 'backend' },
    // { id: 'medusajs', name: 'MedusaJS', icon: 'medusa.png', color: '#1C1C1C', category: 'backend' },
    // { id: 'shopify', name: 'Shopify', icon: 'shopify.png', color: '#95BF47', category: 'backend' },

    // 🎨 Design / Tools
    { id: 'figma', name: 'Figma', icon: 'figma.png', color: '#F24E1E', category: 'design' },
    { id: 'adobe', name: 'Adobe Creative Cloud', icon: 'adobe.png', color: '#FF0000', category: 'design' },
    { id: 'canva', name: 'Canva', icon: 'canva.png', color: '#00C4CC', category: 'design' },
    { id: 'framer', name: 'Framer', icon: 'framer.png', color: '#0055FF', category: 'design' },
    // { id: 'sketch', name: 'Sketch', icon: 'sketch.png', color: '#F7B500', category: 'design' },
    // { id: 'threejs', name: 'Three.js', icon: 'threejs.png', color: '#000000', category: 'design' },
    // { id: 'motion', name: 'Framer Motion', icon: 'motion.png', color: '#E32BFF', category: 'design' },
    // { id: 'illustrator', name: 'Adobe Illustrator', icon: 'illustrator.png', color: '#FF9A00', category: 'design' },
    // { id: 'photoshop', name: 'Adobe Photoshop', icon: 'ps.png', color: '#31A8FF', category: 'design' },
    // { id: 'aftereffects', name: 'After Effects', icon: 'ae.png', color: '#9999FF', category: 'design' },
];

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/**
 * Generate positions on a sphere using Fibonacci spiral
 */
const generateSpherePositions = (count: number, radius: number) => {
    const positions = [];
    const goldenRatio = (1 + Math.sqrt(5)) / 2;

    for (let i = 0; i < count; i++) {
        const theta = 2 * Math.PI * i / goldenRatio;
        const phi = Math.acos(1 - 2 * (i + 0.5) / count);

        const x = radius * Math.cos(theta) * Math.sin(phi);
        const y = radius * Math.sin(theta) * Math.sin(phi);
        const z = radius * Math.cos(phi);

        positions.push({ x, y, z });
    }

    return positions;
};

/**
 * Rotate a 3D point around X and Y axes
 */
const rotatePoint = (point: { x: number; y: number; z: number }, rotation: { x: number; y: number }) => {
    let { x, y, z } = point;

    // X-axis rotation
    const cosX = Math.cos(rotation.x);
    const sinX = Math.sin(rotation.x);
    const y1 = y * cosX - z * sinX;
    const z1 = y * sinX + z * cosX;
    y = y1;
    z = z1;

    // Y-axis rotation
    const cosY = Math.cos(rotation.y);
    const sinY = Math.sin(rotation.y);
    const x1 = x * cosY + z * sinY;
    const z2 = -x * sinY + z * cosY;
    x = x1;
    z = z2;

    return { x, y, z };
};

// ============================================================================
// MAIN COMPONENT
// ============================================================================

interface TechStackCloudProps {
    className?: string;
}

const TechStackCloud: React.FC<TechStackCloudProps> = ({ className = '' }) => {
    const t = useTranslations('home.techStack');
    const containerRef = useRef<HTMLDivElement>(null);
    const animationRef = useRef<number>();

    // State
    const [rotation, setRotation] = useState({ x: 0, y: 0 });
    const [isHovering, setIsHovering] = useState(false);
    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });
    const [hoveredIcon, setHoveredIcon] = useState<string | null>(null);
    const [activeTab, setActiveTab] = useState<TabType>('all');
    const [hasMounted, setHasMounted] = useState(false);

    // Tabs config
    const tabs: { id: TabType; label: string }[] = [
        { id: 'all', label: t('tabs.all') },
        { id: 'core', label: t('tabs.core') },
        { id: 'automation', label: t('tabs.automation') },
        { id: 'cloud', label: t('tabs.cloud') },
        { id: 'backend', label: t('tabs.backend') },
        { id: 'design', label: t('tabs.design') },
    ];

    // Filtered tech list based on active tab
    const filteredTech = useMemo(() => (
        activeTab === 'all' ? TECH_STACK : TECH_STACK.filter((tch) => tch.category === activeTab)
    ), [activeTab]);

    // Responsive sphere radius
    const sphereRadius = useMemo(() => {
        if (typeof window !== 'undefined') {
            return window.innerWidth < 640 ? 120 : 200; // 120 for mobile, 200 for desktop
        }
        return 200; // Default for SSR
    }, []);

    // Generate positions sized to the filtered list
    const positions = useMemo(() => (
        generateSpherePositions(filteredTech.length, sphereRadius)
    ), [filteredTech.length, sphereRadius]);

    // Animation loop
    const animate = useCallback(() => {
        setRotation(prev => {
            if (isHovering) {
                return {
                    x: mousePos.y * MOUSE_SENSITIVITY,
                    y: mousePos.x * MOUSE_SENSITIVITY,
                };
            } else {
                return {
                    x: prev.x + AUTO_ROTATION_SPEED,
                    y: prev.y + AUTO_ROTATION_SPEED * 0.7,
                };
            }
        });

        animationRef.current = requestAnimationFrame(animate);
    }, [isHovering, mousePos]);

    // Start animation
    useEffect(() => {
        // Ensure client-only rendering for dynamic positions to avoid hydration mismatches
        setHasMounted(true);
        animationRef.current = requestAnimationFrame(animate);
        return () => {
            if (animationRef.current) {
                cancelAnimationFrame(animationRef.current);
            }
        };
    }, [animate]);

    // Mouse handlers
    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
        if (!containerRef.current) return;

        const rect = containerRef.current.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;

        setMousePos({
            x: e.clientX - centerX,
            y: e.clientY - centerY,
        });
    }, []);

    const handleIconClick = useCallback((tech: TechItem) => {
        const url = t(`tools.${tech.id}.url`);
        if (url && url !== `tools.${tech.id}.url`) {
            window.open(url, '_blank', 'noopener,noreferrer');
        }
    }, [t]);

    return (
        <div className={`relative flex flex-col items-center justify-center ${className}`}>
            {/* Tabs */}
            <div className="mb-6 w-full max-w-full px-4">
                <div className="flex items-center justify-center bg-card/50 backdrop-blur-sm border border-border/60 rounded-xl p-1 overflow-x-auto scrollbar-hide">
                    {tabs.map((tab) => (
                        <button
                            key={tab.id}
                            onClick={() => setActiveTab(tab.id)}
                            className={`relative px-3 sm:px-4 py-2 text-xs sm:text-sm font-medium rounded-lg transition-all duration-300 whitespace-nowrap flex-shrink-0 ${activeTab === tab.id
                                ? 'text-primary bg-primary/10'
                                : 'text-muted-foreground hover:text-foreground hover:bg-card/50'
                                }`}
                        >
                            {activeTab === tab.id && (
                                <div className="absolute inset-0 bg-primary/10 rounded-lg" />
                            )}
                            <span className="relative z-10">{tab.label}</span>
                        </button>
                    ))}
                </div>
            </div>
            {/* 3D Container */}
            <div
                ref={containerRef}
                className="relative w-[320px] h-[320px] sm:w-[400px] sm:h-[400px] md:w-[500px] md:h-[500px] mx-auto cursor-grab active:cursor-grabbing"
                onMouseMove={handleMouseMove}
                onMouseEnter={() => setIsHovering(true)}
                onMouseLeave={() => {
                    setIsHovering(false);
                    setHoveredIcon(null);
                }}
                onTouchStart={(e) => {
                    e.preventDefault();
                    setIsHovering(true);
                }}
                onTouchMove={(e) => {
                    e.preventDefault();
                    if (e.touches.length === 1) {
                        const touch = e.touches[0];
                        if (containerRef.current) {
                            const rect = containerRef.current.getBoundingClientRect();
                            const centerX = rect.left + rect.width / 2;
                            const centerY = rect.top + rect.height / 2;

                            setMousePos({
                                x: touch.clientX - centerX,
                                y: touch.clientY - centerY,
                            });
                        }
                    }
                }}
                onTouchEnd={() => {
                    setIsHovering(false);
                    setHoveredIcon(null);
                }}
                style={{
                    perspective: '1000px',
                    transformStyle: 'preserve-3d'
                }}
            >
                {/* Background glow */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 rounded-full blur-3xl" />


                {/* Tech Icons - render only after mount to avoid SSR/CSR mismatch */}
                {hasMounted && filteredTech.map((tech, index) => {
                    const basePos = positions[index];
                    const rotatedPos = rotatePoint(basePos, rotation);

                    // Calculate depth effects
                    const depth = rotatedPos.z + sphereRadius;
                    const maxDepth = sphereRadius * 2;
                    const depthRatio = Math.max(0.1, depth / maxDepth);

                    const scale = 0.4 + 0.6 * depthRatio;
                    const opacity = Math.max(0.2, depthRatio);
                    const blur = Math.max(0, (1 - depthRatio) * 2);

                    const toolName = t(`tools.${tech.id}.name`) || tech.name;
                    const toolDescription = t(`tools.${tech.id}.description`) || `${tech.name} technology`;

                    return (
                        <div
                            key={tech.id}
                            className="absolute left-1/2 top-1/2"
                            style={{
                                // Keep full 3D positioning and depth scaling here so it isn't overridden
                                transform: `translate(-50%, -50%) translate3d(${rotatedPos.x}px, ${rotatedPos.y}px, ${rotatedPos.z}px) scale(${scale})`,
                                opacity: opacity,
                                filter: `blur(${blur}px)`,
                                zIndex: Math.round(depth),
                                willChange: 'transform, opacity',
                            }}
                        >
                            {/* Icon container with animation isolated to child so transforms don't clash */}
                            <motion.div
                                className="flex items-center justify-center w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 rounded-xl backdrop-blur-sm border border-border/40 glow-neon group cursor-pointer transition-all duration-300 hover:glow-neon-active active:scale-95"
                                style={{
                                    backgroundColor: `${tech.color}15`,
                                    borderColor: `${tech.color}40`,
                                    boxShadow: `0 0 20px ${tech.color}20`,
                                }}
                                initial={false}
                                animate={{ opacity: opacity }}
                                transition={{ duration: 0.25, ease: 'easeOut', type: 'tween' }}
                                whileHover={{ scale: 1.2 }}
                                whileTap={{ scale: 0.95 }}
                                onMouseEnter={() => setHoveredIcon(tech.id)}
                                onMouseLeave={() => setHoveredIcon(null)}
                                onTouchStart={() => setHoveredIcon(tech.id)}
                                onTouchEnd={() => setHoveredIcon(null)}
                                onClick={() => handleIconClick(tech)}
                            >
                                <Image
                                    src={`/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/${tech.icon}`}
                                    alt={toolName}
                                    width={32}
                                    height={32}
                                    className="w-8 h-8 sm:w-9 sm:h-9 md:w-10 md:h-10 object-contain transition-transform duration-200 group-hover:scale-110"
                                />
                            </motion.div>

                            {/* Tooltip */}
                            {hoveredIcon === tech.id && (
                                <motion.div
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    exit={{ opacity: 0, y: 10 }}
                                    className="absolute -top-16 sm:-top-20 left-1/2 -translate-x-1/2 bg-black/95 backdrop-blur-md border border-white/20 rounded-xl px-3 py-2 sm:px-4 sm:py-3 text-xs sm:text-sm whitespace-nowrap shadow-2xl z-50 max-w-[200px] sm:max-w-none"
                                    style={{
                                        backgroundColor: 'rgba(0, 0, 0, 0.95)',
                                        borderColor: `${tech.color}60`,
                                        boxShadow: `0 8px 32px rgba(0, 0, 0, 0.8), 0 0 20px ${tech.color}40`,
                                    }}
                                >
                                    <div className="font-bold text-white text-sm sm:text-base">{toolName}</div>
                                    <div className="text-gray-300 text-xs sm:text-sm mt-1">{toolDescription}</div>
                                    <div
                                        className="absolute top-full left-1/2 -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 sm:border-l-6 sm:border-r-6 sm:border-t-6 border-transparent"
                                        style={{ borderTopColor: 'rgba(0, 0, 0, 0.95)' }}
                                    />
                                </motion.div>
                            )}
                        </div>
                    );
                })}
            </div>

            {/* Instructions */}
            <div className="absolute -bottom-8 left-1/2 -translate-x-1/2 text-center px-4">
                <p className="text-xs text-muted-foreground/60">
                    {t('subtitle')}
                </p>
            </div>
        </div>
    );
};

export default TechStackCloud;



================================================
FILE: src/components/sections/home/TechStackShowcase.tsx
================================================
'use client';

import { useState } from 'react';
import { useTranslations } from 'next-intl';
import { motion } from 'framer-motion';
import TechStackCloud from 'components/sections/home/TechStackCloud';

// Marquee icons (most used)
const MARQUEE_ICONS = [
    { id: 'nextjs', icon: 'nextjs.png' },
    { id: 'react', icon: 'react.png' },
    { id: 'typescript', icon: 'typescript.png' },
    { id: 'tailwind', icon: 'tailwindcss.png' },
    { id: 'supabase', icon: 'supabase.png' },
    { id: 'n8n', icon: 'n8n.png' },
    { id: 'openai', icon: 'openai.png' },
    { id: 'docker', icon: 'docker.png' },
    { id: 'netlify', icon: 'netlify.png' },
    { id: 'cloudflare', icon: 'cloudflare.png' },
];

type TabType = 'all' | 'core' | 'automation' | 'cloud';

const TechStackShowcase = () => {
    const t = useTranslations('home.techStack');
    const [activeTab, setActiveTab] = useState<TabType>('all');

    const tabs = [
        { id: 'all' as TabType, label: t('tabs.all') },
        { id: 'core' as TabType, label: t('tabs.core') },
        { id: 'automation' as TabType, label: t('tabs.automation') },
        { id: 'cloud' as TabType, label: t('tabs.cloud') },
    ];

    return (
        <section className="relative py-20 px-6 lg:px-8 bg-background overflow-hidden">
            {/* Background gradient */}
            <div className="absolute inset-0 pointer-events-none">
                <div className="absolute inset-0 bg-gradient-to-b from-transparent via-primary/5 to-transparent" />
                <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/10 rounded-full blur-3xl" />
            </div>

            <div className="relative max-w-7xl mx-auto">
                {/* Header */}
                <motion.div
                    initial={{ opacity: 0, y: 30 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true, amount: 0.3 }}
                    transition={{ duration: 0.8, ease: 'easeOut' }}
                    className="text-center mb-16"
                >
                    <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6 glow-neon">
                        <span>{t('title')}</span>
                    </div>

                    <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
                        {t('title')}
                    </h2>

                    <p className="text-lg text-muted-foreground max-w-2xl mx-auto mb-6">
                        {t('subtitle')}
                    </p>

                    <p className="text-sm text-muted-foreground/80 max-w-xl mx-auto">
                        {t('description')}
                    </p>
                </motion.div>

                {/* Tabs */}
                {/* <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true, amount: 0.3 }}
                    transition={{ duration: 0.6, delay: 0.2 }}
                    className="flex justify-center mb-12"
                >
                    <div className="inline-flex items-center bg-card/50 backdrop-blur-sm border border-border/60 rounded-xl p-1">
                        {tabs.map((tab) => (
                            <button
                                key={tab.id}
                                onClick={() => setActiveTab(tab.id)}
                                className={`relative px-4 py-2 text-sm font-medium rounded-lg transition-all duration-300 ${activeTab === tab.id
                                    ? 'text-primary bg-primary/10'
                                    : 'text-muted-foreground hover:text-foreground hover:bg-card/50'
                                    }`}
                            >
                                {activeTab === tab.id && (
                                    <motion.div
                                        layoutId="activeTab"
                                        className="absolute inset-0 bg-primary/10 rounded-lg glow-neon"
                                        transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                                    />
                                )}
                                <span className="relative z-10">{tab.label}</span>
                            </button>
                        ))}
                    </div>
                </motion.div> */}

                {/* 3D Icon Cloud */}
                <motion.div
                    initial={{ opacity: 0, y: 30 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true, amount: 0.3 }}
                    transition={{ duration: 0.8, delay: 0.4 }}
                    className="mb-16"
                >
                    <TechStackCloud className="w-full h-[500px]" />
                </motion.div>
                {/* Marquee Strip */}
                <motion.div
                    initial={{ opacity: 0, y: 30 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true, amount: 0.3 }}
                    transition={{ duration: 0.8, delay: 0.6 }}
                    className="relative"
                >
                    <div className="text-center mb-8">
                        <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-4 glow-neon">
                            <span>{t('mostUsed')}</span>
                        </div>
                    </div>

                    <div className="relative overflow-hidden">
                        {/* Gradient edges */}
                        <div className="absolute left-0 top-0 bottom-0 w-20 bg-gradient-to-r from-background to-transparent z-10 pointer-events-none" />
                        <div className="absolute right-0 top-0 bottom-0 w-20 bg-gradient-to-l from-background to-transparent z-10 pointer-events-none" />

                        <div className="flex">
                            <motion.div
                                className="flex space-x-8"
                                animate={{ x: [0, -100 * MARQUEE_ICONS.length] }}
                                transition={{
                                    duration: 30,
                                    repeat: Infinity,
                                    ease: 'linear',
                                }}
                            >
                                {/* Duplicate for seamless loop */}
                                {[...MARQUEE_ICONS, ...MARQUEE_ICONS].map((icon, index) => {
                                    const toolUrl = t(`tools.${icon.id}.url`);

                                    return (
                                        <motion.div
                                            key={`marquee-${index}`}
                                            className="flex-shrink-0 w-16 h-16 rounded-xl backdrop-blur-sm border border-border/40 flex items-center justify-center glow-neon group cursor-pointer"
                                            whileHover={{ scale: 1.05, y: -2 }}
                                            onClick={() => window.open(toolUrl, '_blank')}
                                        >
                                            <img
                                                src={`/assets/icons/Tech-Stack-Icons-Design-Stack-Icons-dark-mode/${icon.icon}`}
                                                alt={t(`tools.${icon.id}.name`)}
                                                className="w-8 h-8 object-contain"
                                            />
                                        </motion.div>
                                    );
                                })}
                            </motion.div>
                        </div>
                    </div>
                </motion.div>
            </div>
        </section>
    );
};

export default TechStackShowcase;



================================================
FILE: src/components/sections/portfolio/FeaturedProject.tsx
================================================
'use client';

import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Icon from 'components/AppIcon';
import Image from 'components/AppImage';
import Button from 'components/ui/Button';

const FeaturedProject = ({ project, onViewDetails }) => {
  const t = useTranslations('portfolio');
  const tGlobal = useTranslations('global');
  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8 }}
      viewport={{ once: true }}
      className="relative bg-gradient-to-br from-card via-card to-muted/30 rounded-2xl overflow-hidden border border-border/50 mb-16"
    >
      <div className="absolute inset-0 bg-gradient-to-r from-primary/5 via-transparent to-primary/5 opacity-50" />
      <div className="relative grid lg:grid-cols-2 gap-8 p-8 lg:p-12">
        {/* Content */}
        <div className="space-y-6">
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2 px-3 py-1 bg-primary/20 text-primary text-sm font-medium rounded-full border border-primary/30">
              <Icon name="Star" size={16} />
              <span>{tGlobal('common.featuredProject')}</span>
            </div>
            <span className="px-3 py-1 bg-muted/50 text-muted-foreground text-sm rounded-full">
              {project?.type}
            </span>
          </div>

          <div>
            <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
              {project?.title}
            </h2>
            <p className="text-lg text-muted-foreground leading-relaxed">
              {project?.description}
            </p>
          </div>

          {/* Key Features */}
          <div className="space-y-3">
            <h3 className="text-lg font-space-grotesk font-bold text-foreground">
              {t('keyFeatures')}
            </h3>
            <div className="grid sm:grid-cols-2 gap-3">
              {Array.isArray(project?.features) && project?.features?.map((feature, index) => (
                <div key={index} className="flex items-center space-x-3">
                  <div className="w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center">
                    <Icon name="Check" size={14} className="text-primary" />
                  </div>
                  <span className="text-muted-foreground text-sm">{feature}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Technologies */}
          <div className="space-y-3">
            <h3 className="text-lg font-space-grotesk font-bold text-foreground">
              {t('technologiesUsed')}
            </h3>
            <div className="flex flex-wrap gap-2">
              {project?.technologies?.map((tech, index) => (
                <span
                  key={index}
                  className="px-3 py-1 bg-muted/50 text-foreground text-sm rounded-full border border-border/30"
                >
                  {tech}
                </span>
              ))}
            </div>
          </div>

          {/* Metrics */}
          <div className="grid grid-cols-3 gap-6 py-6 border-t border-b border-border/30">
            {project?.metrics?.map((metric, index) => (
              <div key={index} className="text-center">
                <div className="text-2xl font-bold text-primary mb-1">{metric?.value}</div>
                <div className="text-sm text-muted-foreground">{metric?.label}</div>
              </div>
            ))}
          </div>

          {/* Actions */}
          <div className="flex flex-wrap gap-4">
            <Button
              variant="default"
              iconName="ExternalLink"
              iconPosition="right"
              className="glow-neon"
              onClick={() => onViewDetails(project)}
            >
              {tGlobal('common.viewCaseStudy')}
            </Button>
            {project?.liveUrl && (
              <Button
                variant="outline"
                iconName="Globe"
                iconPosition="left"
              >
                {tGlobal('common.liveDemo')}
              </Button>
            )}
            {project?.githubUrl && (
              <Button
                variant="ghost"
                iconName="Github"
                iconPosition="left"
              >
                {t('sourceCode')}
              </Button>
            )}
          </div>
        </div>

        {/* Image */}
        <div className="relative">
          <div className="relative h-80 lg:h-full rounded-xl overflow-hidden">
            <Image
              src={project?.image}
              alt={project?.title}
              className="w-full h-full object-cover"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent" />
          </div>

          {/* Floating Elements */}
          <motion.div
            animate={{ y: [-10, 10, -10] }}
            transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
            className="absolute -top-4 -right-4 w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center backdrop-blur-sm border border-primary/30"
          >
            <Icon name="Zap" size={24} className="text-primary" />
          </motion.div>

          <motion.div
            animate={{ y: [10, -10, 10] }}
            transition={{ duration: 3, repeat: Infinity, ease: "easeInOut", delay: 1 }}
            className="absolute -bottom-4 -left-4 w-12 h-12 bg-warning/20 rounded-full flex items-center justify-center backdrop-blur-sm border border-warning/30"
          >
            <Icon name="Sparkles" size={16} className="text-warning" />
          </motion.div>
        </div>
      </div>
    </motion.div>
  );
};

export default FeaturedProject;



================================================
FILE: src/components/sections/portfolio/PortfolioSection.tsx
================================================
'use client';

import { useMemo, useState } from 'react';
import { motion } from 'framer-motion';
import { useLocale, useTranslations } from 'next-intl';
import Header from 'components/ui/Header';
import Icon from 'components/AppIcon';
import Button from 'components/ui/Button';
import FeaturedProject from './FeaturedProject';
import ProjectCard from './ProjectCard';
import ProjectFilter from './ProjectFilter';
import ProjectModal from './ProjectModal';


const PortfolioSection = () => {
  const [activeFilter, setActiveFilter] = useState('all');
  const [selectedProject, setSelectedProject] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const locale = useLocale();
  const t = useTranslations('portfolio');
  const tGlobal = useTranslations('global');

  // Helper function to safely get array translations using indexed notation
  const getArrayTranslation = (key: string): string[] => {
    const array: string[] = [];
    let index = 0;
    // Iterate up to 6 items (typical feature list length)
    // Note: next-intl will log missing key errors to console even when caught
    while (index < 6) {
      try {
        // @ts-ignore - Suppress type error for dynamic key
        const value = t(`${key}.${index}` as any);
        array.push(value);
        index++;
      } catch (error) {
        // Stop iteration when key doesn't exist
        break;
      }
    }
    return array;
  };

  // Helper function to get process steps using indexed notation
  const getProcessSteps = (key: string): Array<{ title: string, description: string }> => {
    const array: Array<{ title: string, description: string }> = [];
    let index = 0;
    // Iterate up to 4 items (most projects have exactly 4 process steps)
    // Note: next-intl will log missing key errors to console even when caught
    while (index < 4) {
      try {
        // @ts-ignore - Suppress type error for dynamic key
        const title = t(`${key}.${index}.title` as any);
        // @ts-ignore - Suppress type error for dynamic key
        const description = t(`${key}.${index}.description` as any);
        array.push({ title, description });
        index++;
      } catch (error) {
        // Stop iteration when key doesn't exist
        break;
      }
    }
    return array;
  };

  // Helper function to get testimonial object using dot notation
  const getTestimonial = (key: string): { quote: string, author: string, role: string } => {
    try {
      // @ts-ignore - Suppress type error for dynamic key
      const quote = t(`${key}.quote` as any);
      // @ts-ignore - Suppress type error for dynamic key
      const author = t(`${key}.author` as any);
      // @ts-ignore - Suppress type error for dynamic key
      const role = t(`${key}.role` as any);
      return { quote, author, role };
    } catch (error) {
      return { quote: '', author: '', role: '' };
    }
  };

  // Project data from translations
  const projects = useMemo(() => ([
    {
      id: 1,
      title: t('projects.aiaa.title'),
      type: t('projects.aiaa.type'),
      description: t('projects.aiaa.description'),
      fullDescription: t('projects.aiaa.fullDescription'),
      image: "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=800&h=600&fit=crop",
      technologies: ["React", "Node.js", "Python", "TensorFlow", "MongoDB", "AWS"],
      techIcons: {
        "React": "Code",
        "Node.js": "Server",
        "Python": "Bot",
        "TensorFlow": "Brain",
        "MongoDB": "Database",
        "AWS": "Cloud"
      },
      year: "2024",
      client: t('projects.aiaa.client'),
      industry: t('projects.aiaa.industry'),
      duration: t('projects.aiaa.duration'),
      featured: true,
      metrics: [
        { label: t('projects.aiaa.metrics.users.label'), value: t('projects.aiaa.metrics.users.value') },
        { label: t('projects.aiaa.metrics.automation.label'), value: t('projects.aiaa.metrics.automation.value') },
        { label: t('projects.aiaa.metrics.timeSaved.label'), value: t('projects.aiaa.metrics.timeSaved.value') }
      ],
      features: getArrayTranslation('projects.aiaa.features'),
      process: getProcessSteps('projects.aiaa.process'),
      testimonial: getTestimonial('projects.aiaa.testimonial'),
      liveUrl: "https://aiaa.dev",
      githubUrl: "https://github.com/nickybruno/aiaa"
    },
    {
      id: 2,
      title: t('projects.montrealTechHub.title'),
      type: t('projects.montrealTechHub.type'),
      description: t('projects.montrealTechHub.description'),
      fullDescription: t('projects.montrealTechHub.fullDescription'),
      image: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=800&h=600&fit=crop",
      technologies: ["Next.js", "TypeScript", "Prisma", "PostgreSQL", "Tailwind"],
      techIcons: {
        "Next.js": "Code",
        "TypeScript": "FileText",
        "Prisma": "Database",
        "PostgreSQL": "Server",
        "Tailwind": "Palette"
      },
      year: "2024",
      client: t('projects.montrealTechHub.client'),
      industry: t('projects.montrealTechHub.industry'),
      duration: t('projects.montrealTechHub.duration'),
      featured: false,
      metrics: [
        { label: t('projects.montrealTechHub.metrics.members.label'), value: t('projects.montrealTechHub.metrics.members.value') },
        { label: t('projects.montrealTechHub.metrics.events.label'), value: t('projects.montrealTechHub.metrics.events.value') },
        { label: t('projects.montrealTechHub.metrics.engagement.label'), value: t('projects.montrealTechHub.metrics.engagement.value') }
      ],
      features: getArrayTranslation('projects.montrealTechHub.features'),
      process: getProcessSteps('projects.montrealTechHub.process'),
      testimonial: getTestimonial('projects.montrealTechHub.testimonial'),
      liveUrl: "https://montrealtechhub.com"
    },
    {
      id: 3,
      title: t('projects.ecoTrack.title'),
      type: t('projects.ecoTrack.type'),
      description: t('projects.ecoTrack.description'),
      fullDescription: t('projects.ecoTrack.fullDescription'),
      image: "https://images.pexels.com/photos/590022/pexels-photo-590022.jpeg?w=800&h=600&fit=crop",
      technologies: ["Vue.js", "D3.js", "Python", "FastAPI", "InfluxDB"],
      techIcons: {
        "Vue.js": "Code",
        "D3.js": "BarChart",
        "Python": "Bot",
        "FastAPI": "Zap",
        "InfluxDB": "Database"
      },
      year: "2023",
      client: t('projects.ecoTrack.client'),
      industry: t('projects.ecoTrack.industry'),
      duration: t('projects.ecoTrack.duration'),
      featured: false,
      metrics: [
        { label: t('projects.ecoTrack.metrics.co2Reduced.label'), value: t('projects.ecoTrack.metrics.co2Reduced.value') },
        { label: t('projects.ecoTrack.metrics.companies.label'), value: t('projects.ecoTrack.metrics.companies.value') },
        { label: t('projects.ecoTrack.metrics.dataPoints.label'), value: t('projects.ecoTrack.metrics.dataPoints.value') }
      ],
      features: getArrayTranslation('projects.ecoTrack.features'),
      process: getProcessSteps('projects.ecoTrack.process'),
      testimonial: getTestimonial('projects.ecoTrack.testimonial')
    },
    {
      id: 4,
      title: t('projects.financeFlow.title'),
      type: t('projects.financeFlow.type'),
      description: t('projects.financeFlow.description'),
      fullDescription: t('projects.financeFlow.fullDescription'),
      image: "https://images.pixabay.com/photo/2016/11/27/21/42/stock-1863880_1280.jpg?w=800&h=600&fit=crop",
      technologies: ["React Native", "Redux", "Node.js", "PostgreSQL", "Stripe"],
      techIcons: {
        "React Native": "Smartphone",
        "Redux": "RefreshCw",
        "Node.js": "Server",
        "PostgreSQL": "Database",
        "Stripe": "CreditCard"
      },
      year: "2023",
      client: t('projects.financeFlow.client'),
      industry: t('projects.financeFlow.industry'),
      duration: t('projects.financeFlow.duration'),
      featured: false,
      metrics: [
        { label: t('projects.financeFlow.metrics.downloads.label'), value: t('projects.financeFlow.metrics.downloads.value') },
        { label: t('projects.financeFlow.metrics.savings.label'), value: t('projects.financeFlow.metrics.savings.value') },
        { label: t('projects.financeFlow.metrics.rating.label'), value: t('projects.financeFlow.metrics.rating.value') }
      ],
      features: getArrayTranslation('projects.financeFlow.features'),
      process: getProcessSteps('projects.financeFlow.process'),
      testimonial: getTestimonial('projects.financeFlow.testimonial')
    },
    {
      id: 5,
      title: t('projects.creativeStudio.title'),
      type: t('projects.creativeStudio.type'),
      description: t('projects.creativeStudio.description'),
      fullDescription: t('projects.creativeStudio.fullDescription'),
      image: "https://images.unsplash.com/photo-1558655146-d09347e92766?w=800&h=600&fit=crop",
      technologies: ["React", "WebGL", "Socket.io", "Redis", "AWS S3"],
      techIcons: {
        "React": "Code",
        "WebGL": "Monitor",
        "Socket.io": "Wifi",
        "Redis": "Zap",
        "AWS S3": "Cloud"
      },
      year: "2024",
      client: t('projects.creativeStudio.client'),
      industry: t('projects.creativeStudio.industry'),
      duration: t('projects.creativeStudio.duration'),
      featured: false,
      metrics: [
        { label: t('projects.creativeStudio.metrics.teams.label'), value: t('projects.creativeStudio.metrics.teams.value') },
        { label: t('projects.creativeStudio.metrics.projects.label'), value: t('projects.creativeStudio.metrics.projects.value') },
        { label: t('projects.creativeStudio.metrics.efficiency.label'), value: t('projects.creativeStudio.metrics.efficiency.value') }
      ],
      features: getArrayTranslation('projects.creativeStudio.features'),
      process: getProcessSteps('projects.creativeStudio.process'),
      testimonial: getTestimonial('projects.creativeStudio.testimonial')
    },
    {
      id: 6,
      title: t('projects.healthConnect.title'),
      type: t('projects.healthConnect.type'),
      description: t('projects.healthConnect.description'),
      fullDescription: t('projects.healthConnect.fullDescription'),
      image: "https://images.pexels.com/photos/4386466/pexels-photo-4386466.jpeg?w=800&h=600&fit=crop",
      technologies: ["Angular", "WebRTC", "Express.js", "MongoDB", "Stripe"],
      techIcons: {
        "Angular": "Code",
        "WebRTC": "Video",
        "Express.js": "Server",
        "MongoDB": "Database",
        "Stripe": "CreditCard"
      },
      year: "2023",
      client: t('projects.healthConnect.client'),
      industry: t('projects.healthConnect.industry'),
      duration: t('projects.healthConnect.duration'),
      featured: false,
      metrics: [
        { label: t('projects.healthConnect.metrics.consultations.label'), value: t('projects.healthConnect.metrics.consultations.value') },
        { label: t('projects.healthConnect.metrics.providers.label'), value: t('projects.healthConnect.metrics.providers.value') },
        { label: t('projects.healthConnect.metrics.satisfaction.label'), value: t('projects.healthConnect.metrics.satisfaction.value') }
      ],
      features: getArrayTranslation('projects.healthConnect.features'),
      process: getProcessSteps('projects.healthConnect.process'),
      testimonial: getTestimonial('projects.healthConnect.testimonial')
    }
  ]), [t]);

  // Filter configuration
  const filters = [
    { id: 'all', label: t('sections.filters.all'), count: projects?.length },
    { id: 'AI Platform', label: t('sections.filters.ai'), count: projects?.filter(p => p?.type === 'AI Platform')?.length },
    { id: 'Web Platform', label: t('sections.filters.web'), count: projects?.filter(p => p?.type === 'Web Platform')?.length },
    { id: 'Mobile App', label: t('sections.filters.mobile'), count: projects?.filter(p => p?.type === 'Mobile App')?.length },
    { id: 'Design Tool', label: t('sections.filters.design'), count: projects?.filter(p => p?.type === 'Design Tool')?.length },
    { id: 'Healthcare', label: t('sections.filters.healthcare'), count: projects?.filter(p => p?.type === 'Healthcare')?.length }
  ];

  // Filtered projects
  const filteredProjects = useMemo(() => {
    if (activeFilter === 'all') return projects;
    return projects?.filter(project => project?.type === activeFilter);
  }, [activeFilter, projects]);

  // Featured project
  const featuredProject = projects?.find(p => p?.featured);

  const handleViewDetails = (project) => {
    setSelectedProject(project);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setTimeout(() => setSelectedProject(null), 300);
  };

  return (
    <div className="min-h-screen bg-background">
      <main className="pt-16">
        {/* Hero Section */}
        <section className="relative py-20 lg:py-32 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5" />

          <div className="relative max-w-7xl mx-auto px-6 lg:px-8">
            <div className="text-center max-w-4xl mx-auto">
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8 }}
                className="flex items-center justify-center space-x-3 mb-6"
              >
                <div className="w-12 h-12 bg-primary/20 rounded-xl flex items-center justify-center">
                  <Icon name="FolderOpen" size={24} className="text-primary" />
                </div>
                <span className="px-4 py-2 bg-primary/10 text-primary text-sm font-medium rounded-full border border-primary/30">
                  {t('sections.hero.badge')}
                </span>
              </motion.div>

              <motion.h1
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.1 }}
                className="text-4xl lg:text-6xl font-space-grotesk font-bold text-foreground mb-6"
              >
                {t('sections.hero.title')}
                <span className="block text-primary">{t('sections.hero.titleHighlight')}</span>
              </motion.h1>

              <motion.p
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
                className="text-xl text-muted-foreground leading-relaxed mb-8"
              >
                {t('sections.hero.description')}
              </motion.p>

              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.3 }}
                className="flex flex-wrap items-center justify-center gap-8 text-sm text-muted-foreground"
              >
                <div className="flex items-center space-x-2">
                  <Icon name="Code" size={16} className="text-primary" />
                  <span>{t('sections.hero.stats.projects')}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Icon name="Users" size={16} className="text-primary" />
                  <span>{t('sections.hero.stats.clients')}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Icon name="Award" size={16} className="text-primary" />
                  <span>{t('sections.hero.stats.recognition')}</span>
                </div>
              </motion.div>
            </div>
          </div>

          {/* Floating Elements */}
          <motion.div
            animate={{ y: [-20, 20, -20], rotate: [0, 180, 360] }}
            transition={{ duration: 8, repeat: Infinity, ease: "easeInOut" }}
            className="absolute top-20 left-10 w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center backdrop-blur-sm"
          >
            <Icon name="Sparkles" size={24} className="text-primary" />
          </motion.div>

          <motion.div
            animate={{ y: [20, -20, 20], rotate: [360, 180, 0] }}
            transition={{ duration: 6, repeat: Infinity, ease: "easeInOut", delay: 2 }}
            className="absolute bottom-20 right-10 w-12 h-12 bg-warning/10 rounded-full flex items-center justify-center backdrop-blur-sm"
          >
            <Icon name="Zap" size={20} className="text-warning" />
          </motion.div>
        </section>

        {/* Featured Project */}
        {featuredProject && (
          <section className="py-16">
            <div className="max-w-7xl mx-auto px-6 lg:px-8">
              <FeaturedProject
                project={featuredProject}
                onViewDetails={handleViewDetails}
              />
            </div>
          </section>
        )}

        {/* Projects Grid */}
        <section className="py-16">
          <div className="max-w-7xl mx-auto px-6 lg:px-8">
            <div className="text-center mb-12">
              <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
                {t('sections.projects.title')}
              </h2>
              <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
                {t('sections.projects.description')}
              </p>
            </div>

            {/* Filter Buttons */}
            <ProjectFilter
              filters={filters}
              activeFilter={activeFilter}
              onFilterChange={setActiveFilter}
            />

            {/* Projects Grid */}
            <motion.div
              layout
              className="grid md:grid-cols-2 lg:grid-cols-3 gap-8"
            >
              {filteredProjects?.filter(project => !project?.featured)?.map((project, index) => (
                <ProjectCard
                  key={project?.id}
                  project={project}
                  index={index}
                  onViewDetails={handleViewDetails}
                />
              ))}
            </motion.div>

            {/* Empty State */}
            {filteredProjects?.filter(p => !p?.featured)?.length === 0 && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-center py-16"
              >
                <div className="w-16 h-16 bg-muted/50 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Icon name="Search" size={24} className="text-muted-foreground" />
                </div>
                <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-2">
                  {t('sections.projects.emptyState.title')}
                </h3>
                <p className="text-muted-foreground">
                  {t('sections.projects.emptyState.description')}
                </p>
              </motion.div>
            )}
          </div>
        </section>

        {/* Call to Action */}
        <section className="py-20 bg-gradient-to-br from-muted/30 via-transparent to-muted/30">
          <div className="max-w-4xl mx-auto px-6 lg:px-8 text-center">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
            >
              <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-6">
                {t('sections.cta.title')}
              </h2>
              <p className="text-lg text-muted-foreground mb-8 leading-relaxed">
                {t('sections.cta.description')}
              </p>
              <div className="flex flex-wrap items-center justify-center gap-4">
                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                  <Button
                    variant="default"
                    size="lg"
                    iconName="MessageCircle"
                    iconPosition="left"
                    className="glow-neon hover:glow-neon-active"
                  >
                    {t('sections.cta.buttons.startProject')}
                  </Button>
                </motion.div>
                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                  <Button
                    variant="outline"
                    size="lg"
                    iconName="Download"
                    iconPosition="left"
                  >
                    {t('sections.cta.buttons.downloadPortfolio')}
                  </Button>
                </motion.div>
              </div>
            </motion.div>
          </div>
        </section>
      </main>
      {/* Project Modal */}
      <ProjectModal
        project={selectedProject}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
      />
    </div>
  );
};

export default PortfolioSection;



================================================
FILE: src/components/sections/portfolio/ProjectCard.tsx
================================================
'use client';

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Icon from 'components/AppIcon';
import Image from 'components/AppImage';
import Button from 'components/ui/Button';

const ProjectCard = ({ project, index, onViewDetails }) => {
  const t = useTranslations('portfolio');
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6, delay: index * 0.1 }}
      viewport={{ once: true }}
      className="group relative"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="relative bg-card rounded-xl overflow-hidden border border-border/50 transition-smooth hover:border-primary/30 magnetic-hover">
        {/* Project Image */}
        <div className="relative h-64 overflow-hidden">
          <Image
            src={project?.image}
            alt={project?.title}
            className="w-full h-full object-cover transition-smooth group-hover:scale-105"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />

          {/* Project Type Badge */}
          <div className="absolute top-4 left-4">
            <span className="px-3 py-1 bg-primary/20 text-primary text-xs font-medium rounded-full backdrop-blur-sm border border-primary/30">
              {project?.type}
            </span>
          </div>

          {/* Featured Badge */}
          {project?.featured && (
            <div className="absolute top-4 right-4">
              <div className="flex items-center space-x-1 px-2 py-1 bg-warning/20 text-warning text-xs font-medium rounded-full backdrop-blur-sm border border-warning/30">
                <Icon name="Star" size={12} />
                <span>{t('featured')}</span>
              </div>
            </div>
          )}

          {/* Hover Overlay */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: isHovered ? 1 : 0 }}
            className="absolute inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center"
          >
            <Button
              variant="default"
              size="sm"
              iconName="ExternalLink"
              iconPosition="right"
              className="glow-neon"
              onClick={() => onViewDetails(project)}
            >
              {t('viewDetails')}
            </Button>
          </motion.div>
        </div>

        {/* Project Content */}
        <div className="p-6">
          <div className="flex items-start justify-between mb-3">
            <h3 className="text-xl font-space-grotesk font-bold text-foreground group-hover:text-primary transition-smooth">
              {project?.title}
            </h3>
            <div className="flex items-center space-x-2">
              {project?.technologies?.slice(0, 3)?.map((tech, idx) => (
                <div
                  key={idx}
                  className="w-6 h-6 bg-muted rounded-full flex items-center justify-center"
                  title={tech}
                >
                  <Icon name={project?.techIcons?.[tech]} size={14} className="text-muted-foreground" />
                </div>
              ))}
              {project?.technologies?.length > 3 && (
                <span className="text-xs text-muted-foreground">+{project?.technologies?.length - 3}</span>
              )}
            </div>
          </div>

          <p className="text-muted-foreground text-sm mb-4 line-clamp-2">
            {project?.description}
          </p>

          {/* Project Stats */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-4">
              {project?.metrics?.map((metric, idx) => (
                <div key={idx} className="text-center">
                  <div className="text-lg font-bold text-primary">{metric?.value}</div>
                  <div className="text-xs text-muted-foreground">{metric?.label}</div>
                </div>
              ))}
            </div>
            <div className="text-xs text-muted-foreground">
              {project?.year}
            </div>
          </div>

          {/* Client Logo */}
          {project?.client && (
            <div className="flex items-center justify-between pt-4 border-t border-border/30">
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-muted rounded-lg flex items-center justify-center">
                  <span className="text-xs font-bold text-muted-foreground">
                    {project?.client?.charAt(0)}
                  </span>
                </div>
                <span className="text-sm text-muted-foreground">{project?.client}</span>
              </div>
              <Icon name="ArrowUpRight" size={16} className="text-muted-foreground group-hover:text-primary transition-smooth" />
            </div>
          )}
        </div>
      </div>
    </motion.div>
  );
};

export default ProjectCard;



================================================
FILE: src/components/sections/portfolio/ProjectFilter.tsx
================================================
'use client';

import { motion } from 'framer-motion';
import Button from 'components/ui/Button';

const ProjectFilter = ({ filters, activeFilter, onFilterChange }) => {
  return (
    <div className="flex flex-wrap items-center justify-center gap-3 mb-12">
      {filters?.map((filter, index) => (
        <motion.div
          key={filter?.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: index * 0.1 }}
        >
          <Button
            variant={activeFilter === filter?.id ? "default" : "outline"}
            size="sm"
            onClick={() => onFilterChange(filter?.id)}
            className={`relative transition-smooth ${
              activeFilter === filter?.id 
                ? 'glow-neon' :'hover:border-primary/50 hover:text-primary'
            }`}
          >
            {filter?.label}
            {filter?.count && (
              <span className="ml-2 text-xs opacity-70">
                ({filter?.count})
              </span>
            )}
          </Button>
        </motion.div>
      ))}
    </div>
  );
};

export default ProjectFilter;



================================================
FILE: src/components/sections/portfolio/ProjectModal.tsx
================================================
'use client';

import { useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Icon from 'components/AppIcon';
import Image from 'components/AppImage';
import Button from 'components/ui/Button';

const ProjectModal = ({ project, isOpen, onClose }) => {
  const t = useTranslations('portfolio');
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  if (!project) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50"
            onClick={onClose}
          />

          {/* Modal */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 50 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 50 }}
            className="fixed inset-4 md:inset-8 lg:inset-16 bg-background rounded-2xl border border-border/50 z-50 overflow-hidden"
          >
            <div className="h-full flex flex-col">
              {/* Header */}
              <div className="flex items-center justify-between p-6 border-b border-border/30">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-primary/20 rounded-xl flex items-center justify-center">
                    <Icon name="Folder" size={24} className="text-primary" />
                  </div>
                  <div>
                    <h2 className="text-2xl font-space-grotesk font-bold text-foreground">
                      {project?.title}
                    </h2>
                    <p className="text-muted-foreground">{project?.type} • {project?.year}</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onClose}
                  className="hover:bg-muted/50"
                >
                  <Icon name="X" size={24} />
                </Button>
              </div>

              {/* Content */}
              <div className="flex-1 overflow-y-auto">
                <div className="p-6 space-y-8">
                  {/* Project Image */}
                  <div className="relative h-80 rounded-xl overflow-hidden">
                    <Image
                      src={project?.image}
                      alt={project?.title}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
                  </div>

                  <div className="grid lg:grid-cols-3 gap-8">
                    {/* Main Content */}
                    <div className="lg:col-span-2 space-y-6">
                      <div>
                        <h3 className="text-lg font-space-grotesk font-bold text-foreground mb-3">
                          {t('projectOverview')}
                        </h3>
                        <p className="text-muted-foreground leading-relaxed">
                          {project?.fullDescription}
                        </p>
                      </div>

                      <div>
                        <h3 className="text-lg font-space-grotesk font-bold text-foreground mb-3">
                          {t('howItWasMade')}
                        </h3>
                        <div className="space-y-4">
                          {project?.process?.map((step, index) => (
                            <div key={index} className="flex space-x-4">
                              <div className="w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                                <span className="text-primary text-sm font-bold">{index + 1}</span>
                              </div>
                              <div>
                                <h4 className="font-medium text-foreground mb-1">{step?.title}</h4>
                                <p className="text-muted-foreground text-sm">{step?.description}</p>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Testimonial */}
                      {project?.testimonial && (
                        <div className="bg-muted/30 rounded-xl p-6 border border-border/30">
                          <div className="flex items-start space-x-4">
                            <Icon name="Quote" size={24} className="text-primary flex-shrink-0 mt-1" />
                            <div>
                              <p className="text-foreground italic mb-3">
                                "{project?.testimonial?.quote}"
                              </p>
                              <div className="flex items-center space-x-3">
                                <div className="w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center">
                                  <span className="text-primary text-sm font-bold">
                                    {project?.testimonial?.author?.charAt(0)}
                                  </span>
                                </div>
                                <div>
                                  <div className="font-medium text-foreground">
                                    {project?.testimonial?.author}
                                  </div>
                                  <div className="text-sm text-muted-foreground">
                                    {project?.testimonial?.role}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Sidebar */}
                    <div className="space-y-6">
                      {/* Project Details */}
                      <div className="bg-muted/30 rounded-xl p-6 border border-border/30">
                        <h3 className="text-lg font-space-grotesk font-bold text-foreground mb-4">
                          {t('projectDetails')}
                        </h3>
                        <div className="space-y-4">
                          <div>
                            <div className="text-sm text-muted-foreground mb-1">{t('client')}</div>
                            <div className="text-foreground font-medium">{project?.client}</div>
                          </div>
                          <div>
                            <div className="text-sm text-muted-foreground mb-1">{t('duration')}</div>
                            <div className="text-foreground font-medium">{project?.duration}</div>
                          </div>
                          <div>
                            <div className="text-sm text-muted-foreground mb-1">{t('industry')}</div>
                            <div className="text-foreground font-medium">{project?.industry}</div>
                          </div>
                        </div>
                      </div>

                      {/* Technologies */}
                      <div className="bg-muted/30 rounded-xl p-6 border border-border/30">
                        <h3 className="text-lg font-space-grotesk font-bold text-foreground mb-4">
                          {t('technologiesUsed')}
                        </h3>
                        <div className="flex flex-wrap gap-2">
                          {project?.technologies?.map((tech, index) => (
                            <span
                              key={index}
                              className="px-3 py-1 bg-primary/20 text-primary text-sm rounded-full border border-primary/30"
                            >
                              {tech}
                            </span>
                          ))}
                        </div>
                      </div>

                      {/* Results */}
                      <div className="bg-muted/30 rounded-xl p-6 border border-border/30">
                        <h3 className="text-lg font-space-grotesk font-bold text-foreground mb-4">
                          {t('resultsImpact')}
                        </h3>
                        <div className="space-y-3">
                          {project?.metrics?.map((metric, index) => (
                            <div key={index} className="flex items-center justify-between">
                              <span className="text-muted-foreground text-sm">{metric?.label}</span>
                              <span className="text-primary font-bold">{metric?.value}</span>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Actions */}
                      <div className="space-y-3">
                        {project?.liveUrl && (
                          <Button
                            variant="default"
                            fullWidth
                            iconName="ExternalLink"
                            iconPosition="right"
                            className="glow-neon"
                          >
                            {t('viewLiveSite')}
                          </Button>
                        )}
                        {project?.githubUrl && (
                          <Button
                            variant="outline"
                            fullWidth
                            iconName="Github"
                            iconPosition="left"
                          >
                            {t('viewCode')}
                          </Button>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};

export default ProjectModal;



================================================
FILE: src/components/sections/services/CapabilityStats.tsx
================================================
'use client';

import React from 'react';
import { motion } from 'framer-motion';
import Icon from 'components/AppIcon';
import { useTranslations } from 'next-intl';

const CapabilityStats = () => {
  const t = useTranslations('services.stats');

  const stats = [
    {
      icon: "Calendar",
      value: t('experience.value'),
      label: t('experience.label'),
      description: t('experience.description')
    },
    {
      icon: "Briefcase",
      value: t('projects.value'),
      label: t('projects.label'),
      description: t('projects.description')
    },
    {
      icon: "Users",
      value: t('clients.value'),
      label: t('clients.label'),
      description: t('clients.description')
    },
    {
      icon: "Zap",
      value: t('retention.value'),
      label: t('retention.label'),
      description: t('retention.description')
    }
  ];

  return (
    <div className="grid grid-cols-2 lg:grid-cols-4 gap-6">
      {stats?.map((stat, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, scale: 0.9 }}
          whileInView={{ opacity: 1, scale: 1 }}
          transition={{
            duration: 0.5,
            delay: index * 0.1,
            ease: [0.4, 0, 0.2, 1]
          }}
          viewport={{ once: true }}
          className="group text-center"
        >
          <div className="relative mb-4">
            <div className="w-12 h-12 mx-auto bg-primary/10 rounded-lg flex items-center justify-center group-hover:bg-primary/20 transition-all duration-300 group-hover:glow-neon">
              <Icon
                name={stat?.icon}
                size={24}
                className="text-primary group-hover:scale-110 transition-transform duration-300"
              />
            </div>
          </div>

          <div className="space-y-2">
            <div className="text-3xl font-space-grotesk font-bold text-foreground group-hover:text-primary transition-colors duration-300">
              {stat?.value}
            </div>
            <div className="text-sm font-medium text-muted-foreground">
              {stat?.label}
            </div>
            <p className="text-xs text-muted-foreground/80 leading-relaxed hidden lg:block">
              {stat?.description}
            </p>
          </div>
        </motion.div>
      ))}
    </div>
  );
};

export default CapabilityStats;



================================================
FILE: src/components/sections/services/ProcessTimeline.tsx
================================================
'use client';

import React from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Icon from 'components/AppIcon';

const ProcessTimeline = () => {
  const t = useTranslations('services.sections.process');

  const processSteps = [
    {
      phase: t('steps.discovery.phase'),
      icon: "Search",
      title: t('steps.discovery.title'),
      description: t('steps.discovery.description'),
      duration: t('steps.discovery.duration'),
      deliverables: [t('steps.discovery.deliverables.0'), t('steps.discovery.deliverables.1'), t('steps.discovery.deliverables.2'), t('steps.discovery.deliverables.3')]
    },
    {
      phase: t('steps.design.phase'),
      icon: "Palette",
      title: t('steps.design.title'),
      description: t('steps.design.description'),
      duration: t('steps.design.duration'),
      deliverables: [t('steps.design.deliverables.0'), t('steps.design.deliverables.1'), t('steps.design.deliverables.2'), t('steps.design.deliverables.3')]
    },
    {
      phase: t('steps.development.phase'),
      icon: "Code",
      title: t('steps.development.title'),
      description: t('steps.development.description'),
      duration: t('steps.development.duration'),
      deliverables: [t('steps.development.deliverables.0'), t('steps.development.deliverables.1'), t('steps.development.deliverables.2'), t('steps.development.deliverables.3')]
    },
    {
      phase: t('steps.aiIntegration.phase'),
      icon: "Brain",
      title: t('steps.aiIntegration.title'),
      description: t('steps.aiIntegration.description'),
      duration: t('steps.aiIntegration.duration'),
      deliverables: [t('steps.aiIntegration.deliverables.0'), t('steps.aiIntegration.deliverables.1'), t('steps.aiIntegration.deliverables.2'), t('steps.aiIntegration.deliverables.3')]
    },
    {
      phase: t('steps.launch.phase'),
      icon: "Rocket",
      title: t('steps.launch.title'),
      description: t('steps.launch.description'),
      duration: t('steps.launch.duration'),
      deliverables: [t('steps.launch.deliverables.0'), t('steps.launch.deliverables.1'), t('steps.launch.deliverables.2'), t('steps.launch.deliverables.3')]
    }
  ];

  return (
    <div className="relative">
      {/* Timeline Line */}
      <div className="absolute left-8 top-0 bottom-0 w-px bg-gradient-to-b from-primary/50 via-primary/30 to-transparent hidden lg:block"></div>
      <div className="space-y-8 lg:space-y-12">
        {processSteps?.map((step, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, x: -30 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{
              duration: 0.6,
              delay: index * 0.15,
              ease: [0.4, 0, 0.2, 1]
            }}
            viewport={{ once: true, margin: "-50px" }}
            className="relative flex items-start space-x-6 lg:space-x-8"
          >
            {/* Timeline Node */}
            <div className="relative flex-shrink-0">
              <div className="w-16 h-16 bg-primary/10 rounded-xl flex items-center justify-center border border-primary/20 glow-neon">
                <Icon
                  name={step?.icon}
                  size={24}
                  className="text-primary"
                />
              </div>
              <div className="absolute -bottom-2 left-1/2 transform -translate-x-1/2">
                <span className="text-xs font-mono text-primary bg-background px-2 py-1 rounded-md border border-primary/20">
                  {step?.phase}
                </span>
              </div>
            </div>

            {/* Content */}
            <div className="flex-1 pb-8">
              <div className="bg-card/50 rounded-xl p-6 border border-border hover:border-primary/30 transition-all duration-300 hover:shadow-card">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-2">
                      {step?.title}
                    </h3>
                    <p className="text-muted-foreground text-sm leading-relaxed">
                      {step?.description}
                    </p>
                  </div>
                  <div className="text-right ml-4">
                    <div className="text-xs text-primary font-medium bg-primary/10 px-2 py-1 rounded-md">
                      {step?.duration}
                    </div>
                  </div>
                </div>

                {/* Deliverables */}
                <div className="space-y-3">
                  <h4 className="text-sm font-medium text-foreground">{t('keyDeliverables')}</h4>
                  <div className="grid grid-cols-2 gap-2">
                    {step?.deliverables?.map((deliverable, delIndex) => (
                      <div
                        key={delIndex}
                        className="flex items-center space-x-2 text-xs text-muted-foreground"
                      >
                        <Icon name="CheckCircle" size={12} className="text-primary flex-shrink-0" />
                        <span>{deliverable}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default ProcessTimeline;



================================================
FILE: src/components/sections/services/ServiceCard.tsx
================================================
'use client';

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Icon from 'components/AppIcon';
import Button from 'components/ui/Button';

const ServiceCard = ({
  service,
  index,
  onHover,
  isHovered,
  onCaseStudyClick
}) => {
  const t = useTranslations('services');
  const [isDetailExpanded, setIsDetailExpanded] = useState(false);

  const handleMouseEnter = () => {
    onHover(index);
    setIsDetailExpanded(true);
  };

  const handleMouseLeave = () => {
    onHover(null);
    setIsDetailExpanded(false);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 30 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{
        duration: 0.6,
        delay: index * 0.15,
        ease: [0.4, 0, 0.2, 1]
      }}
      viewport={{ once: true, margin: "-100px" }}
      className="group relative"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div className={`
        relative p-8 rounded-xl border transition-all duration-500 cursor-pointer
        ${isHovered
          ? 'bg-card border-primary/50 shadow-card-hover glow-neon-active'
          : 'bg-card/50 border-border hover:border-primary/30 hover:shadow-card'
        }
      `}>
        {/* Icon Container */}
        <div className="relative mb-6">
          <div className={`
            w-16 h-16 rounded-lg flex items-center justify-center transition-all duration-500
            ${isHovered
              ? 'bg-primary/20 glow-neon' : 'bg-primary/10 group-hover:bg-primary/15'
            }
          `}>
            <Icon
              name={service?.icon}
              size={32}
              className={`transition-all duration-500 ${isHovered ? 'text-primary' : 'text-primary/80'
                }`}
            />
          </div>

          {/* Skill Level Indicator */}
          <div className="absolute -top-2 -right-2">
            <div className={`
              px-2 py-1 rounded-full text-xs font-medium transition-all duration-300
              ${service?.level === 'Expert' ? 'bg-primary/20 text-primary border border-primary/30'
                : service?.level === 'Advanced' ? 'bg-warning/20 text-warning border border-warning/30' : 'bg-muted text-muted-foreground border border-border'
              }
            `}>
              {service?.level}
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="space-y-4">
          <div>
            <h3 className="text-xl font-space-grotesk font-bold text-foreground mb-2 group-hover:text-primary transition-colors duration-300">
              {service?.title}
            </h3>
            <p className="text-muted-foreground text-sm leading-relaxed">
              {service?.description}
            </p>
          </div>

          {/* Technologies */}
          <div className="flex flex-wrap gap-2">
            {service?.technologies?.slice(0, 4)?.map((tech, techIndex) => (
              <span
                key={techIndex}
                className="px-2 py-1 bg-muted/50 text-muted-foreground text-xs rounded-md font-mono"
              >
                {tech}
              </span>
            ))}
            {service?.technologies?.length > 4 && (
              <span className="px-2 py-1 bg-muted/30 text-muted-foreground text-xs rounded-md">
                +{service?.technologies?.length - 4} {t('more')}
              </span>
            )}
          </div>

          {/* Expanded Details */}
          <motion.div
            initial={false}
            animate={{
              height: isDetailExpanded ? 'auto' : 0,
              opacity: isDetailExpanded ? 1 : 0
            }}
            transition={{ duration: 0.3, ease: [0.4, 0, 0.2, 1] }}
            className="overflow-hidden"
          >
            <div className="pt-4 border-t border-border/50 space-y-4">
              <div>
                <h4 className="text-sm font-medium text-foreground mb-2">{t('keyCapabilities.title')}</h4>
                <ul className="space-y-1">
                  {service?.capabilities?.map((capability, capIndex) => (
                    <li key={capIndex} className="flex items-start space-x-2 text-xs text-muted-foreground">
                      <Icon name="Check" size={12} className="text-primary mt-0.5 flex-shrink-0" />
                      <span>{capability}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* Case Study Preview */}
              {service?.caseStudy && (
                <div className="bg-muted/30 rounded-lg p-4">
                  <div className="flex items-start justify-between mb-2">
                    <h5 className="text-sm font-medium text-foreground">{t('keyCapabilities.items.webDevelopment.featuredProject.title')}</h5>
                    <Button
                      variant="ghost"
                      size="xs"
                      iconName="ExternalLink"
                      iconPosition="right"
                      iconSize={12}
                      onClick={() => onCaseStudyClick(service?.caseStudy)}
                      className="text-primary hover:text-primary/80"
                    >
                      {t('keyCapabilities.items.webDevelopment.featuredProject.cta')}
                    </Button>
                  </div>
                  <p className="text-xs text-muted-foreground mb-2">
                    {service?.caseStudy?.title}
                  </p>
                  <p className="text-xs text-muted-foreground/80">
                    {service?.caseStudy?.preview}
                  </p>
                </div>
              )}

              {/* Certifications */}
              {service?.certifications && service?.certifications?.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {service?.certifications?.map((cert, certIndex) => (
                    <div
                      key={certIndex}
                      className="flex items-center space-x-1 px-2 py-1 bg-primary/10 rounded-md"
                    >
                      <Icon name="Award" size={10} className="text-primary" />
                      <span className="text-xs text-primary font-medium">{cert}</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </motion.div>
        </div>

        {/* Hover Glow Effect */}
        <div className={`
          absolute inset-0 rounded-xl transition-opacity duration-500 pointer-events-none
          ${isHovered ? 'opacity-100' : 'opacity-0'}
        `}>
          <div className="absolute inset-0 bg-gradient-to-r from-primary/5 via-transparent to-primary/5 rounded-xl"></div>
        </div>
      </div>
    </motion.div>
  );
};

export default ServiceCard;



================================================
FILE: src/components/sections/services/ServicesSection.tsx
================================================
'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { useLocale, useTranslations } from 'next-intl';
import Header from 'components/ui/Header';
import Icon from 'components/AppIcon';
import Button from 'components/ui/Button';
import CapabilityStats from './CapabilityStats';
import ProcessTimeline from './ProcessTimeline';
import ServiceCard from './ServiceCard';
import TechStack from './TechStack';

const ServicesSection = () => {
  const [hoveredService, setHoveredService] = useState(null);
  const [activeTab, setActiveTab] = useState('services');
  const locale = useLocale();
  const t = useTranslations('services');
  const tGlobal = useTranslations('global');

  // Services data using translations
  const services = [
    {
      icon: "Palette",
      title: t('sections.services.items.webDevelopment.title'),
      description: t('sections.services.items.webDevelopment.description'),
      level: "Expert",
      technologies: ["React", "Next.js", "TypeScript", "Tailwind CSS"],
      capabilities: [
        t('sections.services.items.webDevelopment.features.0'),
        t('sections.services.items.webDevelopment.features.1'),
        t('sections.services.items.webDevelopment.features.2'),
        t('sections.services.items.webDevelopment.features.3'),
        t('sections.services.items.webDevelopment.features.4')
      ],
      certifications: ["AWS Solutions Architect", "React Professional"],
      caseStudy: {
        title: "E-commerce Platform Rebuild",
        preview: "Complete platform migration resulting in 50% faster load times and 25% increase in conversion rates."
      }
    },
    {
      icon: "Brain",
      title: t('sections.services.items.automation.title'),
      description: t('sections.services.items.automation.description'),
      level: "Advanced",
      technologies: ["OpenAI", "LangChain", "n8n", "Zapier"],
      capabilities: [
        t('sections.services.items.automation.features.0'),
        t('sections.services.items.automation.features.1'),
        t('sections.services.items.automation.features.2'),
        t('sections.services.items.automation.features.3'),
        t('sections.services.items.automation.features.4')
      ],
      certifications: ["OpenAI API Specialist", "Google AI Certification"],
      caseStudy: {
        title: "Customer Service AI Assistant",
        preview: "Deployed intelligent chatbot reducing support tickets by 60% while maintaining 95% customer satisfaction."
      }
    },
    {
      icon: "Palette",
      title: t('sections.services.items.design.title'),
      description: t('sections.services.items.design.description'),
      level: "Expert",
      technologies: ["Figma", "Adobe Creative Suite", "Framer"],
      capabilities: [
        t('sections.services.items.design.features.0'),
        t('sections.services.items.design.features.1'),
        t('sections.services.items.design.features.2'),
        t('sections.services.items.design.features.3'),
        t('sections.services.items.design.features.4')
      ],
      certifications: ["Adobe Certified Expert", "Google UX Design"],
      caseStudy: {
        title: "Montreal Tech Startup Rebrand",
        preview: "Complete visual identity overhaul resulting in 300% increase in user engagement and successful Series A funding."
      }
    },
    {
      icon: "Zap",
      title: t('sections.services.items.consulting.title'),
      description: t('sections.services.items.consulting.description'),
      level: "Expert",
      technologies: ["Strategic Planning", "Process Analysis", "Training"],
      capabilities: [
        t('sections.services.items.consulting.features.0'),
        t('sections.services.items.consulting.features.1'),
        t('sections.services.items.consulting.features.2'),
        t('sections.services.items.consulting.features.3'),
        t('sections.services.items.consulting.features.4')
      ],
      certifications: ["Google Analytics Certified", "HubSpot Strategy"],
      caseStudy: {
        title: "SaaS Growth Strategy Implementation",
        preview: "Strategic overhaul leading to 200% increase in organic traffic and 150% improvement in lead generation."
      }
    }
  ];

  const handleCaseStudyClick = (caseStudy) => {
    // Mock case study modal or navigation
    console.log('Opening case study:', caseStudy?.title);
  };

  const tabs = [
    { id: 'services', label: t('sections.tabs.services'), icon: 'Briefcase' },
    { id: 'process', label: t('sections.tabs.process'), icon: 'GitBranch' },
    { id: 'tech', label: t('sections.tabs.tech'), icon: 'Code' },
    { id: 'stats', label: t('sections.tabs.stats'), icon: 'TrendingUp' }
  ];

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <section className="pt-24 pb-16 px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, ease: [0.4, 0, 0.2, 1] }}
            className="text-center mb-16"
          >
            <div className="inline-flex items-center space-x-2 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-6 glow-neon">
              <Icon name="Sparkles" size={16} />
              <span>{t('sections.hero.badge')}</span>
            </div>

            <h1 className="text-4xl lg:text-6xl font-space-grotesk font-bold text-foreground mb-6 leading-tight">
              {t('sections.hero.title')}
              <span className="block text-primary text-glow">{t('sections.hero.titleHighlight')}</span>
            </h1>

            <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed mb-8">
              {t('sections.hero.description')}
            </p>

            <div className="flex flex-wrap justify-center gap-4">
              <Button
                variant="default"
                size="lg"
                iconName="MessageSquare"
                iconPosition="left"
                className="glow-neon hover:glow-neon-active"
              >
                {t('sections.hero.buttons.startProject')}
              </Button>
              <Button
                variant="outline"
                size="lg"
                iconName="Play"
                iconPosition="left"
              >
                {t('sections.hero.buttons.watchVideo')}
              </Button>
            </div>
          </motion.div>
        </div>
      </section>
      {/* Navigation Tabs */}
      <section className="px-6 lg:px-8 mb-16">
        <div className="max-w-7xl mx-auto">
          <div className="flex flex-wrap justify-center gap-2 mb-12">
            {tabs?.map((tab) => (
              <button
                key={tab?.id}
                onClick={() => setActiveTab(tab?.id)}
                className={`
                  flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-all duration-300
                  ${activeTab === tab?.id
                    ? 'bg-primary text-black glow-neon' : 'bg-muted/50 text-muted-foreground hover:bg-muted hover:text-foreground'
                  }
                `}
              >
                <Icon name={tab?.icon} size={18} />
                <span>{tab?.label}</span>
              </button>
            ))}
          </div>
        </div>
      </section>
      {/* Dynamic Content Based on Active Tab */}
      <section className="px-6 lg:px-8 pb-16">
        <div className="max-w-7xl mx-auto">
          {activeTab === 'services' && (
            <motion.div
              key="services"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <div className="text-center mb-12">
                <h2 className="text-3xl font-space-grotesk font-bold text-foreground mb-4">
                  {t('sections.services.title')}
                </h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  {t('sections.services.description')}
                </p>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {services?.map((service, index) => (
                  <ServiceCard
                    key={index}
                    service={service}
                    index={index}
                    onHover={setHoveredService}
                    isHovered={hoveredService === index}
                    onCaseStudyClick={handleCaseStudyClick}
                  />
                ))}
              </div>
            </motion.div>
          )}

          {activeTab === 'process' && (
            <motion.div
              key="process"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <div className="text-center mb-12">
                <h2 className="text-3xl font-space-grotesk font-bold text-foreground mb-4">
                  {t('sections.process.title')}
                </h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  {t('sections.process.description')}
                </p>
              </div>

              <ProcessTimeline />
            </motion.div>
          )}

          {activeTab === 'tech' && (
            <motion.div
              key="tech"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <div className="text-center mb-12">
                <h2 className="text-3xl font-space-grotesk font-bold text-foreground mb-4">
                  {t('sections.tech.title')}
                </h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  {t('sections.tech.description')}
                </p>
              </div>

              <TechStack />
            </motion.div>
          )}

          {activeTab === 'stats' && (
            <motion.div
              key="stats"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <div className="text-center mb-12">
                <h2 className="text-3xl font-space-grotesk font-bold text-foreground mb-4">
                  {t('sections.stats.title')}
                </h2>
                <p className="text-muted-foreground max-w-2xl mx-auto">
                  {t('sections.stats.description')}
                </p>
              </div>

              <CapabilityStats />

              {/* Additional Experience Highlights */}
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.3 }}
                viewport={{ once: true }}
                className="mt-16 bg-card/50 rounded-xl p-8 border border-border"
              >
                <div className="text-center mb-8">
                  <h3 className="text-2xl font-space-grotesk font-bold text-foreground mb-4">
                    Industry Recognition & Expertise
                  </h3>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                  <div className="text-center">
                    <div className="w-16 h-16 mx-auto mb-4 bg-primary/10 rounded-xl flex items-center justify-center glow-neon">
                      <Icon name="Award" size={32} className="text-primary" />
                    </div>
                    <h4 className="font-medium text-foreground mb-2">Industry Awards</h4>
                    <p className="text-sm text-muted-foreground">
                      Recognized for excellence in web design and development by leading industry organizations.
                    </p>
                  </div>

                  <div className="text-center">
                    <div className="w-16 h-16 mx-auto mb-4 bg-primary/10 rounded-xl flex items-center justify-center glow-neon">
                      <Icon name="Users" size={32} className="text-primary" />
                    </div>
                    <h4 className="font-medium text-foreground mb-2">Community Leader</h4>
                    <p className="text-sm text-muted-foreground">
                      Active contributor to Montreal's tech community through mentoring and knowledge sharing.
                    </p>
                  </div>

                  <div className="text-center">
                    <div className="w-16 h-16 mx-auto mb-4 bg-primary/10 rounded-xl flex items-center justify-center glow-neon">
                      <Icon name="BookOpen" size={32} className="text-primary" />
                    </div>
                    <h4 className="font-medium text-foreground mb-2">Continuous Learning</h4>
                    <p className="text-sm text-muted-foreground">
                      Constantly evolving skills to stay ahead of emerging technologies and industry trends.
                    </p>
                  </div>
                </div>
              </motion.div>
            </motion.div>
          )}
        </div>
      </section>
      {/* CTA Section */}
      <section className="px-6 lg:px-8 pb-24">
        <div className="max-w-4xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="bg-gradient-to-r from-primary/10 via-primary/5 to-transparent rounded-2xl p-8 lg:p-12 text-center border border-primary/20 glow-neon"
          >
            <h2 className="text-3xl lg:text-4xl font-space-grotesk font-bold text-foreground mb-4">
              {t('sections.cta.title')}
            </h2>
            <p className="text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
              {t('sections.cta.description')}
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button
                variant="default"
                size="lg"
                iconName="MessageSquare"
                iconPosition="left"
                className="glow-neon hover:glow-neon-active"
              >
                {t('sections.cta.buttons.startProject')}
              </Button>
              <Button
                variant="outline"
                size="lg"
                iconName="Calendar"
                iconPosition="left"
              >
                {t('sections.cta.buttons.scheduleConsultation')}
              </Button>
            </div>

            <div className="mt-8 flex items-center justify-center space-x-6 text-sm text-muted-foreground">
              <div className="flex items-center space-x-2">
                <Icon name="Clock" size={16} className="text-primary" />
                <span>{t('sections.cta.features.freeConsultation')}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Icon name="Shield" size={16} className="text-primary" />
                <span>{t('sections.cta.features.satisfactionGuarantee')}</span>
              </div>
            </div>
          </motion.div>
        </div>
      </section>
    </div>
  );
};

export default ServicesSection;



================================================
FILE: src/components/sections/services/TechStack.tsx
================================================
'use client';

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useTranslations } from 'next-intl';
import Icon from 'components/AppIcon';

const TechStack = () => {
  const t = useTranslations('services.sections.tech');
  const [activeCategory, setActiveCategory] = useState('frontend');

  const techCategories = {
    frontend: {
      icon: "Palette",
      technologies: [
        { name: "React", level: 95, icon: "Code" },
        { name: "Next.js", level: 90, icon: "Zap" },
        { name: "TypeScript", level: 88, icon: "FileCode" },
        { name: "Tailwind CSS", level: 95, icon: "Paintbrush" },
        { name: "Framer Motion", level: 85, icon: "Play" },
        { name: "Three.js", level: 75, icon: "Box" }
      ]
    },
    backend: {
      icon: "Server",
      technologies: [
        { name: "Node.js", level: 90, icon: "Server" },
        { name: "Python", level: 85, icon: "Code2" },
        { name: "PostgreSQL", level: 80, icon: "Database" },
        { name: "MongoDB", level: 75, icon: "HardDrive" },
        { name: "AWS", level: 85, icon: "Cloud" },
        { name: "Docker", level: 80, icon: "Package" }
      ]
    },
    ai: {
      icon: "Brain",
      technologies: [
        { name: "OpenAI GPT", level: 90, icon: "MessageSquare" },
        { name: "TensorFlow", level: 75, icon: "Cpu" },
        { name: "Langchain", level: 85, icon: "Link" },
        { name: "Pinecone", level: 80, icon: "Search" },
        { name: "Zapier", level: 95, icon: "Zap" },
        { name: "Make.com", level: 90, icon: "Settings" }
      ]
    },
    tools: {
      icon: "Wrench",
      technologies: [
        { name: "Figma", level: 95, icon: "Figma" },
        { name: "Git", level: 90, icon: "GitBranch" },
        { name: "VS Code", level: 95, icon: "Code" },
        { name: "Notion", level: 85, icon: "FileText" },
        { name: "Linear", level: 80, icon: "Target" },
        { name: "Vercel", level: 90, icon: "Globe" }
      ]
    }
  };

  const categories = Object.keys(techCategories);

  return (
    <div className="space-y-8">
      {/* Category Tabs */}
      <div className="flex flex-wrap gap-2 justify-center">
        {categories?.map((category) => (
          <button
            key={category}
            onClick={() => setActiveCategory(category)}
            className={`
              flex items-center space-x-2 px-4 py-2 rounded-lg font-medium text-sm transition-all duration-300
              ${activeCategory === category
                ? 'bg-primary text-black glow-neon' : 'bg-muted/50 text-muted-foreground hover:bg-muted hover:text-foreground'
              }
            `}
          >
            <Icon
              name={techCategories?.[category]?.icon}
              size={16}
            />
            <span>{t(`categories.${category}.title`)}</span>
          </button>
        ))}
      </div>
      {/* Active Category Content */}
      <motion.div
        key={activeCategory}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.4, ease: [0.4, 0, 0.2, 1] }}
        className="bg-card/50 rounded-xl p-8 border border-border"
      >
        <div className="text-center mb-8">
          <div className="w-16 h-16 mx-auto mb-4 bg-primary/10 rounded-xl flex items-center justify-center glow-neon">
            <Icon
              name={techCategories?.[activeCategory]?.icon}
              size={32}
              className="text-primary"
            />
          </div>
          <h3 className="text-2xl font-space-grotesk font-bold text-foreground mb-2">
            {t(`categories.${activeCategory}.title`)}
          </h3>
          <p className="text-muted-foreground">
            {t(`categories.${activeCategory}.description`)}
          </p>
        </div>

        {/* Technologies Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {techCategories?.[activeCategory]?.technologies?.map((tech, index) => (
            <motion.div
              key={tech?.name}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{
                duration: 0.3,
                delay: index * 0.1,
                ease: [0.4, 0, 0.2, 1]
              }}
              className="group bg-muted/30 rounded-lg p-4 hover:bg-muted/50 transition-all duration-300 hover:shadow-card"
            >
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-primary/10 rounded-md flex items-center justify-center group-hover:bg-primary/20 transition-colors duration-300">
                    <Icon
                      name={tech?.icon}
                      size={16}
                      className="text-primary"
                    />
                  </div>
                  <span className="font-medium text-foreground">{tech?.name}</span>
                </div>
                <span className="text-sm text-primary font-mono">{tech?.level}%</span>
              </div>

              {/* Skill Level Bar */}
              <div className="w-full bg-border rounded-full h-2 overflow-hidden">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${tech?.level}%` }}
                  transition={{
                    duration: 1,
                    delay: index * 0.1 + 0.5,
                    ease: [0.4, 0, 0.2, 1]
                  }}
                  className="h-full bg-gradient-to-r from-primary to-primary/70 rounded-full glow-neon"
                />
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>
    </div>
  );
};

export default TechStack;



================================================
FILE: src/components/sections/testimonials/ClientLogos.tsx
================================================
import React from 'react';
import Image from 'components/AppImage';

const ClientLogos = () => {
  const clients = [
    {
      id: 1,
      name: "TechCorp Solutions",
      logo: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=200&h=100&fit=crop",
      category: "Enterprise"
    },
    {
      id: 2,
      name: "Creative Studio",
      logo: "https://images.unsplash.com/photo-1572044162444-ad60f128bdea?w=200&h=100&fit=crop",
      category: "Agency"
    },
    {
      id: 3,
      name: "StartupLab",
      logo: "https://images.unsplash.com/photo-1560472355-536de3962603?w=200&h=100&fit=crop",
      category: "Startup"
    },
    {
      id: 4,
      name: "Montreal AI Hub",
      logo: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=200&h=100&fit=crop",
      category: "AI/Tech"
    },
    {
      id: 5,
      name: "Design Collective",
      logo: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=200&h=100&fit=crop",
      category: "Creative"
    },
    {
      id: 6,
      name: "Innovation Labs",
      logo: "https://images.unsplash.com/photo-1572044162444-ad60f128bdea?w=200&h=100&fit=crop",
      category: "R&D"
    },
    {
      id: 7,
      name: "Digital Agency",
      logo: "https://images.unsplash.com/photo-1560472355-536de3962603?w=200&h=100&fit=crop",
      category: "Digital"
    },
    {
      id: 8,
      name: "Future Systems",
      logo: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=200&h=100&fit=crop",
      category: "Technology"
    }
  ];

  return (
    <div className="space-y-8">
      <div className="text-center space-y-2">
        <h3 className="text-xl font-space-grotesk font-semibold text-foreground">
          Trusted by Industry Leaders
        </h3>
        <p className="text-muted-foreground">
          From startups to enterprises, across Montreal and beyond
        </p>
      </div>
      {/* Scrolling Logo Animation */}
      <div className="relative overflow-hidden">
        <div className="flex animate-scroll space-x-8">
          {/* First set of logos */}
          {clients?.map((client) => (
            <div
              key={`first-${client?.id}`}
              className="flex-shrink-0 group"
            >
              <div className="w-32 h-16 bg-muted/10 rounded-lg border border-border/50 flex items-center justify-center overflow-hidden hover:border-primary/30 hover:bg-muted/20 transition-smooth">
                <Image
                  src={client?.logo}
                  alt={`${client?.name} logo`}
                  className="w-24 h-10 object-contain opacity-60 group-hover:opacity-100 transition-smooth grayscale group-hover:grayscale-0"
                />
              </div>
              <p className="text-xs text-muted-foreground text-center mt-2 opacity-0 group-hover:opacity-100 transition-smooth">
                {client?.category}
              </p>
            </div>
          ))}
          
          {/* Duplicate set for seamless loop */}
          {clients?.map((client) => (
            <div
              key={`second-${client?.id}`}
              className="flex-shrink-0 group"
            >
              <div className="w-32 h-16 bg-muted/10 rounded-lg border border-border/50 flex items-center justify-center overflow-hidden hover:border-primary/30 hover:bg-muted/20 transition-smooth">
                <Image
                  src={client?.logo}
                  alt={`${client?.name} logo`}
                  className="w-24 h-10 object-contain opacity-60 group-hover:opacity-100 transition-smooth grayscale group-hover:grayscale-0"
                />
              </div>
              <p className="text-xs text-muted-foreground text-center mt-2 opacity-0 group-hover:opacity-100 transition-smooth">
                {client?.category}
              </p>
            </div>
          ))}
        </div>

        {/* Gradient Overlays */}
        <div className="absolute left-0 top-0 bottom-0 w-16 bg-gradient-to-r from-background to-transparent pointer-events-none"></div>
        <div className="absolute right-0 top-0 bottom-0 w-16 bg-gradient-to-l from-background to-transparent pointer-events-none"></div>
      </div>
      {/* Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-6 pt-8 border-t border-border/50">
        <div className="text-center space-y-1">
          <div className="text-2xl font-space-grotesk font-bold text-primary">50+</div>
          <div className="text-sm text-muted-foreground">Projects Delivered</div>
        </div>
        <div className="text-center space-y-1">
          <div className="text-2xl font-space-grotesk font-bold text-primary">98%</div>
          <div className="text-sm text-muted-foreground">Client Satisfaction</div>
        </div>
        <div className="text-center space-y-1">
          <div className="text-2xl font-space-grotesk font-bold text-primary">20+</div>
          <div className="text-sm text-muted-foreground">Years Experience</div>
        </div>
        <div className="text-center space-y-1">
          <div className="text-2xl font-space-grotesk font-bold text-primary">24/7</div>
          <div className="text-sm text-muted-foreground">Support Available</div>
        </div>
      </div>
      <style jsx>{`
        @keyframes scroll {
          0% { transform: translateX(0); }
          100% { transform: translateX(-50%); }
        }
        
        .animate-scroll {
          animation: scroll 30s linear infinite;
        }
        
        .animate-scroll:hover {
          animation-play-state: paused;
        }
      `}</style>
    </div>
  );
};

export default ClientLogos;



================================================
FILE: src/components/sections/testimonials/IndustryBadges.tsx
================================================
import React from 'react';
import Icon from 'components/AppIcon';

const IndustryBadges = () => {
  const recognitions = [
    {
      id: 1,
      title: "Top Developer",
      organization: "GitHub",
      year: "2024",
      icon: "Github",
      description: "Top 1% contributor in Montreal tech community"
    },
    {
      id: 2,
      title: "AI Innovation Award",
      organization: "Montreal AI Society",
      year: "2024",
      icon: "Zap",
      description: "Recognition for AIAA.dev automation platform"
    },
    {
      id: 3,
      title: "Speaker",
      organization: "React Montreal",
      year: "2024",
      icon: "Mic",
      description: "Regular speaker at local tech meetups"
    },
    {
      id: 4,
      title: "Featured Article",
      organization: "Dev.to",
      year: "2024",
      icon: "FileText",
      description: "Published insights on AI-human collaboration"
    },
    {
      id: 5,
      title: "Mentor",
      organization: "TechStars Montreal",
      year: "2024",
      icon: "Users",
      description: "Mentoring next-gen creative technologists"
    },
    {
      id: 6,
      title: "Open Source",
      organization: "NPM",
      year: "2024",
      icon: "Package",
      description: "Maintainer of popular React automation tools"
    }
  ];

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <h3 className="text-2xl font-space-grotesk font-bold text-foreground">
          Industry Recognition
        </h3>
        <p className="text-muted-foreground">
          Acknowledged expertise in creative technology and AI innovation
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {recognitions?.map((recognition, index) => (
          <div
            key={recognition?.id}
            className="group p-6 rounded-lg border border-border bg-card/50 hover:bg-card hover:border-primary/20 transition-smooth magnetic-hover"
            style={{
              animationDelay: `${index * 100}ms`
            }}
          >
            <div className="space-y-4">
              {/* Icon & Year */}
              <div className="flex items-center justify-between">
                <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center group-hover:bg-primary/20 transition-smooth">
                  <Icon 
                    name={recognition?.icon} 
                    size={20} 
                    color="var(--color-primary)" 
                  />
                </div>
                <span className="text-xs text-muted-foreground font-mono">
                  {recognition?.year}
                </span>
              </div>

              {/* Content */}
              <div className="space-y-2">
                <h4 className="font-space-grotesk font-semibold text-foreground">
                  {recognition?.title}
                </h4>
                <p className="text-primary text-sm font-medium">
                  {recognition?.organization}
                </p>
                <p className="text-muted-foreground text-sm leading-relaxed">
                  {recognition?.description}
                </p>
              </div>
            </div>

            {/* Hover Effect */}
            <div className="absolute inset-0 rounded-lg bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-smooth pointer-events-none"></div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default IndustryBadges;



================================================
FILE: src/components/sections/testimonials/LinkedInRecommendations.tsx
================================================
'use client';

import React, { useState } from 'react';
import Icon from 'components/AppIcon';
import Image from 'components/AppImage';

const LinkedInRecommendations = () => {
  const [expandedRecommendation, setExpandedRecommendation] = useState(null);

  const recommendations = [
    {
      id: 1,
      name: "Sarah Chen",
      role: "Product Manager",
      company: "TechFlow Inc",
      avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face",
      relationship: "Worked directly with Nicky",
      date: "October 2024",
      content: `Nicky is a rare find in the tech world - someone who truly bridges the gap between creative vision and technical execution. His work on our AI-powered design platform was nothing short of exceptional.\n\nWhat impressed me most was his ability to translate complex AI concepts into intuitive user experiences. He didn't just build what we asked for; he anticipated needs we didn't even know we had.\n\nHis expertise in React, combined with his deep understanding of AI automation, made him the perfect partner for our ambitious project. I'd work with Nicky again in a heartbeat.`,
      skills: ["React Development", "AI Integration", "UX Design", "Project Leadership"]
    },
    {
      id: 2,
      name: "Marcus Rodriguez",
      role: "Creative Director",
      company: "Pixel Perfect Studio",
      avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face",
      relationship: "Collaborated with Nicky",
      date: "September 2024",
      content: `Working with Nicky was a masterclass in creative technology. He took our wildest design concepts and made them reality with code that was both elegant and performant.\n\nHis understanding of modern web technologies, particularly his expertise with React and animation libraries, allowed us to create experiences that our clients still talk about months later.\n\nNicky doesn't just code - he thinks like a designer and executes like an engineer. That's a combination you rarely find.`,
      skills: ["Frontend Development", "Animation", "Creative Coding", "Client Relations"]
    },
    {
      id: 3,
      name: "Dr. Emily Watson",
      role: "CTO",
      company: "Montreal AI Labs",
      avatar: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face",
      relationship: "Managed Nicky directly",
      date: "August 2024",
      content: `Nicky's contribution to our AI automation platform was transformative. His ability to understand complex machine learning workflows and translate them into user-friendly interfaces is unmatched.\n\nHe led the development of our AIAA.dev platform, which has become a cornerstone of our automation strategy. His code quality, documentation, and mentorship of junior developers set the standard for our entire team.\n\nI've worked with many developers, but few combine technical excellence with such strong communication and leadership skills.`,
      skills: ["AI/ML Integration", "Team Leadership", "System Architecture", "Mentoring"]
    }
  ];

  const toggleExpanded = (id) => {
    setExpandedRecommendation(expandedRecommendation === id ? null : id);
  };

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <div className="flex items-center justify-center space-x-2">
          <Icon name="Linkedin" size={24} color="var(--color-primary)" />
          <h3 className="text-2xl font-space-grotesk font-bold text-foreground">
            LinkedIn Recommendations
          </h3>
        </div>
        <p className="text-muted-foreground">
          Professional endorsements from colleagues and clients
        </p>
      </div>
      <div className="space-y-4">
        {recommendations?.map((rec, index) => (
          <div
            key={rec?.id}
            className="p-6 rounded-xl border border-border bg-card/50 hover:bg-card hover:border-primary/20 transition-smooth"
            style={{
              animationDelay: `${index * 150}ms`
            }}
          >
            {/* Header */}
            <div className="flex items-start space-x-4 mb-4">
              <div className="relative">
                <Image
                  src={rec?.avatar}
                  alt={rec?.name}
                  className="w-12 h-12 rounded-full object-cover"
                />
                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-blue-500 rounded-full border-2 border-background flex items-center justify-center">
                  <Icon name="Linkedin" size={8} color="white" />
                </div>
              </div>
              
              <div className="flex-1">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-space-grotesk font-semibold text-foreground">
                      {rec?.name}
                    </h4>
                    <p className="text-muted-foreground text-sm">
                      {rec?.role} at {rec?.company}
                    </p>
                    <p className="text-primary text-xs">
                      {rec?.relationship} • {rec?.date}
                    </p>
                  </div>
                  
                  <button
                    onClick={() => toggleExpanded(rec?.id)}
                    className="p-2 rounded-lg hover:bg-muted/20 transition-smooth"
                    aria-label={expandedRecommendation === rec?.id ? "Collapse" : "Expand"}
                  >
                    <Icon 
                      name={expandedRecommendation === rec?.id ? "ChevronUp" : "ChevronDown"} 
                      size={20} 
                      color="var(--color-muted-foreground)" 
                    />
                  </button>
                </div>
              </div>
            </div>

            {/* Content */}
            <div className="space-y-4">
              <div className="text-foreground leading-relaxed">
                {expandedRecommendation === rec?.id ? (
                  <div className="space-y-3">
                    {rec?.content?.split('\n\n')?.map((paragraph, i) => (
                      <p key={i}>{paragraph}</p>
                    ))}
                  </div>
                ) : (
                  <p className="line-clamp-3">
                    {rec?.content?.split('\n\n')?.[0]}
                  </p>
                )}
              </div>

              {/* Skills */}
              <div className="flex flex-wrap gap-2">
                {rec?.skills?.map((skill, i) => (
                  <span
                    key={i}
                    className="px-3 py-1 rounded-full bg-primary/10 border border-primary/20 text-primary text-xs font-medium"
                  >
                    {skill}
                  </span>
                ))}
              </div>

              {/* Read More/Less */}
              {rec?.content?.split('\n\n')?.length > 1 && (
                <button
                  onClick={() => toggleExpanded(rec?.id)}
                  className="text-primary hover:text-primary/80 text-sm font-medium transition-smooth"
                >
                  {expandedRecommendation === rec?.id ? "Show less" : "Read full recommendation"}
                </button>
              )}
            </div>
          </div>
        ))}
      </div>
      {/* LinkedIn CTA */}
      <div className="text-center pt-6 border-t border-border/50">
        <p className="text-muted-foreground text-sm mb-4">
          Want to see more professional endorsements?
        </p>
        <a
          href="https://linkedin.com/in/nickybruno"
          target="_blank"
          rel="noopener noreferrer"
          className="inline-flex items-center space-x-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-smooth magnetic-hover"
        >
          <Icon name="Linkedin" size={20} />
          <span>View LinkedIn Profile</span>
          <Icon name="ExternalLink" size={16} />
        </a>
      </div>
    </div>
  );
};

export default LinkedInRecommendations;



================================================
FILE: src/components/sections/testimonials/TestimonialCard.tsx
================================================
import React from 'react';
import Image from 'components/AppImage';
import Icon from 'components/AppIcon';

const TestimonialCard = ({ testimonial, isActive, onClick }) => {
  return (
    <div 
      className={`relative p-8 rounded-xl border transition-smooth cursor-pointer magnetic-hover ${
        isActive 
          ? 'bg-card border-primary/30 glow-neon' :'bg-card/50 border-border hover:border-primary/20 hover:bg-card/80'
      }`}
      onClick={onClick}
    >
      {/* Quote Icon */}
      <div className="absolute -top-4 left-8">
        <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center">
          <Icon name="Quote" size={16} color="black" />
        </div>
      </div>
      {/* Content */}
      <div className="space-y-6">
        {/* Testimonial Text */}
        <blockquote className="text-foreground font-inter leading-relaxed text-lg">
          "{testimonial?.content}"
        </blockquote>

        {/* Rating */}
        <div className="flex items-center space-x-1">
          {[...Array(5)]?.map((_, i) => (
            <Icon 
              key={i}
              name="Star" 
              size={16} 
              color={i < testimonial?.rating ? "var(--color-primary)" : "var(--color-muted-foreground)"}
              className={i < testimonial?.rating ? "fill-current" : ""}
            />
          ))}
        </div>

        {/* Client Info */}
        <div className="flex items-center space-x-4">
          <div className="relative">
            <Image
              src={testimonial?.avatar}
              alt={testimonial?.name}
              className="w-12 h-12 rounded-full object-cover"
            />
            <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-primary rounded-full border-2 border-background"></div>
          </div>
          
          <div className="flex-1">
            <h4 className="font-space-grotesk font-semibold text-foreground">
              {testimonial?.name}
            </h4>
            <p className="text-muted-foreground text-sm">
              {testimonial?.role} at {testimonial?.company}
            </p>
          </div>

          {/* Company Logo */}
          {testimonial?.companyLogo && (
            <div className="w-10 h-10 rounded-lg bg-muted/20 flex items-center justify-center overflow-hidden">
              <Image
                src={testimonial?.companyLogo}
                alt={`${testimonial?.company} logo`}
                className="w-8 h-8 object-contain opacity-80"
              />
            </div>
          )}
        </div>

        {/* Project Tag */}
        {testimonial?.projectType && (
          <div className="inline-flex items-center px-3 py-1 rounded-full bg-primary/10 border border-primary/20">
            <span className="text-primary text-xs font-medium">
              {testimonial?.projectType}
            </span>
          </div>
        )}
      </div>
      {/* Hover Glow Effect */}
      <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-smooth pointer-events-none"></div>
    </div>
  );
};

export default TestimonialCard;



================================================
FILE: src/components/sections/testimonials/TestimonialCarousel.tsx
================================================
'use client';

import React, { useState, useEffect } from 'react';
import Icon from 'components/AppIcon';
import TestimonialCard from './TestimonialCard';

const TestimonialCarousel = ({ testimonials, autoPlay = true, interval = 5000 }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAutoPlaying, setIsAutoPlaying] = useState(autoPlay);

  useEffect(() => {
    if (!isAutoPlaying) return;

    const timer = setInterval(() => {
      setCurrentIndex((prevIndex) => 
        prevIndex === testimonials?.length - 1 ? 0 : prevIndex + 1
      );
    }, interval);

    return () => clearInterval(timer);
  }, [isAutoPlaying, testimonials?.length, interval]);

  const goToSlide = (index) => {
    setCurrentIndex(index);
    setIsAutoPlaying(false);
    setTimeout(() => setIsAutoPlaying(true), 10000); // Resume after 10s
  };

  const goToPrevious = () => {
    const newIndex = currentIndex === 0 ? testimonials?.length - 1 : currentIndex - 1;
    setCurrentIndex(newIndex);
    setIsAutoPlaying(false);
    setTimeout(() => setIsAutoPlaying(true), 10000);
  };

  const goToNext = () => {
    const newIndex = currentIndex === testimonials?.length - 1 ? 0 : currentIndex + 1;
    setCurrentIndex(newIndex);
    setIsAutoPlaying(false);
    setTimeout(() => setIsAutoPlaying(true), 10000);
  };

  if (!testimonials || testimonials?.length === 0) {
    return null;
  }

  return (
    <div className="relative">
      {/* Main Carousel */}
      <div className="relative overflow-hidden rounded-xl">
        <div 
          className="flex transition-transform duration-500 ease-in-out"
          style={{ transform: `translateX(-${currentIndex * 100}%)` }}
        >
          {testimonials?.map((testimonial, index) => (
            <div key={testimonial?.id} className="w-full flex-shrink-0">
              <TestimonialCard 
                testimonial={testimonial}
                isActive={index === currentIndex}
                onClick={() => {}}
              />
            </div>
          ))}
        </div>
      </div>
      {/* Navigation Controls */}
      <div className="flex items-center justify-between mt-6">
        {/* Previous Button */}
        <button
          onClick={goToPrevious}
          className="w-10 h-10 rounded-full bg-muted/20 hover:bg-primary/20 border border-border hover:border-primary/30 flex items-center justify-center transition-smooth group"
          aria-label="Previous testimonial"
        >
          <Icon 
            name="ChevronLeft" 
            size={20} 
            color="var(--color-muted-foreground)"
            className="group-hover:text-primary transition-smooth"
          />
        </button>

        {/* Dots Indicator */}
        <div className="flex items-center space-x-2">
          {testimonials?.map((_, index) => (
            <button
              key={index}
              onClick={() => goToSlide(index)}
              className={`w-2 h-2 rounded-full transition-smooth ${
                index === currentIndex
                  ? 'bg-primary w-8' :'bg-muted-foreground/30 hover:bg-muted-foreground/50'
              }`}
              aria-label={`Go to testimonial ${index + 1}`}
            />
          ))}
        </div>

        {/* Next Button */}
        <button
          onClick={goToNext}
          className="w-10 h-10 rounded-full bg-muted/20 hover:bg-primary/20 border border-border hover:border-primary/30 flex items-center justify-center transition-smooth group"
          aria-label="Next testimonial"
        >
          <Icon 
            name="ChevronRight" 
            size={20} 
            color="var(--color-muted-foreground)"
            className="group-hover:text-primary transition-smooth"
          />
        </button>
      </div>
      {/* Auto-play Indicator */}
      {isAutoPlaying && (
        <div className="absolute top-4 right-4">
          <div className="flex items-center space-x-2 px-3 py-1 bg-black/50 rounded-full">
            <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
            <span className="text-xs text-white font-mono">AUTO</span>
          </div>
        </div>
      )}
      {/* Progress Bar */}
      <div className="absolute bottom-0 left-0 right-0 h-1 bg-muted/20">
        <div 
          className="h-full bg-primary transition-all duration-100 ease-linear"
          style={{ 
            width: isAutoPlaying ? '100%' : '0%',
            animation: isAutoPlaying ? `progress ${interval}ms linear infinite` : 'none'
          }}
        />
      </div>
      <style jsx>{`
        @keyframes progress {
          from { width: 0%; }
          to { width: 100%; }
        }
      `}</style>
    </div>
  );
};

export default TestimonialCarousel;



================================================
FILE: src/components/sections/testimonials/TestimonialsSection.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import Header from 'components/ui/Header';
import Icon from 'components/AppIcon';
import Button from 'components/ui/Button';
import ClientLogos from './ClientLogos';
import IndustryBadges from './IndustryBadges';
import LinkedInRecommendations from './LinkedInRecommendations';
import TestimonialCard from './TestimonialCard';
import TestimonialCarousel from './TestimonialCarousel';
import VideoTestimonial from './VideoTestimonial';

const TestimonialsSection = () => {
  const [activeTab, setActiveTab] = useState('written');
  const [selectedTestimonial, setSelectedTestimonial] = useState(0);

  // Mock testimonials data
  const writtenTestimonials = [
    {
      id: 1,
      name: "Alexandra Thompson",
      role: "CEO",
      company: "InnovateTech Solutions",
      avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face",
      companyLogo: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=100&h=100&fit=crop",
      content: `Nicky transformed our entire digital presence with his unique blend of creative vision and technical expertise. His AI automation solutions didn't just improve our workflow—they revolutionized how we think about creative technology. The results speak for themselves: 300% increase in efficiency and client satisfaction through the roof.`,
      rating: 5,
      projectType: "AI Automation Platform",
      audience: "business-leader"
    },
    {
      id: 2,
      name: "Marcus Chen",
      role: "Creative Director",
      company: "Pixel Perfect Agency",
      avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face",
      companyLogo: "https://images.unsplash.com/photo-1572044162444-ad60f128bdea?w=100&h=100&fit=crop",
      content: `Working with Nicky was like having a creative partner who speaks fluent code. He took our wildest design concepts and made them reality with elegant, performant solutions. His understanding of both design principles and modern web technologies is unmatched in Montreal's creative scene.`,
      rating: 5,
      projectType: "Interactive Web Experience",
      audience: "creative-agency"
    },
    {
      id: 3,
      name: "Sarah Rodriguez",
      role: "CTO",
      company: "StartupLab Montreal",
      avatar: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face",
      companyLogo: "https://images.unsplash.com/photo-1560472355-536de3962603?w=100&h=100&fit=crop",
      content: `Nicky's versatility and speed are exactly what our fast-moving startup needed. He delivered a complete design system and React application in record time without compromising on quality. His expertise with modern tech stacks and AI integration gave us a competitive edge we didn't know we needed.`,
      rating: 5,
      projectType: "Full-Stack Development",
      audience: "tech-startup"
    },
    {
      id: 4,
      name: "Dr. James Wilson",
      role: "Research Director",
      company: "Montreal AI Institute",
      avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face",
      companyLogo: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=100&h=100&fit=crop",
      content: `Nicky's work on our AIAA.dev platform demonstrates his deep understanding of AI-human collaboration. He doesn't just implement features—he anticipates needs and creates intelligent solutions that evolve with user behavior. His contribution to Montreal's AI community is invaluable.`,
      rating: 5,
      projectType: "AI Platform Development",
      audience: "ai-enthusiast"
    }
  ];

  const videoTestimonials = [
    {
      id: 1,
      name: "Michael Foster",
      role: "Founder",
      company: "TechFlow Dynamics",
      avatar: "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150&h=150&fit=crop&crop=face",
      thumbnail: "https://images.unsplash.com/photo-1551434678-e076c223a692?w=800&h=450&fit=crop",
      duration: "2:34",
      preview: "Nicky's AI automation solutions transformed our entire workflow, delivering results that exceeded our wildest expectations..."
    },
    {
      id: 2,
      name: "Lisa Park",
      role: "Design Lead",
      company: "Creative Collective",
      avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face",
      thumbnail: "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=450&fit=crop",
      duration: "1:47",
      preview: "The collaboration with Nicky was seamless. His technical skills matched our creative ambitions perfectly..."
    },
    {
      id: 3,
      name: "David Kumar",
      role: "Product Manager",
      company: "Innovation Labs",
      avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face",
      thumbnail: "https://images.unsplash.com/photo-1572044162444-ad60f128bdea?w=800&h=450&fit=crop",
      duration: "3:12",
      preview: "Nicky\'s expertise in React and AI integration gave us the competitive edge we needed in the market..."
    }
  ];

  const tabs = [
    { id: 'written', label: 'Client Reviews', icon: 'MessageSquare', count: writtenTestimonials?.length },
    { id: 'video', label: 'Video Stories', icon: 'Play', count: videoTestimonials?.length },
    { id: 'recognition', label: 'Recognition', icon: 'Award', count: 6 },
    { id: 'linkedin', label: 'LinkedIn', icon: 'Linkedin', count: 3 }
  ];

  // Scroll animations
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.6,
        ease: "easeOut"
      }
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <Header />
      {/* Hero Section */}
      <section className="pt-24 pb-16 px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial="hidden"
            animate="visible"
            variants={containerVariants}
            className="text-center space-y-6 mb-16"
          >
            <motion.div variants={itemVariants} className="space-y-4">
              <div className="inline-flex items-center space-x-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20">
                <Icon name="Users" size={16} color="var(--color-primary)" />
                <span className="text-primary text-sm font-medium">Social Proof</span>
              </div>
              
              <h1 className="text-4xl md:text-6xl lg:text-7xl font-space-grotesk font-bold text-foreground">
                Trusted by{' '}
                <span className="text-primary glow-neon">Innovators</span>
              </h1>
              
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                From startups to enterprises, creative agencies to AI labs—discover why industry leaders choose Nicky Bruno for their most ambitious creative technology projects.
              </p>
            </motion.div>

            <motion.div variants={itemVariants} className="flex flex-wrap justify-center gap-4">
              <div className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-card/50 border border-border">
                <Icon name="Star" size={16} color="var(--color-primary)" className="fill-current" />
                <span className="text-foreground font-medium">4.9/5 Rating</span>
              </div>
              <div className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-card/50 border border-border">
                <Icon name="Users" size={16} color="var(--color-primary)" />
                <span className="text-foreground font-medium">50+ Projects</span>
              </div>
              <div className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-card/50 border border-border">
                <Icon name="MapPin" size={16} color="var(--color-primary)" />
                <span className="text-foreground font-medium">Montreal & Global</span>
              </div>
            </motion.div>
          </motion.div>

          {/* Tab Navigation */}
          <motion.div variants={itemVariants} className="mb-12">
            <div className="flex flex-wrap justify-center gap-2 p-2 bg-muted/20 rounded-xl border border-border">
              {tabs?.map((tab) => (
                <button
                  key={tab?.id}
                  onClick={() => setActiveTab(tab?.id)}
                  className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-smooth ${
                    activeTab === tab?.id
                      ? 'bg-primary text-black glow-neon' :'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                  }`}
                >
                  <Icon name={tab?.icon} size={18} />
                  <span>{tab?.label}</span>
                  <span className={`text-xs px-2 py-1 rounded-full ${
                    activeTab === tab?.id ? 'bg-black/20' : 'bg-muted/50'
                  }`}>
                    {tab?.count}
                  </span>
                </button>
              ))}
            </div>
          </motion.div>

          {/* Content Sections */}
          <motion.div variants={itemVariants}>
            {activeTab === 'written' && (
              <div className="space-y-12">
                {/* Featured Testimonial Carousel */}
                <div className="max-w-4xl mx-auto">
                  <TestimonialCarousel testimonials={writtenTestimonials} />
                </div>

                {/* All Testimonials Grid */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  {writtenTestimonials?.map((testimonial, index) => (
                    <TestimonialCard
                      key={testimonial?.id}
                      testimonial={testimonial}
                      isActive={index === selectedTestimonial}
                      onClick={() => setSelectedTestimonial(index)}
                    />
                  ))}
                </div>
              </div>
            )}

            {activeTab === 'video' && (
              <div className="space-y-8">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                  {videoTestimonials?.map((testimonial) => (
                    <VideoTestimonial key={testimonial?.id} testimonial={testimonial} />
                  ))}
                </div>
              </div>
            )}

            {activeTab === 'recognition' && <IndustryBadges />}

            {activeTab === 'linkedin' && <LinkedInRecommendations />}
          </motion.div>
        </div>
      </section>
      {/* Client Logos Section */}
      <section className="py-16 px-6 lg:px-8 border-t border-border/50">
        <div className="max-w-7xl mx-auto">
          <ClientLogos />
        </div>
      </section>
      {/* CTA Section */}
      <section className="py-16 px-6 lg:px-8 bg-gradient-to-r from-primary/5 to-transparent">
        <div className="max-w-4xl mx-auto text-center space-y-8">
          <div className="space-y-4">
            <h2 className="text-3xl md:text-4xl font-space-grotesk font-bold text-foreground">
              Ready to Join These Success Stories?
            </h2>
            <p className="text-xl text-muted-foreground">
              Let's create something extraordinary together. Montreal-made innovation for global impact.
            </p>
          </div>

          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button
              variant="default"
              size="lg"
              className="glow-neon hover:glow-neon-active"
              iconName="Zap"
              iconPosition="left"
            >
              Start Your Project
            </Button>
            <Button
              variant="outline"
              size="lg"
              iconName="Calendar"
              iconPosition="left"
            >
              Schedule Consultation
            </Button>
          </div>

          <div className="flex items-center justify-center space-x-6 text-sm text-muted-foreground">
            <div className="flex items-center space-x-2">
              <Icon name="Clock" size={16} />
              <span>24h Response Time</span>
            </div>
            <div className="flex items-center space-x-2">
              <Icon name="Shield" size={16} />
              <span>NDA Available</span>
            </div>
            <div className="flex items-center space-x-2">
              <Icon name="Globe" size={16} />
              <span>Remote Friendly</span>
            </div>
          </div>
        </div>
      </section>
      {/* Footer */}
      <footer className="py-8 px-6 lg:px-8 border-t border-border/50">
        <div className="max-w-7xl mx-auto text-center">
          <p className="text-muted-foreground text-sm">
            © {new Date()?.getFullYear()} Nicky Bruno. Creative Technologist based in Montreal, Canada.
          </p>
        </div>
      </footer>
    </div>
  );
};

export default TestimonialsSection;



================================================
FILE: src/components/sections/testimonials/VideoTestimonial.tsx
================================================
'use client';

import React, { useState } from 'react';
import Image from 'components/AppImage';
import Icon from 'components/AppIcon';

const VideoTestimonial = ({ testimonial }) => {
  const [isPlaying, setIsPlaying] = useState(false);

  const handlePlayClick = () => {
    setIsPlaying(true);
  };

  return (
    <div className="relative group">
      <div className="relative aspect-video rounded-xl overflow-hidden bg-muted/20">
        {!isPlaying ? (
          <>
            {/* Video Thumbnail */}
            <Image
              src={testimonial?.thumbnail}
              alt={`Video testimonial from ${testimonial?.name}`}
              className="w-full h-full object-cover"
            />
            
            {/* Play Button Overlay */}
            <div className="absolute inset-0 flex items-center justify-center bg-black/30 group-hover:bg-black/20 transition-smooth">
              <button
                onClick={handlePlayClick}
                className="w-16 h-16 bg-primary rounded-full flex items-center justify-center glow-neon hover:glow-neon-active transition-smooth magnetic-hover"
                aria-label="Play video testimonial"
              >
                <Icon name="Play" size={24} color="black" className="ml-1" />
              </button>
            </div>

            {/* Duration Badge */}
            <div className="absolute bottom-4 right-4 px-2 py-1 bg-black/80 rounded text-white text-xs font-mono">
              {testimonial?.duration}
            </div>
          </>
        ) : (
          /* Video Player Placeholder */
          (<div className="w-full h-full bg-muted/20 flex items-center justify-center">
            <div className="text-center space-y-4">
              <Icon name="Play" size={48} color="var(--color-primary)" />
              <p className="text-muted-foreground">Video player would load here</p>
              <button
                onClick={() => setIsPlaying(false)}
                className="text-primary hover:text-primary/80 text-sm underline"
              >
                Close Video
              </button>
            </div>
          </div>)
        )}
      </div>
      {/* Video Info */}
      <div className="mt-4 space-y-2">
        <div className="flex items-center space-x-3">
          <Image
            src={testimonial?.avatar}
            alt={testimonial?.name}
            className="w-8 h-8 rounded-full object-cover"
          />
          <div>
            <h4 className="font-space-grotesk font-medium text-foreground text-sm">
              {testimonial?.name}
            </h4>
            <p className="text-muted-foreground text-xs">
              {testimonial?.role} at {testimonial?.company}
            </p>
          </div>
        </div>
        
        <p className="text-muted-foreground text-sm line-clamp-2">
          {testimonial?.preview}
        </p>
      </div>
    </div>
  );
};

export default VideoTestimonial;



================================================
FILE: src/components/shadcn/ui/button.tsx
================================================
'use client';

import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/utils/cn';

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
        success: 'bg-success text-success-foreground hover:bg-success/90',
        warning: 'bg-warning text-warning-foreground hover:bg-warning/90',
        danger: 'bg-error text-error-foreground hover:bg-error/90'
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
        xs: 'h-8 rounded-md px-2 text-xs',
        xl: 'h-12 rounded-md px-10 text-base'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };



================================================
FILE: src/components/shadcn/ui/checkbox.tsx
================================================
'use client';

import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { Check, Minus } from 'lucide-react';
import { cn } from '@/utils/cn';

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => {
  const isIndeterminate = props.checked === 'indeterminate';
  return (
    <CheckboxPrimitive.Root
      ref={ref}
      className={cn(
        'peer h-4 w-4 shrink-0 rounded-sm border border-input bg-background ring-offset-background',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
        'disabled:cursor-not-allowed disabled:opacity-50',
        'data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
        'data-[state=indeterminate]:bg-primary data-[state=indeterminate]:text-primary-foreground',
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        className={cn('flex items-center justify-center text-current')}
      >
        {isIndeterminate ? (
          <Minus className="h-3 w-3" />
        ) : (
          <Check className="h-3 w-3" />
        )}
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  );
});
Checkbox.displayName = 'Checkbox';

export { Checkbox };



================================================
FILE: src/components/shadcn/ui/input.tsx
================================================
'use client';

import * as React from 'react';
import { cn } from '@/utils/cn';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type = 'text', ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';

export { Input };



================================================
FILE: src/components/ui/Button.tsx
================================================
'use client';

import * as React from 'react';
import { type VariantProps } from 'class-variance-authority';
import { cn } from '@/utils/cn';
import Icon, { type IconName } from '../AppIcon';
import { buttonVariants } from '@/components/shadcn/ui/button';


type ButtonVariantProps = VariantProps<typeof buttonVariants>;
type ButtonSize = NonNullable<ButtonVariantProps['size']>;

type IconPosition = 'left' | 'right';

const iconSizeMap: Record<ButtonSize, number> = {
  xs: 12,
  sm: 14,
  default: 16,
  lg: 18,
  xl: 20,
  icon: 16,
};

const LoadingSpinner = () => (
  <svg className="mr-2 h-4 w-4 animate-spin" fill="none" viewBox="0 0 24 24">
    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
    <path
      className="opacity-75"
      d="M4 12a8 8 0 0 1 8-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 0 1 4 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      fill="currentColor"
    />
  </svg>
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    ButtonVariantProps {
  asChild?: boolean;
  loading?: boolean;
  iconName?: IconName | string | null;
  iconPosition?: IconPosition;
  iconSize?: number | null;
  fullWidth?: boolean;
}

/**
 * Button with optional `asChild` support.
 *
 * When `asChild` is true and the child is a valid React element (e.g. `next/link`),
 * we clone that element, merge classes, and inject the icon/spinner + children content.
 * This avoids passing `className` to a React.Fragment, fixing the runtime warning.
 */
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant,
      size = 'default',
      asChild = false,
      loading = false,
      iconName = null,
      iconPosition = 'left',
      iconSize = null,
      fullWidth = false,
      disabled,
      children,
      type = 'button',
      ...props
    },
    ref
  ) => {
    const calculatedIconSize = iconSize ?? iconSizeMap[size] ?? 16;
    const isDisabled = disabled ?? false;

    const renderIcon = (position: IconPosition) => {
      if (!iconName || iconPosition !== position) return null;

      const spacingClass =
        children != null && children !== false
          ? position === 'left'
            ? 'mr-2'
            : 'ml-2'
          : undefined;

      return <Icon name={iconName} size={calculatedIconSize} className={cn(spacingClass)} />;
    };

    const content = (
      <>
        {loading && <LoadingSpinner />}
        {renderIcon('left')}
        {children}
        {renderIcon('right')}
      </>
    );

    const baseClassName = cn(
      buttonVariants({ variant, size, className }),
      fullWidth && 'w-full'
    );

    // Enhanced asChild behavior: clone the single child element and inject classes + content
    if (asChild && React.isValidElement(children)) {
      const onlyChild = React.Children.only(children) as React.ReactElement<any>;
      const mergedClassName = cn(onlyChild.props?.className, baseClassName);
      const innerChildren = onlyChild.props?.children;

      const contentAsChild = (
        <>
          {loading && <LoadingSpinner />}
          {renderIcon('left')}
          {innerChildren}
          {renderIcon('right')}
        </>
      );

      return React.cloneElement(
        onlyChild,
        {
          className: mergedClassName,
          'data-loading': loading ? 'true' : undefined,
          ...props,
        },
        contentAsChild
      );
    }

    // Default native button
    return (
      <button
        className={baseClassName}
        ref={ref}
        disabled={isDisabled || loading}
        type={type}
        data-loading={loading ? 'true' : undefined}
        {...props}
      >
        {content}
      </button>
    );
  }
);

Button.displayName = 'Button';

export { buttonVariants };
export default Button;



================================================
FILE: src/components/ui/Chatbot.tsx
================================================
'use client';

import React, { useState, useRef, useEffect } from 'react';
import { useTranslations, useLocale } from 'next-intl';
import { cn } from '@/utils/cn';
import Icon from '@/components/AppIcon';
import Button from '@/components/ui/Button';
import ChatMessage, { type ChatMessageProps } from './ChatMessage';
import ChatInput from './ChatInput';

export interface ChatbotProps {
    className?: string;
    webhookUrl?: string;
    maxMessages?: number;
    autoOpen?: boolean;
}

interface Message extends Omit<ChatMessageProps, 'id' | 'timestamp'> {
    id: string;
    timestamp: Date;
}

const Chatbot: React.FC<ChatbotProps> = ({
    className,
    webhookUrl = 'https://n8n.nickyhome.casa/webhook/contact-form',
    maxMessages = 50,
    autoOpen = false
}) => {
    const t = useTranslations('chatbot');
    const locale = useLocale();

    const [isOpen, setIsOpen] = useState(autoOpen);
    const [isMinimized, setIsMinimized] = useState(false);
    const [messages, setMessages] = useState<Message[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [connectionStatus, setConnectionStatus] = useState<'online' | 'offline' | 'connecting' | 'error'>('online');
    const [error, setError] = useState<string | null>(null);

    const messagesEndRef = useRef<HTMLDivElement>(null);
    const chatContainerRef = useRef<HTMLDivElement>(null);

    // Auto-scroll to bottom when new messages arrive
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    // Initialize with welcome message
    useEffect(() => {
        if (messages.length === 0) {
            const welcomeMessage: Message = {
                id: 'welcome',
                content: t('welcome'),
                sender: 'ai',
                timestamp: new Date()
            };
            setMessages([welcomeMessage]);
        }
    }, [t, messages.length]);

    // Handle escape key to close chat
    useEffect(() => {
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && isOpen) {
                setIsOpen(false);
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEscape);
            return () => document.removeEventListener('keydown', handleEscape);
        }
    }, [isOpen]);

    const sendMessage = async (content: string) => {
        if (!content.trim() || isLoading) return;

        const userMessage: Message = {
            id: `user-${Date.now()}`,
            content,
            sender: 'user',
            timestamp: new Date()
        };

        const typingMessage: Message = {
            id: `typing-${Date.now()}`,
            content: '',
            sender: 'ai',
            timestamp: new Date(),
            isTyping: true
        };

        // Add user message and typing indicator
        setMessages(prev => [...prev, userMessage, typingMessage]);
        setIsLoading(true);
        setError(null);
        setConnectionStatus('connecting');

        try {
            const response = await fetch(webhookUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    formType: 'chatbot',
                    message: content,
                    language: locale,
                    timestamp: new Date().toISOString(),
                    sessionId: `session-${Date.now()}`
                }),
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Invalid response format');
            }

            const result = await response.json();

            // Remove typing indicator and add AI response
            setMessages(prev => {
                const withoutTyping = prev.filter(msg => !msg.isTyping);
                const aiMessage: Message = {
                    id: `ai-${Date.now()}`,
                    content: result.message || result.response || 'I apologize, but I couldn\'t process your request.',
                    sender: 'ai',
                    timestamp: new Date()
                };

                const newMessages = [...withoutTyping, aiMessage];

                // Limit message history
                return newMessages.slice(-maxMessages);
            });

            setConnectionStatus('online');
        } catch (err) {
            console.error('Chatbot error:', err);

            // Remove typing indicator and show error
            setMessages(prev => {
                const withoutTyping = prev.filter(msg => !msg.isTyping);
                const errorMessage: Message = {
                    id: `error-${Date.now()}`,
                    content: err instanceof Error && err.message.includes('404')
                        ? 'The chatbot service is currently being set up. Please try again in a moment, or contact me directly at nickdevmtl@gmail.com for immediate assistance.'
                        : t('errorSendFailed'),
                    sender: 'ai',
                    timestamp: new Date(),
                    error: true
                };

                return [...withoutTyping, errorMessage];
            });

            setError(err instanceof Error ? err.message : 'Unknown error');
            setConnectionStatus('error');
        } finally {
            setIsLoading(false);
        }
    };

    const clearMessages = () => {
        const welcomeMessage: Message = {
            id: 'welcome',
            content: t('welcome'),
            sender: 'ai',
            timestamp: new Date()
        };
        setMessages([welcomeMessage]);
        setError(null);
    };

    const toggleChat = () => {
        setIsOpen(!isOpen);
        if (!isOpen) {
            setIsMinimized(false);
        }
    };

    const toggleMinimize = () => {
        setIsMinimized(!isMinimized);
    };

    const getStatusColor = () => {
        switch (connectionStatus) {
            case 'online': return 'text-success';
            case 'offline': return 'text-muted-foreground';
            case 'connecting': return 'text-warning';
            case 'error': return 'text-error';
            default: return 'text-muted-foreground';
        }
    };

    const getStatusIcon = () => {
        switch (connectionStatus) {
            case 'online': return 'Circle';
            case 'offline': return 'CircleOff';
            case 'connecting': return 'Loader2';
            case 'error': return 'AlertCircle';
            default: return 'CircleOff';
        }
    };

    return (
        <>
            {/* Floating Chat Button */}
            <div className={cn('fixed bottom-6 right-6 z-50', className)}>
                <Button
                    onClick={toggleChat}
                    size="icon"
                    className={cn(
                        'w-14 h-14 rounded-full shadow-lg transition-smooth',
                        'bg-primary text-primary-foreground hover:bg-primary/90',
                        'glow-neon hover:glow-neon-active',
                        'animate-float'
                    )}
                    iconName="MessageCircle"
                    iconSize={24}
                    aria-label={isOpen ? t('accessibilityCloseChat') : t('accessibilityOpenChat')}
                />
            </div>

            {/* Chat Window */}
            {isOpen && (
                <div
                    ref={chatContainerRef}
                    className={cn(
                        'fixed bottom-24 right-6 z-50 w-96 h-[600px]',
                        'bg-card border border-border rounded-xl shadow-2xl',
                        'flex flex-col overflow-hidden',
                        'animate-scale-in',
                        isMinimized && 'h-16'
                    )}
                >
                    {/* Header */}
                    <div className="flex items-center justify-between p-4 border-b border-border bg-muted/50">
                        <div className="flex items-center space-x-3">
                            <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center">
                                <Icon name="Bot" size={16} className="text-primary-foreground" />
                            </div>
                            <div>
                                <h3 className="font-medium text-foreground">{t('title')}</h3>
                                <div className="flex items-center space-x-2">
                                    <Icon
                                        name={getStatusIcon()}
                                        size={12}
                                        className={cn('animate-spin', connectionStatus !== 'connecting' && 'animate-none')}
                                    />
                                    <span className={cn('text-xs', getStatusColor())}>
                                        {connectionStatus === 'online' ? t('statusOnline') :
                                            connectionStatus === 'offline' ? t('statusOffline') :
                                                connectionStatus === 'connecting' ? t('statusConnecting') :
                                                    t('statusError')}
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div className="flex items-center space-x-1">
                            <Button
                                onClick={toggleMinimize}
                                size="icon"
                                variant="ghost"
                                className="w-8 h-8"
                                iconName={isMinimized ? "Maximize2" : "Minimize2"}
                                iconSize={16}
                                aria-label={isMinimized ? t('actionMaximize') : t('actionMinimize')}
                            />
                            <Button
                                onClick={clearMessages}
                                size="icon"
                                variant="ghost"
                                className="w-8 h-8"
                                iconName="Trash2"
                                iconSize={16}
                                aria-label={t('actionClear')}
                            />
                            <Button
                                onClick={toggleChat}
                                size="icon"
                                variant="ghost"
                                className="w-8 h-8"
                                iconName="X"
                                iconSize={16}
                                aria-label={t('actionClose')}
                            />
                        </div>
                    </div>

                    {/* Messages Area */}
                    {!isMinimized && (
                        <>
                            <div className="flex-1 overflow-y-auto p-4 space-y-2">
                                {messages.map((message) => (
                                    <ChatMessage
                                        key={message.id}
                                        id={message.id}
                                        content={message.content}
                                        sender={message.sender}
                                        timestamp={message.timestamp}
                                        isTyping={message.isTyping}
                                        error={message.error}
                                    />
                                ))}
                                <div ref={messagesEndRef} />
                            </div>

                            {/* Quick Suggestions */}
                            {messages.length <= 1 && (
                                <div className="px-4 py-2 border-t border-border bg-muted/30">
                                    <p className="text-xs text-muted-foreground mb-2">{t('suggestionsTitle')}</p>
                                    <div className="flex flex-wrap gap-1">
                                        {[
                                            t('suggestion1'),
                                            t('suggestion2'),
                                            t('suggestion3'),
                                            t('suggestion4')
                                        ].map((suggestion, index) => (
                                            <Button
                                                key={index}
                                                variant="outline"
                                                size="sm"
                                                className="text-xs h-7 px-2"
                                                onClick={() => sendMessage(suggestion)}
                                                disabled={isLoading}
                                            >
                                                {suggestion}
                                            </Button>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {/* Input Area */}
                            <ChatInput
                                onSendMessage={sendMessage}
                                disabled={isLoading}
                                placeholder={t('placeholder')}
                                maxLength={1000}
                            />
                        </>
                    )}
                </div>
            )}
        </>
    );
};

export default Chatbot;



================================================
FILE: src/components/ui/ChatInput.tsx
================================================
'use client';

import React, { useState, useRef, useEffect } from 'react';
import { cn } from '@/utils/cn';
import Icon from '@/components/AppIcon';
import Button from '@/components/ui/Button';

export interface ChatInputProps {
    onSendMessage: (message: string) => void;
    disabled?: boolean;
    placeholder?: string;
    maxLength?: number;
    className?: string;
}

const ChatInput: React.FC<ChatInputProps> = ({
    onSendMessage,
    disabled = false,
    placeholder = "Type your message here...",
    maxLength = 1000,
    className
}) => {
    const [message, setMessage] = useState('');
    const [isComposing, setIsComposing] = useState(false);
    const textareaRef = useRef<HTMLTextAreaElement>(null);

    // Auto-resize textarea based on content
    useEffect(() => {
        const textarea = textareaRef.current;
        if (textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = `${Math.min(textarea.scrollHeight, 120)}px`;
        }
    }, [message]);

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();

        const trimmedMessage = message.trim();
        if (!trimmedMessage || disabled) return;

        // Validate message length
        if (trimmedMessage.length > maxLength) {
            return;
        }

        onSendMessage(trimmedMessage);
        setMessage('');

        // Reset textarea height
        if (textareaRef.current) {
            textareaRef.current.style.height = 'auto';
        }
    };

    const handleKeyDown = (e: React.KeyboardEvent) => {
        // Handle Enter key
        if (e.key === 'Enter') {
            if (e.shiftKey) {
                // Shift+Enter: new line (default behavior)
                return;
            } else {
                // Enter: send message
                e.preventDefault();
                handleSubmit(e);
            }
        }
    };

    const handleCompositionStart = () => {
        setIsComposing(true);
    };

    const handleCompositionEnd = () => {
        setIsComposing(false);
    };

    const canSend = message.trim().length > 0 && !disabled && !isComposing;

    return (
        <form
            onSubmit={handleSubmit}
            className={cn(
                'flex items-end space-x-2 p-4 border-t border-border bg-card',
                className
            )}
        >
            {/* Textarea */}
            <div className="flex-1 relative">
                <textarea
                    ref={textareaRef}
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    onKeyDown={handleKeyDown}
                    onCompositionStart={handleCompositionStart}
                    onCompositionEnd={handleCompositionEnd}
                    placeholder={placeholder}
                    disabled={disabled}
                    maxLength={maxLength}
                    rows={1}
                    className={cn(
                        'w-full px-4 py-3 bg-input border border-border rounded-lg',
                        'text-foreground placeholder-muted-foreground',
                        'focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent',
                        'resize-none transition-smooth',
                        'min-h-[44px] max-h-[120px]',
                        disabled && 'opacity-50 cursor-not-allowed'
                    )}
                    style={{ height: 'auto' }}
                />

                {/* Character count */}
                {message.length > maxLength * 0.8 && (
                    <div className="absolute bottom-1 right-2 text-xs text-muted-foreground">
                        {message.length}/{maxLength}
                    </div>
                )}
            </div>

            {/* Send button */}
            <Button
                type="submit"
                size="icon"
                disabled={!canSend}
                className={cn(
                    'h-11 w-11 shrink-0',
                    canSend && 'glow-neon hover:glow-neon-active'
                )}
                iconName="Send"
                iconSize={18}
                aria-label="Send message"
            />

            {/* Loading indicator */}
            {disabled && (
                <div className="absolute inset-0 bg-background/50 flex items-center justify-center rounded-lg">
                    <Icon name="Loader2" size={20} className="animate-spin text-primary" />
                </div>
            )}
        </form>
    );
};

export default ChatInput;



================================================
FILE: src/components/ui/ChatMessage.tsx
================================================
'use client';

import React from 'react';
import { cn } from '@/utils/cn';
import Icon from '@/components/AppIcon';

export interface ChatMessageProps {
    id: string;
    content: string;
    sender: 'user' | 'ai';
    timestamp: Date;
    isTyping?: boolean;
    error?: boolean;
    className?: string;
}

const ChatMessage: React.FC<ChatMessageProps> = ({
    id,
    content,
    sender,
    timestamp,
    isTyping = false,
    error = false,
    className
}) => {
    const isUser = sender === 'user';
    const isAI = sender === 'ai';

    const formatTime = (date: Date) => {
        return date.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    return (
        <div
            className={cn(
                'flex w-full mb-4 animate-slide-up',
                isUser ? 'justify-end' : 'justify-start',
                className
            )}
            data-message-id={id}
        >
            <div
                className={cn(
                    'flex max-w-[80%] space-x-2',
                    isUser ? 'flex-row-reverse space-x-reverse' : 'flex-row'
                )}
            >
                {/* Avatar */}
                <div
                    className={cn(
                        'flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center transition-smooth',
                        isUser
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-muted text-muted-foreground'
                    )}
                >
                    {isUser ? (
                        <Icon name="User" size={16} />
                    ) : (
                        <Icon name="Bot" size={16} />
                    )}
                </div>

                {/* Message Content */}
                <div className="flex flex-col space-y-1">
                    <div
                        className={cn(
                            'px-4 py-3 rounded-lg transition-smooth',
                            isUser
                                ? 'bg-primary text-primary-foreground rounded-br-sm'
                                : 'bg-card border border-border rounded-bl-sm',
                            error && 'border-error bg-error/5',
                            isTyping && 'animate-pulse'
                        )}
                    >
                        {isTyping ? (
                            <div className="flex items-center space-x-1">
                                <div className="flex space-x-1">
                                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                                    <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                                </div>
                                <span className="text-sm text-muted-foreground ml-2">Typing...</span>
                            </div>
                        ) : (
                            <div className="text-sm leading-relaxed whitespace-pre-wrap break-words">
                                {content}
                            </div>
                        )}
                    </div>

                    {/* Timestamp */}
                    <div
                        className={cn(
                            'text-xs text-muted-foreground px-1',
                            isUser ? 'text-right' : 'text-left'
                        )}
                    >
                        {formatTime(timestamp)}
                    </div>

                    {/* Error indicator */}
                    {error && (
                        <div className="flex items-center space-x-1 text-xs text-error">
                            <Icon name="AlertCircle" size={12} />
                            <span>Failed to send</span>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ChatMessage;



================================================
FILE: src/components/ui/Checkbox.tsx
================================================
'use client';

import React, { useId } from "react";
import { cn } from "@/utils/cn";
import { Checkbox as BaseCheckbox } from "@/components/shadcn/ui/checkbox";

type CheckboxSize = "sm" | "default" | "lg";

const sizeClasses: Record<CheckboxSize, string> = {
  sm: "h-4 w-4",
  default: "h-4 w-4",
  lg: "h-5 w-5",
};

interface CheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "size" | "type"> {
  indeterminate?: boolean;
  label?: React.ReactNode;
  description?: React.ReactNode;
  error?: React.ReactNode;
  size?: CheckboxSize;
}

const Checkbox = React.forwardRef<HTMLButtonElement, CheckboxProps>(function Checkbox(
  {
    className,
    id,
    checked = false,
    indeterminate = false,
    disabled = false,
    required = false,
    label,
    description,
    error,
    size = "default",
    ...props
  },
  ref
) {
  const generatedId = useId();
  const checkboxId = id ?? generatedId;
  const { onChange, onInput, onInvalid, onToggle, onSelect, ...restProps } = props as any;

  return (
    <div className={cn("flex items-start space-x-2", className)}>
      <BaseCheckbox
        ref={ref}
        id={checkboxId}
        className={cn(
          sizeClasses[size],
          error && "border-destructive",
          disabled && "cursor-not-allowed opacity-50"
        )}
        checked={indeterminate ? 'indeterminate' : !!checked}
        disabled={disabled}
        onCheckedChange={(state) => {
          if (typeof onChange === "function") {
            const syntheticEvent = {
              target: { checked: state === true },
              currentTarget: { checked: state === true }
            } as unknown as React.ChangeEvent<HTMLInputElement>;
            onChange(syntheticEvent);
          }
        }}
        {...restProps}
      />
      {(label || description || error) && (
        <div className="flex-1 space-y-1">
          {label && (
            <label
              htmlFor={checkboxId}
              className={cn(
                "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer",
                error ? "text-destructive" : "text-foreground"
              )}
            >
              {label}
              {required && <span className="text-destructive ml-1">*</span>}
            </label>
          )}

          {description && !error && (
            <p className="text-sm text-muted-foreground">
              {description}
            </p>
          )}

          {error && (
            <p className="text-sm text-destructive">
              {error}
            </p>
          )}
        </div>
      )}
    </div>
  );
});

Checkbox.displayName = "Checkbox";

interface CheckboxGroupProps extends React.FieldsetHTMLAttributes<HTMLFieldSetElement> {
  label?: React.ReactNode;
  description?: React.ReactNode;
  error?: React.ReactNode;
  required?: boolean;
}

const CheckboxGroup = React.forwardRef<HTMLFieldSetElement, CheckboxGroupProps>(function CheckboxGroup(
  {
    className,
    children,
    label,
    description,
    error,
    required = false,
    disabled = false,
    ...props
  },
  ref
) {
  return (
    <fieldset
      ref={ref}
      disabled={disabled}
      className={cn("space-y-3", className)}
      {...props}
    >
      {label && (
        <legend
          className={cn(
            "text-sm font-medium",
            error ? "text-destructive" : "text-foreground"
          )}
        >
          {label}
          {required && <span className="text-destructive ml-1">*</span>}
        </legend>
      )}

      {description && !error && (
        <p className="text-sm text-muted-foreground">
          {description}
        </p>
      )}

      <div className="space-y-2">
        {children}
      </div>

      {error && (
        <p className="text-sm text-destructive">
          {error}
        </p>
      )}
    </fieldset>
  );
});

CheckboxGroup.displayName = "CheckboxGroup";

export { Checkbox, CheckboxGroup };



================================================
FILE: src/components/ui/Footer.tsx
================================================
'use client';

import Icon from 'components/AppIcon';

const Footer = (): JSX.Element => {
  const year = new Date().getFullYear();

  return (
    <footer className="bg-card border-t border-border py-12">
      <div className="max-w-7xl mx-auto px-6 lg:px-8">
        <div className="flex flex-col md:flex-row items-center justify-between">
          <div className="flex items-center space-x-3 mb-4 md:mb-0">
            <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary/70 rounded-lg flex items-center justify-center glow-neon">
              <span className="text-black font-space-grotesk font-bold text-lg">NB</span>
            </div>
            <div>
              <h3 className="font-space-grotesk font-bold text-foreground">Nicky Bruno</h3>
              <p className="text-xs text-muted-foreground">Creative Technologist</p>
            </div>
          </div>

          <div className="flex items-center space-x-6">
            <a
              href="mailto:hello@nickybruno.ca"
              className="text-muted-foreground hover:text-primary transition-smooth"
            >
              <Icon name="Mail" size={20} />
            </a>
            <a
              href="https://linkedin.com/in/nickybruno"
              target="_blank"
              rel="noopener noreferrer"
              className="text-muted-foreground hover:text-primary transition-smooth"
            >
              <Icon name="Linkedin" size={20} />
            </a>
            <a
              href="https://github.com/nickybruno"
              target="_blank"
              rel="noopener noreferrer"
              className="text-muted-foreground hover:text-primary transition-smooth"
            >
              <Icon name="Github" size={20} />
            </a>
          </div>
        </div>

        <div className="mt-8 pt-8 border-t border-border text-center">
          <p className="text-sm text-muted-foreground">
            © {year} Nicky Bruno. All rights reserved. • Montreal, QC, Canada
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;


================================================
FILE: src/components/ui/Header.tsx
================================================
'use client';

import { type FC, useEffect, useMemo, useState } from 'react';
import Link from 'next/link';
import { useLocale, useTranslations } from 'next-intl';
import { usePathname } from 'next/navigation';
import Button from './Button';
import LanguageSwitcher from './LanguageSwitcher';
import Icon, { type IconName } from '../AppIcon';

type NavigationItem = {
  labelKey: string;
  path: string;
  icon: IconName;
};

const navigationItems: NavigationItem[] = [
  { labelKey: 'home', path: '/', icon: 'Home' },
  { labelKey: 'about', path: '/about', icon: 'User' },
  { labelKey: 'services', path: '/services', icon: 'Briefcase' },
  { labelKey: 'portfolio', path: '/portfolio', icon: 'FolderOpen' },
  { labelKey: 'contact', path: '/contact', icon: 'Mail' },
];

const Header: FC = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const pathname = usePathname();
  const locale = useLocale();
  const tNav = useTranslations('global.navigation');

  const normalizedPathname = useMemo(() => {
    if (!pathname) return '/';
    const segments = pathname.split('/').filter(Boolean);
    if (segments.length === 0) {
      return '/';
    }
    if (segments[0] === locale) {
      const rest = segments.slice(1);
      return rest.length > 0 ? `/${rest.join('/')}` : '/';
    }
    return pathname;
  }, [locale, pathname]);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const isActivePath = (path: string): boolean => {
    if (!normalizedPathname) return false;
    if (path === '/') {
      return normalizedPathname === '/' || normalizedPathname === '/hero-experience';
    }
    return normalizedPathname === path;
  };

  const handleMobileMenuToggle = () => {
    setIsMobileMenuOpen((prev) => !prev);
  };

  const closeMobileMenu = () => {
    setIsMobileMenuOpen(false);
  };

  useEffect(() => {
    closeMobileMenu();
  }, [pathname]);

  return (
    <>
      <header
        className={`fixed top-0 left-0 right-0 z-50 transition-smooth ${isScrolled
          ? 'bg-background/95 backdrop-blur-md border-b border-border/50'
          : 'bg-transparent'
          }`}
      >
        <div className="w-full">
          <div className="flex items-center justify-between h-16 px-6 lg:px-8">
            <Link
              href={`/${locale}`}
              className="flex items-center space-x-3 group transition-smooth hover:scale-105"
              onClick={closeMobileMenu}
            >
              <div className="relative">
                <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary/70 rounded-lg flex items-center justify-center glow-neon group-hover:glow-neon-active transition-smooth">
                  <span className="text-black font-space-grotesk font-bold text-lg">NB</span>
                </div>
                <div className="absolute -inset-1 bg-gradient-to-r from-primary/20 to-transparent rounded-lg blur opacity-0 group-hover:opacity-100 transition-smooth"></div>
              </div>
              <div className="hidden sm:block">
                <h1 className="text-xl font-space-grotesk font-bold text-foreground">
                  Nicky Bruno
                </h1>
                <p className="text-xs text-muted-foreground font-inter">Creative Technologist</p>
              </div>
            </Link>

            <nav className="hidden lg:flex items-center space-x-1">
              {navigationItems.map((item) => {
                const active = isActivePath(item.path);
                return (
                  <Link
                    key={item.path}
                    href={item.path === '/' ? `/${locale}` : `/${locale}${item.path}`}
                    className={`relative px-4 py-2 rounded-lg font-inter font-medium text-sm transition-smooth group ${active
                      ? 'text-primary bg-primary/10'
                      : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                      }`}
                    onClick={closeMobileMenu}
                  >
                    <span className="relative z-10">{tNav(item.labelKey)}</span>
                    {active && (
                      <div className="absolute inset-0 bg-primary/5 rounded-lg glow-neon"></div>
                    )}
                    <div className="absolute inset-0 bg-primary/5 rounded-lg opacity-0 group-hover:opacity-100 transition-smooth"></div>
                  </Link>
                );
              })}
            </nav>

            <div className="flex items-center space-x-4">
              {/* Language Switcher - Desktop */}
              <LanguageSwitcher
                variant="desktop"
                className="hidden lg:block"
              />

              <Button
                asChild
                variant="default"
                size="sm"
                className="hidden md:flex glow-neon hover:glow-neon-active transition-smooth"
                iconName="Zap"
                iconPosition="left"
                iconSize={16}
              >
                <Link href={`/${locale}/contact`}>{tNav('cta')}</Link>
              </Button>

              <button
                onClick={handleMobileMenuToggle}
                className="lg:hidden p-2 rounded-lg text-muted-foreground hover:text-foreground hover:bg-muted/50 transition-smooth"
                aria-label="Toggle mobile menu"
              >
                <Icon name={isMobileMenuOpen ? 'X' : 'Menu'} size={24} />
              </button>
            </div>
          </div>
        </div>

        <div
          className={`lg:hidden absolute top-full left-0 right-0 bg-background/95 backdrop-blur-md border-b border-border/50 transition-smooth ${isMobileMenuOpen ? 'opacity-100 visible translate-y-0' : 'opacity-0 invisible -translate-y-4'
            }`}
        >
          <nav className="px-6 py-4 space-y-2">
            {navigationItems.map((item) => {
              const active = isActivePath(item.path);
              return (
                <Link
                  key={item.path}
                  href={item.path === '/' ? `/${locale}` : `/${locale}${item.path}`}
                  onClick={closeMobileMenu}
                  className={`flex items-center space-x-3 px-4 py-3 rounded-lg font-inter font-medium transition-smooth ${active
                    ? 'text-primary bg-primary/10 glow-neon'
                    : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                    }`}
                >
                  <Icon name={item.icon} size={20} />
                  <span>{tNav(item.labelKey)}</span>
                </Link>
              );
            })}

            <div className="pt-4 border-t border-border/50 space-y-3">
              {/* Language Switcher - Mobile */}
              <LanguageSwitcher
                variant="mobile"
                className="lg:hidden"
              />

              <Button
                asChild
                variant="default"
                fullWidth
                className="glow-neon hover:glow-neon-active transition-smooth"
                iconName="Zap"
                iconPosition="left"
                iconSize={16}
                onClick={closeMobileMenu}
              >
                <Link href={`/${locale}/contact`}>{tNav('cta')}</Link>
              </Button>
            </div>
          </nav>
        </div>
      </header>

      {isMobileMenuOpen && (
        <div className="lg:hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-40" onClick={closeMobileMenu} />
      )}
    </>
  );
};

export default Header;



================================================
FILE: src/components/ui/Input.tsx
================================================
'use client';

import React, { useId } from "react";
import { cn } from "@/utils/cn";
import { Input as BaseInput } from "@/components/shadcn/ui/input";

type InputType = React.HTMLInputTypeAttribute;

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: React.ReactNode;
  description?: React.ReactNode;
  error?: React.ReactNode;
}

const baseInputClasses =
  "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50";

const checkboxClasses =
  "h-4 w-4 rounded border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50";

const radioClasses =
  "h-4 w-4 rounded-full border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50";

const Input = React.forwardRef<HTMLInputElement, InputProps>(function Input(
  {
    className,
    type = "text",
    label,
    description,
    error,
    required = false,
    id,
    ...props
  },
  ref
) {
  const generatedId = useId();
  const inputId = id ?? generatedId;

  if (type === "checkbox" || type === "radio") {
    const classes = type === "checkbox" ? checkboxClasses : radioClasses;

    return (
      <input
        type={type as InputType}
        className={cn(classes, className)}
        ref={ref}
        id={inputId}
        required={required}
        {...props}
      />
    );
  }

  return (
    <div className="space-y-2">
      {label && (
        <label
          htmlFor={inputId}
          className={cn(
            "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
            error ? "text-destructive" : "text-foreground"
          )}
        >
          {label}
          {required && <span className="text-destructive ml-1">*</span>}
        </label>
      )}

      <BaseInput
        type={type}
        className={cn(
          error && "border-destructive focus-visible:ring-destructive",
          className
        )}
        ref={ref}
        id={inputId}
        required={required}
        {...props}
      />

      {description && !error && (
        <p className="text-sm text-muted-foreground">
          {description}
        </p>
      )}

      {error && (
        <p className="text-sm text-destructive">
          {error}
        </p>
      )}
    </div>
  );
});

Input.displayName = "Input";

export type { InputProps };
export default Input;



================================================
FILE: src/components/ui/LanguageSwitcher.tsx
================================================
'use client';

import { useState, useRef, useEffect } from 'react';
import { useLocale, useTranslations } from 'next-intl';
import { useRouter, usePathname } from 'next/navigation';
import Icon from '../AppIcon';
import { cn } from '@/utils/cn';

interface LanguageSwitcherProps {
    className?: string;
    variant?: 'desktop' | 'mobile';
}

const LanguageSwitcher = ({ className, variant = 'desktop' }: LanguageSwitcherProps) => {
    const [isOpen, setIsOpen] = useState(false);
    const [isAnimating, setIsAnimating] = useState(false);
    const dropdownRef = useRef<HTMLDivElement>(null);
    const buttonRef = useRef<HTMLButtonElement>(null);

    const locale = useLocale();
    const router = useRouter();
    const pathname = usePathname();
    const t = useTranslations('global.languageSwitcher');

    const languages = [
        { code: 'en', name: t('english'), flag: '🇺🇸' },
        { code: 'fr', name: t('french'), flag: '🇫🇷' }
    ];

    const currentLanguage = languages.find(lang => lang.code === locale) || languages[0];

    // Close dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node) &&
                buttonRef.current && !buttonRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };

        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
            return () => document.removeEventListener('mousedown', handleClickOutside);
        }
    }, [isOpen]);

    // Close dropdown on escape key
    useEffect(() => {
        const handleEscape = (event: KeyboardEvent) => {
            if (event.key === 'Escape') {
                setIsOpen(false);
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEscape);
            return () => document.removeEventListener('keydown', handleEscape);
        }
    }, [isOpen]);

    const handleLanguageChange = (newLocale: string) => {
        if (newLocale === locale) {
            setIsOpen(false);
            return;
        }

        setIsAnimating(true);

        // Update the URL to the new locale
        const segments = pathname.split('/').filter(Boolean);
        if (segments[0] === locale) {
            // Replace current locale with new one
            segments[0] = newLocale;
        } else {
            // Add new locale at the beginning
            segments.unshift(newLocale);
        }

        const newPath = '/' + segments.join('/');

        // Use router.push for client-side navigation
        router.push(newPath);

        // Close dropdown after a short delay
        setTimeout(() => {
            setIsOpen(false);
            setIsAnimating(false);
        }, 150);
    };

    const toggleDropdown = () => {
        setIsOpen(!isOpen);
    };

    const isMobile = variant === 'mobile';

    return (
        <div className={cn('relative', className)}>
            {/* Language Switcher Button */}
            <button
                ref={buttonRef}
                onClick={toggleDropdown}
                className={cn(
                    'flex items-center space-x-2 px-3 py-2 rounded-lg font-inter font-medium text-sm transition-smooth group',
                    'text-muted-foreground hover:text-foreground hover:bg-muted/50',
                    'focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-offset-2 focus:ring-offset-background',
                    isMobile && 'w-full justify-between',
                    isOpen && 'text-foreground bg-muted/50'
                )}
                aria-label={t('ariaLabel')}
                aria-expanded={isOpen}
                aria-haspopup="true"
            >
                <div className="flex items-center space-x-2">
                    <span className="text-base" role="img" aria-label={`${currentLanguage.name} flag`}>
                        {currentLanguage.flag}
                    </span>
                    <span className="hidden sm:inline">
                        {currentLanguage.name}
                    </span>
                    <span className="sm:hidden uppercase text-xs font-mono">
                        {currentLanguage.code}
                    </span>
                </div>

                <Icon
                    name="ChevronDown"
                    size={14}
                    className={cn(
                        'transition-smooth',
                        isOpen && 'rotate-180'
                    )}
                />
            </button>

            {/* Dropdown Menu */}
            {isOpen && (
                <div
                    ref={dropdownRef}
                    className={cn(
                        'absolute right-0 mt-2 w-48 bg-background border border-border/50 rounded-lg shadow-lg z-50',
                        'backdrop-blur-md bg-background/95',
                        'animate-in slide-in-from-top-2 duration-200'
                    )}
                    role="menu"
                    aria-orientation="vertical"
                >
                    <div className="py-2">
                        {languages.map((language) => {
                            const isActive = language.code === locale;
                            const isDisabled = isAnimating;

                            return (
                                <button
                                    key={language.code}
                                    onClick={() => handleLanguageChange(language.code)}
                                    disabled={isDisabled}
                                    className={cn(
                                        'w-full flex items-center space-x-3 px-4 py-3 text-left font-inter text-sm transition-smooth',
                                        'hover:bg-muted/50 focus:outline-none focus:bg-muted/50',
                                        isActive
                                            ? 'text-primary bg-primary/10'
                                            : 'text-foreground',
                                        isDisabled && 'opacity-50 cursor-not-allowed'
                                    )}
                                    role="menuitem"
                                    aria-current={isActive ? 'true' : 'false'}
                                >
                                    <span className="text-base" role="img" aria-label={`${language.name} flag`}>
                                        {language.flag}
                                    </span>
                                    <div className="flex-1">
                                        <div className="font-medium">{language.name}</div>
                                        <div className="text-xs text-muted-foreground uppercase font-mono">
                                            {language.code}
                                        </div>
                                    </div>
                                    {isActive && (
                                        <Icon
                                            name="Check"
                                            size={16}
                                            className="text-primary"
                                        />
                                    )}
                                </button>
                            );
                        })}
                    </div>

                    {/* Footer with current language info */}
                    <div className="px-4 py-2 border-t border-border/50 bg-muted/20">
                        <div className="text-xs text-muted-foreground">
                            {t('current')}: <span className="font-medium text-foreground">{currentLanguage.name}</span>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default LanguageSwitcher;



================================================
FILE: src/components/ui/LinkButton.tsx
================================================
'use client';

import * as React from 'react';
import Link, { type LinkProps } from 'next/link';
import { cn } from '@/utils/cn';
import Icon, { type IconName } from '../AppIcon';
import { buttonVariants } from '@/components/shadcn/ui/button';
import { type VariantProps } from 'class-variance-authority';

type ButtonVariantProps = VariantProps<typeof buttonVariants>;
type IconPosition = 'left' | 'right';

const LoadingSpinner = () => (
  <svg className="mr-2 h-4 w-4 animate-spin" fill="none" viewBox="0 0 24 24" aria-hidden="true">
    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
    <path
      className="opacity-75"
      d="M4 12a8 8 0 0 1 8-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 0 1 4 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      fill="currentColor"
    />
  </svg>
);

export interface LinkButtonProps
  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href'>,
    ButtonVariantProps {
  href: LinkProps['href'];
  prefetch?: boolean | null;
  loading?: boolean;
  iconName?: IconName | string | null;
  iconPosition?: IconPosition;
  iconSize?: number | null;
  fullWidth?: boolean;
}

const LinkButton = React.forwardRef<HTMLAnchorElement, LinkButtonProps>(
  (
    {
      href,
      prefetch,
      className,
      variant,
      size = 'default',
      loading = false,
      iconName = null,
      iconPosition = 'left',
      iconSize = null,
      fullWidth = false,
      children,
      ...rest
    },
    ref
  ) => {
    const calculatedIconSize =
      iconSize ??
      (size === 'xs'
        ? 12
        : size === 'sm'
        ? 14
        : size === 'lg'
        ? 18
        : size === 'xl'
        ? 20
        : 16);

    const baseClassName = cn(buttonVariants({ variant, size }), fullWidth && 'w-full', className);

    const renderIcon = (position: IconPosition) => {
      if (!iconName || iconPosition !== position) return null;
      const spacingClass =
        children != null && children !== false ? (position === 'left' ? 'mr-2' : 'ml-2') : undefined;
      return <Icon name={iconName} size={calculatedIconSize} className={spacingClass} />;
    };

    return (
      <Link
        href={href}
        prefetch={prefetch}
        className={baseClassName}
        ref={ref}
        data-loading={loading ? 'true' : undefined}
        {...rest}
      >
        {loading && <LoadingSpinner />}
        {renderIcon('left')}
        {children}
        {renderIcon('right')}
      </Link>
    );
  }
);

LinkButton.displayName = 'LinkButton';

export default LinkButton;



================================================
FILE: src/components/ui/Select.tsx
================================================
'use client';

import React, { useId, useMemo, useState } from "react";
import { ChevronDown, Check, Search, X } from "lucide-react";
import { cn } from "@/utils/cn";
import Input from "./Input";

type SelectValue = string | number;

interface SelectOption {
  label: string;
  value: SelectValue;
  description?: string;
  disabled?: boolean;
}

interface SelectBaseProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "onChange" | "value" | "defaultValue"> {
  className?: string;
  options?: SelectOption[];
  placeholder?: string;
  disabled?: boolean;
  required?: boolean;
  label?: React.ReactNode;
  description?: React.ReactNode;
  error?: React.ReactNode;
  searchable?: boolean;
  clearable?: boolean;
  loading?: boolean;
  id?: string;
  name?: string;
  onOpenChange?: (open: boolean) => void;
}

type SingleSelectProps = SelectBaseProps & {
  multiple?: false;
  value?: SelectValue;
  defaultValue?: SelectValue;
  onChange?: (value: SelectValue | undefined) => void;
};

type MultiSelectProps = SelectBaseProps & {
  multiple: true;
  value?: SelectValue[];
  defaultValue?: SelectValue[];
  onChange?: (value: SelectValue[]) => void;
};

type SelectProps = SingleSelectProps | MultiSelectProps;

const Select = React.forwardRef<HTMLButtonElement, SelectProps>(function Select(
  {
    className,
    options = [],
    value,
    defaultValue,
    placeholder = "Select an option",
    multiple = false,
    disabled = false,
    required = false,
    label,
    description,
    error,
    searchable = false,
    clearable = false,
    loading = false,
    id,
    name,
    onChange,
    onOpenChange,
    ...buttonProps
  },
  ref
) {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");

  const generatedId = useId();
  const selectId = id ?? generatedId;

  const resolvedValue = useMemo(() => {
    if (multiple) {
      const arrayValue = Array.isArray(value) ? value : Array.isArray(defaultValue) ? defaultValue : [];
      return arrayValue;
    }
    return (value ?? defaultValue) as SelectValue | undefined;
  }, [defaultValue, multiple, value]);

  const filteredOptions = useMemo<SelectOption[]>(() => {
    if (!searchable || searchTerm.trim() === "") {
      return options;
    }

    const normalizedTerm = searchTerm.toLowerCase();

    return options.filter((option) => {
      const labelMatch = option.label.toLowerCase().includes(normalizedTerm);
      const valueMatch = option.value?.toString().toLowerCase().includes(normalizedTerm);
      return labelMatch || valueMatch;
    });
  }, [options, searchable, searchTerm]);

  const getSelectedDisplay = (): string => {
    if (multiple) {
      const selectedValues = resolvedValue as SelectValue[];
      if (!selectedValues.length) return placeholder;
      const selectedOptions = options.filter((opt) => selectedValues.includes(opt.value));
      if (!selectedOptions.length) return placeholder;
      if (selectedOptions.length === 1) return selectedOptions[0].label;
      return `${selectedOptions.length} items selected`;
    }

    const selectedValue = resolvedValue as SelectValue | undefined;
    if (selectedValue === undefined || selectedValue === "") {
      return placeholder;
    }
    const selectedOption = options.find((opt) => opt.value === selectedValue);
    return selectedOption ? selectedOption.label : placeholder;
  };

  const handleToggle = () => {
    if (disabled) return;
    const nextIsOpen = !isOpen;
    setIsOpen(nextIsOpen);
    onOpenChange?.(nextIsOpen);
    if (!nextIsOpen) {
      setSearchTerm("");
    }
  };

  const handleOptionSelect = (option: SelectOption) => {
    if (multiple) {
      const currentValues = resolvedValue as SelectValue[];
      const nextValues = currentValues.includes(option.value)
        ? currentValues.filter((val) => val !== option.value)
        : [...currentValues, option.value];
      (onChange as MultiSelectProps["onChange"] | undefined)?.(nextValues);
    } else {
      (onChange as SingleSelectProps["onChange"] | undefined)?.(option.value);
      setIsOpen(false);
      onOpenChange?.(false);
    }
  };

  const handleClear = () => {
    if (multiple) {
      (onChange as MultiSelectProps["onChange"] | undefined)?.([]);
    } else {
      (onChange as SingleSelectProps["onChange"] | undefined)?.(undefined);
    }
  };

  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  };

  const isSelected = (optionValue: SelectValue): boolean => {
    if (multiple) {
      return (resolvedValue as SelectValue[]).includes(optionValue);
    }
    return resolvedValue === optionValue;
  };

  const hasValue = multiple
    ? (resolvedValue as SelectValue[]).length > 0
    : resolvedValue !== undefined && resolvedValue !== "";

  const hiddenSelectValue = multiple
    ? (resolvedValue as SelectValue[]).map((val) => val.toString())
    : resolvedValue !== undefined
      ? resolvedValue.toString()
      : "";

  return (
    <div className={cn("relative", className)}>
      {label && (
        <label
          htmlFor={selectId}
          className={cn(
            "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 mb-2 block",
            error ? "text-destructive" : "text-foreground"
          )}
        >
          {label}
          {required && <span className="text-destructive ml-1">*</span>}
        </label>
      )}
      <div className="relative">
        <button
          ref={ref}
          id={selectId}
          type="button"
          className={cn(
            "flex h-10 w-full items-center justify-between rounded-md border border-input bg-white text-black px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
            error && "border-destructive focus:ring-destructive",
            !hasValue && "text-muted-foreground"
          )}
          onClick={handleToggle}
          disabled={disabled}
          aria-expanded={isOpen}
          aria-haspopup="listbox"
          {...buttonProps}
        >
          <span className="truncate">{getSelectedDisplay()}</span>

          <div className="flex items-center gap-1">
            {loading && (
              <svg className="animate-spin h-4 w-4" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
              </svg>
            )}

            {clearable && hasValue && !loading && (
              <span
                role="button"
                tabIndex={0}
                onMouseDown={(event) => event.preventDefault()}
                onClick={(event) => {
                  event.stopPropagation();
                  handleClear();
                }}
                onKeyDown={(event) => {
                  if (event.key === 'Enter' || event.key === ' ') {
                    event.preventDefault();
                    event.stopPropagation();
                    handleClear();
                  }
                }}
                className="flex h-5 w-5 items-center justify-center rounded-full text-muted-foreground transition-colors hover:text-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                aria-label="Clear selection"
              >
                <X className="h-3 w-3" />
              </span>
            )}

            <ChevronDown className={cn("h-4 w-4 transition-transform", isOpen && "rotate-180")} />
          </div>
        </button>

        <select
          name={name}
          value={hiddenSelectValue}
          onChange={() => undefined}
          className="sr-only"
          tabIndex={-1}
          multiple={multiple}
          required={required}
        >
          {!multiple && <option value="">Select...</option>}
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>

        {isOpen && (
          <div className="absolute z-50 w-full mt-1 bg-white text-black border border-border rounded-md shadow-md">
            {searchable && (
              <div className="p-2 border-b">
                <div className="relative">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search options..."
                    value={searchTerm}
                    onChange={handleSearchChange}
                    className="pl-8"
                  />
                </div>
              </div>
            )}

            <div className="py-1 max-h-60 overflow-auto">
              {filteredOptions.length === 0 ? (
                <div className="px-3 py-2 text-sm text-muted-foreground">
                  {searchTerm ? "No options found" : "No options available"}
                </div>
              ) : (
                filteredOptions.map((option) => (
                  <div
                    key={option.value}
                    className={cn(
                      "relative flex cursor-pointer select-none items-center rounded-sm px-3 py-2 text-sm outline-none hover:bg-accent hover:text-accent-foreground",
                      isSelected(option.value) && "bg-primary text-primary-foreground",
                      option.disabled && "pointer-events-none opacity-50"
                    )}
                    onClick={() => !option.disabled && handleOptionSelect(option)}
                    role="option"
                    aria-selected={isSelected(option.value)}
                  >
                    <span className="flex-1">{option.label}</span>
                    {multiple && isSelected(option.value) && (
                      <Check className="h-4 w-4" />
                    )}
                    {option.description && (
                      <span className="text-xs text-muted-foreground ml-2">
                        {option.description}
                      </span>
                    )}
                  </div>
                ))
              )}
            </div>
          </div>
        )}
      </div>
      {description && !error && (
        <p className="text-sm text-muted-foreground mt-1">
          {description}
        </p>
      )}
      {error && (
        <p className="text-sm text-destructive mt-1">
          {error}
        </p>
      )}
    </div>
  );
});

Select.displayName = "Select";

export type { SelectOption, SelectProps, SelectValue };
export default Select;



================================================
FILE: src/i18n/config.ts
================================================
export const locales = ['en', 'fr'] as const;

export type Locale = (typeof locales)[number];

export const defaultLocale: Locale = 'en';



================================================
FILE: src/i18n/getMessages.ts
================================================
import type { Locale } from './config';

export async function getMessages(locale: Locale) {
  try {
    // Load all translation files for the locale
    const [global, home, about, services, portfolio, contact, chatbot] = await Promise.all([
      import(`./messages/${locale}/global.json`).then(m => m.default).catch(() => ({})),
      import(`./messages/${locale}/home.json`).then(m => m.default).catch(() => ({})),
      import(`./messages/${locale}/about.json`).then(m => m.default).catch(() => ({})),
      import(`./messages/${locale}/services.json`).then(m => m.default).catch(() => ({})),
      import(`./messages/${locale}/portfolio.json`).then(m => m.default).catch(() => ({})),
      import(`./messages/${locale}/contact.json`).then(m => m.default).catch(() => ({})),
      import(`./messages/${locale}/chatbot.json`).then(m => m.default).catch(() => ({}))
    ]);

    // Merge all translations into a single object
    return {
      global,
      home,
      about,
      services,
      portfolio,
      contact,
      chatbot
    };
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.warn(`Missing messages for locale "${locale}". Using empty object.`, error);
    }
    return {
      global: {},
      home: {},
      about: {},
      services: {},
      portfolio: {},
      contact: {},
      chatbot: {}
    };
  }
}



================================================
FILE: src/i18n/request.ts
================================================
import { getRequestConfig } from 'next-intl/server';
import { defaultLocale, locales, type Locale } from './config';
import { getMessages } from './getMessages';

export default getRequestConfig(async ({ locale }) => {
  const candidate = locale as string | undefined;

  const resolved: Locale =
    candidate && (locales as readonly string[]).includes(candidate)
      ? (candidate as Locale)
      : defaultLocale;

  try {
    const messages = await getMessages(resolved);
    return {
      locale: resolved,
      messages
    };
  } catch (err) {
    if (process.env.NODE_ENV === 'development') {
      console.warn(
        `next-intl: Missing or invalid messages for locale "${resolved}". Using empty messages.`,
        err
      );
    }
    return {
      locale: resolved,
      messages: {
        global: {},
        home: {},
        about: {},
        services: {},
        portfolio: {},
        contact: {}
      }
    };
  }
});



================================================
FILE: src/i18n/messages/en/about.json
================================================
{
  "title": "About Nicky Bruno",
  "subtitle": "Creative Technologist & Digital Consultant",
  "description": "From design to AI, I build digital solutions that think, adapt, and evolve.",
  "metadata": {
    "title": "About - Nicky Bruno | The Creative Technologist",
    "description": "Meet Nicky Bruno, the creative technologist bridging design, development, and AI innovation from Montreal to the world.",
    "ogTitle": "About - Nicky Bruno | The Creative Technologist",
    "ogDescription": "Two decades of evolution from creative foundation to AI pioneer, mastering the intersection of human creativity and technological innovation."
  },
  "sections": {
    "intro": {
      "badge": "Identity Revelation",
      "title": "Who I Am",
      "titleHighlight": "",
      "paragraph1": "Hi, I'm Nicky Bruno, a creative technologist based in Montreal. I bring together two decades of experience at the crossroads of design, development, and automation. I don't choose between creativity and code — I use both to build smarter digital systems.",
      "paragraph2": "My work isn't about just launching websites. It's about crafting intelligent experiences that connect human intuition with machine precision. I'm fluent in both strategy and execution, design thinking and engineering — and I bring it all into every project.",
      "paragraph3": "🌍 Global Impact 🧠 Visionary Thinking 🛠 Technical Execution 🤝 Human-Centered Collaboration",
      "imageAlt": "Nicky Bruno - Creative Technologist",
      "status": "ONLINE",
      "location": "Montreal, QC",
      "globalImpact": "Global Impact",
      "attributes": {
        "visionary": {
          "label": "Visionary",
          "desc": "Future-focused thinking"
        },
        "technical": {
          "label": "Technical",
          "desc": "Masterful execution"
        },
        "human": {
          "label": "Human",
          "desc": "Warmly approachable"
        },
        "collaborative": {
          "label": "Collaborative",
          "desc": "Partnership-driven"
        }
      }
    },
    "timeline": {
      "badge": "Career Timeline",
      "title": "Career Timeline",
      "description": "20+ years of building future-ready digital solutions.",
      "keyAchievements": "Key Achievements:",
      "currentStatus": {
        "badge": "Current Status",
        "title": "Ready for Your Next Challenge",
        "description": "With 20+ years of evolution from creative foundation to AI pioneer, I'm positioned to tackle the most ambitious projects at the intersection of design, technology, and artificial intelligence."
      },
      "milestones": {
        "2004": {
          "title": "Freelance Designer",
          "company": "Freelance Designer",
          "location": "Montreal, QC",
          "description": "Built first client websites, mastered Adobe Suite.",
          "achievements": ["First client portfolio", "Adobe Creative Suite mastery", "Web standards adoption"]
        },
        "2008": {
          "title": "Creative Agency Lead",
          "company": "Creative Agency Lead",
          "location": "Montreal, QC",
          "description": "Led UX-driven projects and design teams.",
          "achievements": ["Team leadership", "UX methodology", "Client relationship management"]
        },
        "2012": {
          "title": "Senior Developer",
          "company": "Senior Developer",
          "location": "Montreal, QC",
          "description": "Full-stack, database optimization, performance-focused.",
          "achievements": ["Full-stack development", "Database optimization", "Performance engineering"]
        },
        "2016": {
          "title": "Tech Consultant",
          "company": "Tech Consultant",
          "location": "North America",
          "description": "Advised companies across North America on digital transformation.",
          "achievements": ["Cross-border projects", "Digital strategy", "Technology consulting"]
        },
        "2018": {
          "title": "Founder, AIAA.dev",
          "company": "AIAA.dev Founder",
          "location": "Montreal, QC",
          "description": "Pioneered AI integration and custom workflow automation.",
          "achievements": ["AI automation", "Machine learning", "Workflow optimization"]
        },
        "2024": {
          "title": "Creative Technologist",
          "company": "Independent Practice",
          "location": "Global",
          "description": "Delivering AI-powered, design-forward digital systems globally.",
          "achievements": ["Global recognition", "AI-human collaboration", "Intelligent experiences"]
        }
      }
    },
    "experienceCounter": {
      "badge": "Experience by the Numbers",
      "title": "Proven Track Record",
      "description": "Two decades of bridging creativity and technology, delivering intelligent experiences that drive real business impact across industries and continents.",
      "stats": {
        "years": {
          "label": "20+ years",
          "description": "blending design & tech"
        },
        "projects": {
          "label": "80+ projects",
          "description": "across industries"
        },
        "clients": {
          "label": "15+ countries",
          "description": "served"
        },
        "awards": {
          "label": "Multiple industry awards",
          "description": "Recognition for excellence"
        }
      },
      "highlights": {
        "growth": {
          "label": "40%+ improvement",
          "description": "in business processes"
        },
        "global": {
          "label": "Early AI adopter",
          "description": "since 2018"
        },
        "pioneer": {
          "label": "Clients from 5 continents",
          "description": "Global reach"
        }
      }
    },
    "credentials": {
      "badge": "Recognized Expertise",
      "title": "Industry Recognition",
      "description": "Continuous learning and community contribution through certifications, speaking engagements, publications, and open source projects.",
      "sections": {
        "certifications": {
          "title": "Certifications",
          "items": {
            "aws": {
              "title": "AWS Certified Solutions Architect",
              "issuer": "Amazon Web Services",
              "year": "2023"
            },
            "google": {
              "title": "Google AI/ML Certification",
              "issuer": "Google Cloud",
              "year": "2022"
            },
            "react": {
              "title": "React Advanced Patterns",
              "issuer": "Meta",
              "year": "2023"
            },
            "ux": {
              "title": "UX Design Professional",
              "issuer": "Adobe",
              "year": "2021"
            }
          }
        },
        "speaking": {
          "title": "Speaking Engagements",
          "items": {
            "aiSummit": {
              "event": "AI & Design Summit",
              "topic": "The Future of Creative AI",
              "location": "Toronto, ON",
              "attendees": "500+"
            },
            "montrealTech": {
              "event": "Montreal Tech Conference",
              "topic": "Bridging Design & Development",
              "location": "Montreal, QC",
              "attendees": "300+"
            },
            "reactMeetup": {
              "event": "React Montreal Meetup",
              "topic": "Performance Optimization",
              "location": "Montreal, QC",
              "attendees": "150+"
            }
          }
        },
        "publications": {
          "title": "Publications",
          "reads": "reads",
          "items": {
            "designSystems": {
              "title": "AI-Driven Design Systems",
              "publication": "Smashing Magazine",
              "date": "March 2024",
              "reads": "15K+"
            },
            "manifesto": {
              "title": "The Creative Technologist Manifesto",
              "publication": "Medium",
              "date": "January 2024",
              "reads": "8K+"
            },
            "renaissance": {
              "title": "Montreal's Tech Renaissance",
              "publication": "TechCrunch",
              "date": "November 2023",
              "reads": "12K+"
            }
          }
        },
        "openSource": {
          "title": "Open Source",
          "items": {
            "reactAi": {
              "project": "react-ai-components",
              "description": "AI-powered React component library",
              "stars": "2.3K",
              "language": "TypeScript"
            },
            "designSystemAi": {
              "project": "design-system-ai",
              "description": "Automated design system generator",
              "stars": "1.8K",
              "language": "JavaScript"
            },
            "montrealMap": {
              "project": "montreal-tech-map",
              "description": "Interactive Montreal tech ecosystem",
              "stars": "950",
              "language": "React"
            }
          }
        },
        "communityImpact": {
          "title": "Community Impact",
          "description": "Committed to sharing knowledge and advancing the creative technology community through education, open source, and thought leadership.",
          "stats": {
            "readers": {
              "value": "50K+",
              "label": "Article Readers"
            },
            "stars": {
              "value": "5K+",
              "label": "GitHub Stars"
            },
            "attendees": {
              "value": "1K+",
              "label": "Conference Attendees"
            }
          }
        }
      }
    },
    "experience": {
      "title": "Experience & Expertise",
      "content": "With a background spanning web development, UX design, and AI integration, I bring a unique perspective to every project. I've worked with startups, established businesses, and everything in between, always focusing on solutions that deliver real value."
    },
    "approach": {
      "title": "My Approach",
      "content": "Tech should empower people. My process starts with understanding your goals and ends with smart, intuitive systems that free up your time and drive results."
    },
    "values": {
      "title": "What I Value",
      "items": {
        "innovation": {
          "title": "Innovation",
          "description": "Always evolving"
        },
        "collaboration": {
          "title": "Collaboration",
          "description": "Co-create with purpose"
        },
        "quality": {
          "title": "Quality",
          "description": "Future-proof solutions"
        },
        "transparency": {
          "title": "Transparency",
          "description": "No jargon, just clarity"
        }
      }
    },
    "cta": {
      "title": "Let's Build Something Extraordinary",
      "titleHighlight": "",
      "description": "With 20 years of experience, a global reach, and a passion for innovation, I'm ready to take on your next digital challenge.",
      "buttons": {
        "startProject": "Start Your Project",
        "viewWork": "View My Work"
      },
      "status": {
        "available": "Response within 24h • Currently available",
        "response": "Response within 24h"
      }
    }
  },
  "timeline": {
    "title": "Career Timeline",
    "items": {
      "2024": {
        "title": "AI Integration Specialist",
        "description": "Focusing on AI automation and intelligent workflow solutions."
      },
      "2020": {
        "title": "Full-Stack Developer",
        "description": "Expanding into backend development and cloud infrastructure."
      },
      "2018": {
        "title": "Frontend Specialist",
        "description": "Deepening expertise in React, TypeScript, and modern web technologies."
      },
      "2015": {
        "title": "Web Designer & Developer",
        "description": "Combining design and development skills for comprehensive solutions."
      },
      "2010": {
        "title": "Graphic Designer",
        "description": "Starting career in visual design and brand development."
      }
    }
  },
  "credentials": {
    "title": "Credentials & Certifications",
    "items": {
      "certification1": {
        "title": "AWS Certified Solutions Architect",
        "issuer": "Amazon Web Services",
        "year": "2023"
      },
      "certification2": {
        "title": "Google Cloud Professional Developer",
        "issuer": "Google Cloud",
        "year": "2022"
      },
      "certification3": {
        "title": "React Developer Certification",
        "issuer": "Meta",
        "year": "2021"
      }
    }
  }
}


================================================
FILE: src/i18n/messages/en/chatbot.json
================================================
{
  "title": "Ask Nicky's AI",
  "subtitle": "Instant support, anytime",
  "placeholder": "Type your question here...",
  "send": "Send",
  "typing": "Hang tight, crafting a response...",
  "welcome": "Hey there! I'm Nicky's AI assistant. Need help with a project or have a question?",
  "suggestionsTitle": "Try asking:",
  "suggestion1": "What kind of services do you provide?",
  "suggestion2": "How much does a custom website cost?",
  "suggestion3": "Can you integrate AI into my business?",
  "suggestion4": "Are you currently accepting new projects?",
  "statusOnline": "Available Now",
  "statusOffline": "Currently Offline",
  "statusConnecting": "Connecting to assistant...",
  "statusError": "Oops! Something went wrong.",
  "errorSendFailed": "Couldn't send your message. Please try again.",
  "errorNetworkError": "Network issue — check your internet connection.",
  "errorServerError": "Server is down. Please try again later.",
  "errorMessageTooLong": "Message is too long. Try shortening it.",
  "errorEmptyMessage": "Type something before hitting send.",
  "actionMinimize": "Hide chat",
  "actionMaximize": "Open chat",
  "actionClose": "Close assistant",
  "actionClear": "Clear chat history",
  "actionRetry": "Try again",
  "accessibilityOpenChat": "Open support chat window",
  "accessibilityCloseChat": "Close support chat",
  "accessibilitySendMessage": "Press to send message",
  "accessibilityMessageInput": "Message input field",
  "accessibilityChatHistory": "Previous chat messages"
}



================================================
FILE: src/i18n/messages/en/contact.json
================================================
{
  "title": "Contact",
  "subtitle": "Let's Build Something Extraordinary",
  "description": "Have a project in mind? Let's connect and bring it to life with smart design, AI integration, and modern tech.",
  "metadata": {
    "title": "Contact - Nicky Bruno | Creative Technologist",
    "description": "Let's collaborate on your next project—connect with Nicky Bruno for AI-driven design, development, and strategy.",
    "ogTitle": "Contact - Nicky Bruno",
    "ogDescription": "Start a conversation about creative technology, AI automation, and digital transformation."
  },
  "sections": {
    "hero": {
      "badge": "Ready to Start Your Project?",
      "title": "Let's Work Together",
      "titleHighlight": "",
      "description": "Whether you're launching a web platform, automating with AI, or rethinking your digital strategy — I'm here to help.",
      "stats": {
        "response": {
          "title": "24hr Response Time",
          "description": "Quick turnaround on all inquiries"
        },
        "global": {
          "title": "Global Collaboration",
          "description": "Working with clients worldwide"
        },
        "confidential": {
          "title": "100% Confidential",
          "description": "All inquiries are secure & private"
        }
      }
    },
    "intro": {
      "title": "Quick Contact Form",
      "subtitle": "Tell me a bit about your project. I'll get back to you within a day.",
      "description": "I'm always excited to work on new projects and help businesses achieve their digital goals. Whether you need a new website, AI automation, or strategic consulting, I'm here to help."
    },
    "form": {
      "title": "Required Fields:",
      "subtitle": "Tell me about your project",
      "description": "Have a question or want to get in touch? Send me a quick message",
      "fields": {
        "name": {
          "label": "Full Name*",
          "placeholder": "Your name"
        },
        "email": {
          "label": "Email Address*",
          "placeholder": "your@email.com"
        },
        "company": {
          "label": "Company/Organization",
          "placeholder": "Your company (optional)"
        },
        "projectType": {
          "label": "Project Type*",
          "placeholder": "Select type",
          "options": {
            "web": "Web Development",
            "ai": "AI Integration",
            "design": "Design Consultation",
            "automation": "Process Automation",
            "fullstack": "Full-Stack Solution",
            "other": "Other"
          }
        },
        "budget": {
          "label": "Budget Range",
          "placeholder": "Select budget",
          "options": {
            "5k-15k": "$5K - $15K CAD",
            "15k-30k": "$15K - $30K CAD",
            "30k-50k": "$30K - $50K CAD",
            "50k+": "$50K+ CAD",
            "discuss": "Let's Discuss"
          }
        },
        "timeline": {
          "label": "Timeline",
          "placeholder": "Select timeline",
          "options": {
            "asap": "ASAP (Rush Project)",
            "1-2months": "1-2 Months",
            "3-6months": "3-6 Months",
            "6months+": "6+ Months",
            "flexible": "Flexible Timeline"
          }
        },
        "message": {
          "label": "Message",
          "placeholder": "Describe your project, goals, and any specific requirements..."
        }
      },
      "newsletter": {
        "title": "Subscribe to AI automation insights newsletter",
        "description": "Get monthly tips on creative automation and industry trends"
      },
      "terms": {
        "label": "I agree to the terms and conditions*",
        "description": "Required to process your project inquiry"
      },
      "submit": "Send Project Inquiry",
      "responseTime": "Expected response time: Within 24 hours • All inquiries are confidential",
      "success": "Thank you! I'll get back to you within 24 hours.",
      "error": "Something went wrong. Please try again.",
      "validation": {
        "nameRequired": "Please enter your name",
        "emailRequired": "Please enter your email",
        "emailInvalid": "Please enter a valid email address",
        "projectTypeRequired": "Please select a project type",
        "messageRequired": "Please enter a message",
        "termsRequired": "You must accept the terms and conditions"
      }
    },
    "info": {
      "title": "Prefer to Reach Out Directly?",
      "items": {
        "email": {
          "label": "Email",
          "value": "hello@nickybruno.ca",
          "description": "Primary contact for project inquiries"
        },
        "phone": {
          "label": "Phone",
          "value": "+1 (514) 555-0123",
          "description": "Available Mon-Fri, 9AM-6PM EST"
        },
        "location": {
          "label": "Location",
          "value": "Montreal, QC – available globally",
          "description": "Available for local & remote projects"
        },
        "response": {
          "label": "Response Time",
          "value": "Within 24 hours",
          "description": "Typically same-day for urgent projects"
        }
      }
    },
    "social": {
      "title": "Connect Online",
      "items": {
        "linkedin": {
          "name": "LinkedIn",
          "description": "For updates & networking"
        },
        "github": {
          "name": "GitHub",
          "description": "See my code & projects"
        },
        "twitter": {
          "name": "Twitter",
          "description": "Follow thoughts & trends"
        },
        "instagram": {
          "name": "Instagram",
          "description": "Peek behind the scenes"
        }
      }
    },
    "quickActions": {
      "title": "Quick Actions",
      "items": [
        "Schedule a Consultation Call",
        "Download Process Methodology",
        "View Case Study Examples"
      ]
    },
    "projectBrief": {
      "title": "Detailed Project Brief",
      "subtitle": "Need a comprehensive quote? Fill out this detailed brief for complex projects",
      "step": "Step",
      "of": "of",
      "stepTitle": {
        "1": "Contact Information & Project Overview",
        "2": "Key Features",
        "3": "Design & Technical Requirements",
        "4": "Timeline, Budget & Challenges"
      },
      "stepDescription": {
        "1": "Let's start with your contact details and project basics",
        "2": "What features are essential for your project?",
        "3": "Define the look, feel, and technical needs",
        "4": "Help me understand your timeline and constraints"
      },
      "contactInfo": {
        "title": "Your Contact Information",
        "fields": {
          "name": {
            "label": "Full Name*",
            "placeholder": "Your name"
          },
          "email": {
            "label": "Email Address*",
            "placeholder": "your@email.com"
          },
          "phone": {
            "label": "Phone Number",
            "placeholder": "+1 (514) 555-0123"
          },
          "company": {
            "label": "Company/Organization",
            "placeholder": "Your company (optional)"
          }
        }
      },
      "overview": "Project Overview",
      "description": "Let's start with the basics of your project",
      "fields": {
        "goal": {
          "label": "What's your main project goal?*",
          "placeholder": "e.g., Launch an e-commerce store, build a portfolio, create a SaaS platform..."
        },
        "audience": {
          "label": "Who is your target audience?*",
          "placeholder": "e.g., Young professionals, B2B clients, creative agencies..."
        },
        "inspiration": {
          "label": "Any inspiration or reference sites?",
          "placeholder": "Share URLs or describe styles you like..."
        }
      },
      "navigation": {
        "previous": "Previous",
        "next": "Next Step",
        "submit": "Generate Project Brief"
      },
      "status": {
        "submitting": "Submitting...",
        "success": {
          "title": "Success!",
          "message": "Your project brief has been submitted successfully. I'll review it and get back to you within 24-48 hours."
        },
        "error": {
          "title": "Submission Failed",
          "message": "Something went wrong. Please try again or contact me directly."
        }
      },
      "validation": {
        "nameRequired": "Please enter your name",
        "emailRequired": "Please enter your email",
        "emailInvalid": "Please enter a valid email address",
        "projectGoalRequired": "Please describe your project goal",
        "targetAudienceRequired": "Please describe your target audience"
      }
    },
    "location": {
      "title": "Based in Montreal",
      "description": "Working with clients locally and internationally. Available for remote collaboration and on-site projects.",
      "details": {
        "address": {
          "label": "Address",
          "value": "Montreal, Quebec, Canada"
        },
        "timezone": {
          "label": "Timezone",
          "value": "Eastern Time (UTC-5)"
        },
        "serviceArea": {
          "label": "Service Area",
          "value": "Global (Remote & Local)"
        },
        "travel": {
          "label": "Travel",
          "value": "Available for on-site projects"
        }
      },
      "studio": {
        "name": "Nicky Bruno Studio",
        "tagline": "Creative Technology Hub",
        "location": "Montreal, QC"
      }
    },
    "faq": {
      "title": "FAQs — Quick Answers",
      "subtitle": "Quick answers to common questions about working together",
      "items": {
        "timeline": {
          "question": "Project timelines?",
          "answer": "Typically 2–12 weeks, depending on scope."
        },
        "international": {
          "question": "Work globally?",
          "answer": "Yes — remote and on-site projects welcome."
        },
        "aiServices": {
          "question": "AI services?",
          "answer": "Yes — from automation to custom solutions."
        },
        "revisions": {
          "question": "Revisions?",
          "answer": "Always included (2–3 rounds per project)."
        },
        "payment": {
          "question": "Payments?",
          "answer": "50% upfront, balance on delivery or by milestones."
        },
        "support": {
          "question": "Ongoing support?",
          "answer": "Absolutely — maintenance packages available."
        }
      },
      "cta": {
        "title": "Don't see your question?",
        "button": "Ask Me Directly"
      }
    },
    "cta": {
      "title": "Let's Talk",
      "description": "I've helped startups, brands, and teams level up their digital presence — now let's do the same for you.",
      "buttons": {
        "startConversation": "Start a Conversation",
        "scheduleConsultation": "Schedule a Consultation"
      },
      "location": "Based in Montreal • Serving clients worldwide"
    }
  }
}


================================================
FILE: src/i18n/messages/en/global.json
================================================
{
  "navigation": {
    "home": "Home",
    "about": "About",
    "services": "Services",
    "portfolio": "Portfolio",
    "testimonials": "Testimonials",
    "contact": "Contact",
    "cta": "Start a Project"
  },
  "common": {
    "loading": "Loading...",
    "error": "Oops! Something went wrong.",
    "retry": "Retry",
    "close": "Close",
    "open": "Open",
    "next": "Next",
    "previous": "Previous",
    "submit": "Submit",
    "cancel": "Cancel",
    "save": "Save",
    "edit": "Edit",
    "delete": "Delete",
    "view": "View",
    "learnMore": "Learn More",
    "getStarted": "Get Started",
    "readMore": "Read More",
    "seeMore": "See More",
    "showLess": "Show Less",
    "showMore": "Show More",
    "viewProject": "View Project",
    "viewCase": "View Case",
    "viewCaseStudy": "View Case Study",
    "liveDemo": "Live Demo",
    "caseStudy": "Case Study",
    "featuredProject": "Featured Project",
    "industryAwards": "Industry Awards",
    "communityLeader": "Community Leader",
    "continuousLearning": "Lifelong Learner",
    "creativeTechnologist": "Creative Technologist"
  },
  "seo": {
    "title": "Nicky Bruno | Creative Technologist & Experience Designer",
    "description": "Explore the digital work of Nicky Bruno — blending design, development, and AI storytelling to deliver future-ready experiences.",
    "keywords": "creative technologist, web design, AI automation, UX strategy, Montreal digital consultant"
  },
  "meta": {
    "siteName": "Nicky Bruno",
    "author": "Nicky Bruno",
    "language": "en",
    "charset": "utf-8"
  },
  "languageSwitcher": {
    "label": "Language",
    "current": "English",
    "switchTo": "Switch to",
    "english": "English",
    "french": "Français",
    "ariaLabel": "Select language"
  },
  "footer": {
    "title": "Nicky Bruno",
    "subtitle": "Creative Technologist & Digital Consultant",
    "description": "Crafting modern, intelligent experiences through thoughtful design and cutting-edge technology.",
    "sections": {
      "services": {
        "title": "Services",
        "items": [
          "Web Development",
          "AI & Automation",
          "Design & Branding",
          "Digital Strategy"
        ]
      },
      "company": {
        "title": "Company",
        "items": [
          "About",
          "Portfolio",
          "Testimonials",
          "Contact"
        ]
      },
      "resources": {
        "title": "Resources",
        "items": [
          "Blog",
          "Case Studies",
          "Docs",
          "Support"
        ]
      },
      "legal": {
        "title": "Legal",
        "items": [
          "Privacy Policy",
          "Terms of Use",
          "Cookie Policy",
          "GDPR Info"
        ]
      }
    },
    "contact": {
      "title": "Let's Connect",
      "email": "hello@nickybruno.com",
      "location": "Montreal, Canada",
      "description": "Working remotely with clients worldwide"
    },
    "social": {
      "title": "Connect Online",
      "linkedin": "LinkedIn",
      "twitter": "Twitter",
      "github": "GitHub",
      "dribbble": "Dribbble"
    },
    "newsletter": {
      "title": "Join the Newsletter",
      "description": "Get fresh insights on AI, design, and creative technology.",
      "placeholder": "Enter your email",
      "button": "Subscribe",
      "success": "Thank you for subscribing!",
      "error": "Something went wrong. Please try again."
    },
    "copyright": "© 2024 Nicky Bruno. All rights reserved.",
    "madeWith": "Made with ❤️ in Montreal",
    "backToTop": "Back to top"
  }
}



================================================
FILE: src/i18n/messages/en/home.json
================================================
{
  "metadata": {
    "title": "Nicky Bruno | Creative Technologist & Experience Designer",
    "description": "Step into the immersive hero experience of Nicky Bruno, the creative technologist blending design, engineering, and AI-driven storytelling.",
    "ogTitle": "Nicky Bruno | Creative Technologist",
    "ogDescription": "Navigate a holographic-inspired interface showcasing the innovation and craft behind Nicky Bruno's work.",
    "ogSiteName": "Nicky Bruno"
  },
  "floatingTaglines": {
    "one": "Websites",
    "two": "Automation",
    "three": "Design systems",
    "four": "Strategy",
    "five": "AI workflows",
    "six": "Meaningful results"
  },
  "hero": {
    "title": "Design. Automate. Elevate.",
    "subtitle": "I create powerful digital systems that simplify, streamline, and scale your business.",
    "description": "From stunning websites to smart automation and AI-infused tools — I help you work smarter and stand out online.",
    "ctaPrimary": "See My Work",
    "ctaSecondary": "Book a Discovery Call",
    "stats": {
      "experience": {
        "value": "20+",
        "label": "years experience"
      },
      "projects": {
        "value": "80+",
        "label": "projects delivered"
      },
      "hoursSaved": {
        "value": "4,000+",
        "label": "hours saved"
      }
    },
    "status": "Based in Montreal • Available for projects",
    "response": "Response within 24h",
    "portraitAlt": "Nicky Bruno - Creative Technologist"
  },
  "intro": {
    "greeting": "Hi, I'm Nicky Bruno — a creative technologist and digital consultant.",
    "tagline": "I help businesses, startups, and entrepreneurs build modern websites, custom automations, and AI-driven systems that save time, boost visibility, and look incredible.",
    "paragraph": "Modern solutions that blend creativity, tech, and strategy."
  },
  "capabilities": {
    "title": "What I Do",
    "subtitle": "Modern solutions that blend creativity, tech, and strategy:",
    "description": "Practical, modern, human-centered solutions across design, engineering, and automation.",
    "cta": "Learn More",
    "items": {
      "webDesign": {
        "title": "Web Design & Dev",
        "description": "Fast, responsive, high-converting sites."
      },
      "automation": {
        "title": "Automation & AI",
        "description": "Workflows that save hours every week."
      },
      "brandStrategy": {
        "title": "Brand & Digital Strategy",
        "description": "Sharpen your brand, grow your impact."
      }
    }
  },
  "benefits": {
    "title": "Why It Works",
    "subtitle": "Real-world impact:",
    "items": {
      "timeSavings": {
        "icon": "💰",
        "title": "10+ hours/week saved:",
        "example": "Like automating client bookings for local service teams."
      },
      "visibility": {
        "icon": "🚀",
        "title": "Boosted visibility:",
        "example": "A restaurant client saw 45% more bookings in 60 days."
      },
      "understanding": {
        "icon": "🧠",
        "title": "Tech made simple:",
        "example": "No jargon. Just clear, smart solutions."
      }
    },
      "cta": "Learn more"
  },
  "loading": {
    "title": "Preparing your experience",
    "steps": {
      "one": "Initializing creative systems…",
      "two": "Loading automation modules…",
      "three": "Connecting data flows…",
      "four": "Calibrating experience layers…",
      "five": "Ready to build something remarkable."
    }
  },
  "personalIntro": {
    "title": "Personal Introduction",
    "greeting": "Hi, I'm Nicky Bruno",
    "subtitle": "Creative Technologist & Digital Consultant",
    "description": "I help businesses transform their digital presence through innovative solutions that combine cutting-edge technology with user-centered design.",
    "cta": "Learn more"
  },
  "learnMore": {
    "title": "Learn more",
    "subtitle": "What I do section",
    "description": "Discover how I can help your business succeed in the digital landscape.",
    "cta": "Learn more"
  },
  "realResults": {
    "title": "Real Results",
    "subtitle": "Learn more",
    "description": "See the measurable impact of my work on businesses like yours.",
    "cta": "Learn more"
  },
  "techArsenal": {
    "title": "Tech Arsenal",
    "subtitle": "Hover to interact • Tap icons to learn more",
    "description": "Explore the technologies and tools I use to build exceptional digital experiences.",
    "mostUsed": "Most Used",
    "cta": "Learn more"
  },
  "featuredProjects": {
    "title": "Featured Work",
    "subtitle": "Selected work that delivers results",
    "description": "Strategy, design, and engineering working together. Explore 3 outcomes below.",
    "projects": {
      "sofia": {
        "year": "2025",
        "type": "Case Study",
        "title": "Sofia AI Desk",
        "description": "Automated customer support with 60% faster replies.",
        "cta": "View project"
      },
      "nextxlevel": {
        "year": "2024",
        "type": "Case Study",
        "title": "Next X Level",
        "description": "Bilingual e-commerce, smooth UX, auto product updates.",
        "cta": "View project"
      },
      "lumicerra": {
        "year": "2023",
        "type": "Case Study",
        "title": "Lumicerra Labs",
        "description": "Real-time lighting dashboard with live energy insights.",
        "cta": "View project"
      }
    },
    "cta": "Explore the full portfolio"
  },
  "testimonials": {
    "title": "Client Voices",
    "subtitle": "What clients say about working with me",
    "description": "Hear from businesses that have transformed their digital presence through our collaboration.",
    "badge": "Testimonials",
    "heading": "Proof in real outcomes",
    "subheading": "Clear communication, reliable delivery, and measurable results for teams that move fast.",
    "items": [
      {
        "name": "Sofia Ops Team",
        "role": "Operations",
        "company": "Sofia AI Desk",
        "content": "Nicky simplified our workflow. We save hours every week.",
        "projectType": "AI Automation"
      },
      {
        "name": "Alexandra",
        "role": "CEO",
        "company": "InnovateTech",
        "content": "Creative vision + tech skills = transformed results.",
        "projectType": "Platform Design"
      },
      {
        "name": "Marcus Chen",
        "role": "Creative Director",
        "company": "Pixel Perfect Agency",
        "content": "A creative partner who speaks fluent code. Elegant, performant solutions that matched our ambition.",
        "projectType": "Interactive Web"
      }
    ]
  },
  "techStack": {
    "title": "What I Use",
    "subtitle": "Hover to interact • Tap icons to learn more",
    "description": "A curated collection of technologies I work with daily to build modern digital experiences.",
    "mostUsed": "Most Used",
    "tabs": {
      "all": "All",
      "core": "Core Stack",
      "automation": "Automation & AI",
      "cloud": "Cloud & Infra",
      "backend": "Backend & API",
      "design": "Design & Tools"
    },
    "tools": {
      "nextjs": {
        "name": "Next.js",
        "description": "React framework for production",
        "url": "https://nextjs.org"
      },
      "react": {
        "name": "React",
        "description": "JavaScript library for building UIs",
        "url": "https://react.dev"
      },
      "typescript": {
        "name": "TypeScript",
        "description": "Typed JavaScript at scale",
        "url": "https://typescriptlang.org"
      },
      "tailwind": {
        "name": "Tailwind CSS",
        "description": "Utility-first CSS framework",
        "url": "https://tailwindcss.com"
      },
      "supabase": {
        "name": "Supabase",
        "description": "Open source Firebase alternative",
        "url": "https://supabase.com"
      },
      "postgresql": {
        "name": "PostgreSQL",
        "description": "Advanced open source database",
        "url": "https://postgresql.org"
      },
      "prisma": {
        "name": "Prisma",
        "description": "Next-generation ORM for Node.js",
        "url": "https://prisma.io"
      },
      "nodejs": {
        "name": "Node.js",
        "description": "JavaScript runtime environment",
        "url": "https://nodejs.org"
      },
      "n8n": {
        "name": "n8n",
        "description": "Workflow automation platform",
        "url": "https://n8n.io"
      },
      "openai": {
        "name": "OpenAI",
        "description": "AI research and deployment",
        "url": "https://openai.com"
      },
      "zapier": {
        "name": "Zapier",
        "description": "Automation platform for workflows",
        "url": "https://zapier.com"
      },
      "docker": {
        "name": "Docker",
        "description": "Containerization platform",
        "url": "https://docker.com"
      },
      "netlify": {
        "name": "Netlify",
        "description": "Web development platform",
        "url": "https://netlify.com"
      },
      "cloudflare": {
        "name": "Cloudflare",
        "description": "Web performance and security",
        "url": "https://cloudflare.com"
      },
      "javascript": {
        "name": "JavaScript",
        "description": "Dynamic programming language",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript"
      },
      "python": {
        "name": "Python",
        "description": "High-level programming language",
        "url": "https://python.org"
      },
      "mongodb": {
        "name": "MongoDB",
        "description": "NoSQL document database",
        "url": "https://mongodb.com"
      },
      "graphql": {
        "name": "GraphQL",
        "description": "Query language for APIs",
        "url": "https://graphql.org"
      },
      "aws": {
        "name": "AWS",
        "description": "Amazon Web Services cloud platform",
        "url": "https://aws.amazon.com"
      },
      "firebase": {
        "name": "Firebase",
        "description": "Google's mobile and web platform",
        "url": "https://firebase.google.com"
      },
      "git": {
        "name": "Git",
        "description": "Version control system",
        "url": "https://git-scm.com"
      },
      "redux": {
        "name": "Redux",
        "description": "Predictable state container",
        "url": "https://redux.js.org"
      },
      "vite": {
        "name": "Vite",
        "description": "Next generation frontend tooling",
        "url": "https://vitejs.dev"
      },
      "webpack": {
        "name": "Webpack",
        "description": "Module bundler for JavaScript",
        "url": "https://webpack.js.org"
      },
      "huggingface": {
        "name": "Hugging Face",
        "description": "AI community and model hub",
        "url": "https://huggingface.co"
      },
      "langchain": {
        "name": "LangChain",
        "description": "Framework for LLM applications",
        "url": "https://langchain.com"
      },
      "ollama": {
        "name": "Ollama",
        "description": "Local LLM deployment",
        "url": "https://ollama.ai"
      },
      "replicate": {
        "name": "Replicate",
        "description": "AI model deployment platform",
        "url": "https://replicate.com"
      },
      "vapi": {
        "name": "Vapi",
        "description": "Voice AI platform",
        "url": "https://vapi.ai"
      },
      "cursor": {
        "name": "Cursor AI",
        "description": "AI-powered code editor",
        "url": "https://cursor.sh"
      },
      "chatgpt": {
        "name": "ChatGPT",
        "description": "AI conversational assistant",
        "url": "https://chat.openai.com"
      },
      "anthropic": {
        "name": "Claude",
        "description": "AI assistant by Anthropic",
        "url": "https://anthropic.com"
      },
      "airflow": {
        "name": "Apache Airflow",
        "description": "Workflow orchestration platform",
        "url": "https://airflow.apache.org"
      },
      "vercel": {
        "name": "Vercel",
        "description": "Frontend cloud platform",
        "url": "https://vercel.com"
      },
      "railway": {
        "name": "Railway",
        "description": "Cloud deployment platform",
        "url": "https://railway.app"
      },
      "digitalocean": {
        "name": "DigitalOcean",
        "description": "Cloud infrastructure provider",
        "url": "https://digitalocean.com"
      },
      "hetzner": {
        "name": "Hetzner",
        "description": "European cloud provider",
        "url": "https://hetzner.com"
      },
      "caddy": {
        "name": "Caddy",
        "description": "Modern web server",
        "url": "https://caddyserver.com"
      },
      "traefik": {
        "name": "Traefik",
        "description": "Cloud-native reverse proxy",
        "url": "https://traefik.io"
      },
      "portainer": {
        "name": "Portainer",
        "description": "Container management UI",
        "url": "https://portainer.io"
      },
      "kubernetes": {
        "name": "Kubernetes",
        "description": "Container orchestration platform",
        "url": "https://kubernetes.io"
      },
      "fastapi": {
        "name": "FastAPI",
        "description": "Modern Python web framework",
        "url": "https://fastapi.tiangolo.com"
      },
      "nestjs": {
        "name": "NestJS",
        "description": "Progressive Node.js framework",
        "url": "https://nestjs.com"
      },
      "express": {
        "name": "Express.js",
        "description": "Web framework for Node.js",
        "url": "https://expressjs.com"
      },
      "redis": {
        "name": "Redis",
        "description": "In-memory data structure store",
        "url": "https://redis.io"
      },
      "meilisearch": {
        "name": "Meilisearch",
        "description": "Fast search engine",
        "url": "https://meilisearch.com"
      },
      "strapi": {
        "name": "Strapi",
        "description": "Headless CMS platform",
        "url": "https://strapi.io"
      },
      "payload": {
        "name": "Payload CMS",
        "description": "Modern headless CMS",
        "url": "https://payloadcms.com"
      },
      "medusajs": {
        "name": "MedusaJS",
        "description": "E-commerce platform",
        "url": "https://medusajs.com"
      },
      "shopify": {
        "name": "Shopify",
        "description": "E-commerce platform",
        "url": "https://shopify.com"
      },
      "figma": {
        "name": "Figma",
        "description": "Collaborative design tool",
        "url": "https://figma.com"
      },
      "adobe": {
        "name": "Adobe Creative Cloud",
        "description": "Creative software suite",
        "url": "https://adobe.com"
      },
      "canva": {
        "name": "Canva",
        "description": "Graphic design platform",
        "url": "https://canva.com"
      },
      "framer": {
        "name": "Framer",
        "description": "Interactive design tool",
        "url": "https://framer.com"
      },
      "sketch": {
        "name": "Sketch",
        "description": "Digital design toolkit",
        "url": "https://sketch.com"
      },
      "threejs": {
        "name": "Three.js",
        "description": "3D JavaScript library",
        "url": "https://threejs.org"
      },
      "motion": {
        "name": "Framer Motion",
        "description": "Animation library for React",
        "url": "https://framer.com/motion"
      },
      "illustrator": {
        "name": "Adobe Illustrator",
        "description": "Vector graphics editor",
        "url": "https://adobe.com/products/illustrator"
      },
      "photoshop": {
        "name": "Adobe Photoshop",
        "description": "Image editing software",
        "url": "https://adobe.com/products/photoshop"
      },
      "aftereffects": {
        "name": "After Effects",
        "description": "Motion graphics software",
        "url": "https://adobe.com/products/aftereffects"
      }
    }
  },
  "finalCta": {
    "title": "Want your digital systems to work harder for you?",
    "subtitle": "Let's build something remarkable.",
    "cta": "Book a Discovery Call"
  }
}



================================================
FILE: src/i18n/messages/en/portfolio.json
================================================
{
  "title": "Portfolio",
  "subtitle": "Creative Work. Strategic Impact.",
  "description": "Explore how I fuse design, development, and AI to deliver real results.",
  "metadata": {
    "title": "Portfolio - Nicky Bruno | Creative Technologist",
    "description": "Dive into AI automation, immersive web experiences, and strategic digital products crafted by Nicky Bruno.",
    "ogTitle": "Portfolio - Nicky Bruno",
    "ogDescription": "Case studies and featured projects spanning AI platforms, experiential design, and full-stack builds."
  },
  "featured": "Featured",
  "viewDetails": "View Details",
  "projectOverview": "Project Overview",
  "howItWasMade": "How It Was Made",
  "projectDetails": "Project Details",
  "client": "Client",
  "duration": "Duration",
  "industry": "Industry",
  "technologiesUsed": "Technologies Used",
  "resultsImpact": "Results & Impact",
  "viewLiveSite": "View Live Site",
  "keyFeatures": "Key Features",
  "sourceCode": "Source Code",
  "projects": {
    "aiaa": {
      "title": "AIAA.dev - AI Automation Platform",
      "type": "AI Platform",
      "description": "Revolutionary AI automation platform that streamlines creative workflows and enhances productivity through intelligent task automation.",
      "fullDescription": "AIAA.dev represents the future of creative automation, combining cutting-edge AI technology with intuitive design to create a platform that truly understands creative workflows. This project showcases the perfect fusion of artificial intelligence and human creativity, enabling professionals to automate repetitive tasks while maintaining creative control.\n\nThe platform features advanced machine learning algorithms that learn from user behavior, predictive analytics for workflow optimization, and seamless integration with popular creative tools. Built with scalability in mind, it serves thousands of creative professionals worldwide.",
      "client": "AIAA Labs",
      "industry": "Technology",
      "duration": "8 months",
      "metrics": {
        "users": { "label": "Users", "value": "10K+" },
        "automation": { "label": "Automation", "value": "85%" },
        "timeSaved": { "label": "Time Saved", "value": "40hrs/week" }
      },
      "features": [
        "Intelligent workflow automation",
        "Real-time collaboration tools",
        "Advanced analytics dashboard",
        "Custom AI model training",
        "API integrations",
        "Multi-platform support"
      ],
      "process": [
        {
          "title": "Research & Discovery",
          "description": "Conducted extensive user research and competitive analysis to understand pain points in creative workflows."
        },
        {
          "title": "AI Architecture Design",
          "description": "Designed scalable AI architecture using TensorFlow and custom neural networks for task automation."
        },
        {
          "title": "Frontend Development",
          "description": "Built responsive React interface with real-time updates and intuitive user experience."
        },
        {
          "title": "Backend Integration",
          "description": "Developed robust Node.js backend with MongoDB for data management and AWS for scalability."
        },
        {
          "title": "Testing & Optimization",
          "description": "Implemented comprehensive testing suite and performance optimization for production deployment."
        }
      ],
      "testimonial": {
        "quote": "AIAA.dev has transformed our creative process. What used to take hours now happens automatically, allowing our team to focus on what matters most - creativity.",
        "author": "Sarah Chen",
        "role": "Creative Director, Design Studio"
      }
    },
    "montrealTechHub": {
      "title": "Montreal Tech Hub",
      "type": "Web Platform",
      "description": "Community platform connecting Montreal's tech ecosystem with events, networking, and collaboration tools.",
      "fullDescription": "Montreal Tech Hub serves as the digital heart of Montreal's thriving technology community. This platform brings together developers, designers, entrepreneurs, and tech enthusiasts in a unified space for collaboration and growth.\n\nThe project features event management, professional networking, job board integration, and community forums. Built with modern web technologies, it provides a seamless experience across all devices while maintaining the bilingual nature essential to Montreal's culture.",
      "client": "Montreal Tech Community",
      "industry": "Community",
      "duration": "6 months",
      "metrics": {
        "members": { "label": "Members", "value": "2.5K+" },
        "events": { "label": "Events", "value": "150+" },
        "engagement": { "label": "Engagement", "value": "78%" }
      },
      "features": [
        "Event management system",
        "Professional networking",
        "Job board integration",
        "Bilingual support",
        "Community forums",
        "Mobile-first design"
      ],
      "process": [
        {
          "title": "Community Research",
          "description": "Analyzed Montreal's tech community needs through surveys and interviews with key stakeholders."
        },
        {
          "title": "Platform Architecture",
          "description": "Designed scalable architecture using Next.js and PostgreSQL for optimal performance."
        },
        {
          "title": "UI/UX Design",
          "description": "Created intuitive interface design that reflects Montreal's bilingual and multicultural identity."
        },
        {
          "title": "Development & Testing",
          "description": "Built responsive platform with comprehensive testing across different devices and browsers."
        }
      ],
      "testimonial": {
        "quote": "This platform has become essential for Montreal's tech community. It's where we connect, collaborate, and grow together.",
        "author": "Marc Dubois",
        "role": "Tech Entrepreneur"
      }
    },
    "ecoTrack": {
      "title": "EcoTrack Analytics",
      "type": "Data Platform",
      "description": "Sustainability analytics platform helping businesses track and optimize their environmental impact.",
      "fullDescription": "EcoTrack Analytics empowers businesses to make data-driven decisions about their environmental impact. The platform combines IoT sensors, machine learning, and beautiful visualizations to provide actionable insights for sustainability initiatives.\n\nFeaturing real-time monitoring, predictive analytics, and comprehensive reporting, EcoTrack helps organizations reduce their carbon footprint while maintaining operational efficiency. The platform integrates with existing business systems and provides customizable dashboards for different stakeholder needs.",
      "client": "GreenTech Solutions",
      "industry": "Sustainability",
      "duration": "10 months",
      "metrics": {
        "co2Reduced": { "label": "CO2 Reduced", "value": "25%" },
        "companies": { "label": "Companies", "value": "50+" },
        "dataPoints": { "label": "Data Points", "value": "1M+" }
      },
      "features": [
        "Real-time monitoring",
        "Predictive analytics",
        "Custom dashboards",
        "IoT integration",
        "Automated reporting",
        "Carbon footprint tracking"
      ],
      "process": [
        {
          "title": "Sustainability Research",
          "description": "Researched environmental impact metrics and sustainability best practices across industries."
        },
        {
          "title": "Data Architecture",
          "description": "Designed time-series database architecture using InfluxDB for handling large volumes of sensor data."
        },
        {
          "title": "Visualization Development",
          "description": "Created interactive data visualizations using D3.js for complex environmental data representation."
        },
        {
          "title": "API Development",
          "description": "Built high-performance FastAPI backend for real-time data processing and analytics."
        }
      ],
      "testimonial": {
        "quote": "EcoTrack has given us unprecedented visibility into our environmental impact. We've reduced our carbon footprint by 25% in the first year.",
        "author": "Jennifer Walsh",
        "role": "Sustainability Director"
      }
    },
    "financeFlow": {
      "title": "FinanceFlow Mobile",
      "type": "Mobile App",
      "description": "Personal finance management app with AI-powered insights and automated budgeting features.",
      "fullDescription": "FinanceFlow Mobile revolutionizes personal finance management by combining intuitive design with powerful AI capabilities. The app learns from user spending patterns to provide personalized insights and automated budgeting recommendations.\n\nBuilt with React Native for cross-platform compatibility, the app features bank integration, expense categorization, goal tracking, and investment portfolio management. Advanced security measures ensure user financial data remains protected while providing seamless user experience.",
      "client": "FinTech Startup",
      "industry": "Financial Services",
      "duration": "12 months",
      "metrics": {
        "downloads": { "label": "Downloads", "value": "50K+" },
        "savings": { "label": "Savings", "value": "$2M+" },
        "rating": { "label": "Rating", "value": "4.8★" }
      },
      "features": [
        "AI-powered insights",
        "Automated budgeting",
        "Bank integration",
        "Investment tracking",
        "Goal management",
        "Expense categorization"
      ],
      "process": [
        {
          "title": "User Experience Research",
          "description": "Conducted extensive UX research to understand personal finance management pain points."
        },
        {
          "title": "Security Architecture",
          "description": "Implemented bank-level security measures including encryption and secure authentication."
        },
        {
          "title": "AI Model Development",
          "description": "Developed machine learning models for spending pattern analysis and budget recommendations."
        },
        {
          "title": "Cross-Platform Development",
          "description": "Built native-quality app using React Native for iOS and Android platforms."
        }
      ],
      "testimonial": {
        "quote": "FinanceFlow has completely changed how I manage my money. The AI insights are incredibly accurate and helpful.",
        "author": "David Kim",
        "role": "App User"
      }
    },
    "creativeStudio": {
      "title": "CreativeStudio Pro",
      "type": "Design Tool",
      "description": "Collaborative design platform with real-time editing, version control, and AI-assisted design features.",
      "fullDescription": "CreativeStudio Pro is a next-generation design platform that combines the power of traditional design tools with modern collaboration features and AI assistance. Built for creative teams, it enables seamless collaboration while maintaining design quality and consistency.\n\nThe platform features real-time collaborative editing, intelligent design suggestions, automated asset management, and comprehensive version control. Advanced AI algorithms help designers with layout suggestions, color palette generation, and design system maintenance.",
      "client": "Design Agency",
      "industry": "Creative Tools",
      "duration": "14 months",
      "metrics": {
        "teams": { "label": "Teams", "value": "500+" },
        "projects": { "label": "Projects", "value": "10K+" },
        "efficiency": { "label": "Efficiency", "value": "+60%" }
      },
      "features": [
        "Real-time collaboration",
        "AI design assistance",
        "Version control",
        "Asset management",
        "Design systems",
        "Export automation"
      ],
      "process": [
        {
          "title": "Design Tool Analysis",
          "description": "Analyzed existing design tools to identify gaps and opportunities for innovation."
        },
        {
          "title": "Real-time Architecture",
          "description": "Built real-time collaboration system using WebSocket technology and operational transforms."
        },
        {
          "title": "AI Integration",
          "description": "Integrated machine learning models for design assistance and automated suggestions."
        },
        {
          "title": "Performance Optimization",
          "description": "Optimized WebGL rendering pipeline for smooth performance with complex designs."
        }
      ],
      "testimonial": {
        "quote": "CreativeStudio Pro has transformed our design workflow. The real-time collaboration and AI features are game-changers.",
        "author": "Lisa Rodriguez",
        "role": "Design Team Lead"
      }
    },
    "healthConnect": {
      "title": "HealthConnect Platform",
      "type": "Healthcare",
      "description": "Telemedicine platform connecting patients with healthcare providers through secure video consultations.",
      "fullDescription": "HealthConnect Platform addresses the growing need for accessible healthcare by providing a secure, user-friendly telemedicine solution. The platform enables seamless connections between patients and healthcare providers while maintaining the highest standards of medical data security.\n\nFeaturing appointment scheduling, secure video consultations, electronic health records, prescription management, and payment processing, HealthConnect provides a comprehensive healthcare experience. The platform is HIPAA compliant and includes advanced features like AI-powered symptom assessment and health monitoring integration.",
      "client": "Healthcare Network",
      "industry": "Healthcare",
      "duration": "16 months",
      "metrics": {
        "consultations": { "label": "Consultations", "value": "25K+" },
        "providers": { "label": "Providers", "value": "200+" },
        "satisfaction": { "label": "Satisfaction", "value": "96%" }
      },
      "features": [
        "Secure video calls",
        "Appointment scheduling",
        "Electronic health records",
        "Prescription management",
        "Payment processing",
        "HIPAA compliance"
      ],
      "process": [
        {
          "title": "Healthcare Compliance Research",
          "description": "Researched HIPAA requirements and healthcare industry standards for secure platform development."
        },
        {
          "title": "Security Implementation",
          "description": "Implemented end-to-end encryption and secure authentication for patient data protection."
        },
        {
          "title": "Video Infrastructure",
          "description": "Built scalable video consultation system using WebRTC for high-quality, low-latency communication."
        },
        {
          "title": "Integration Testing",
          "description": "Conducted extensive testing with healthcare providers to ensure platform meets clinical needs."
        }
      ],
      "testimonial": {
        "quote": "HealthConnect has made healthcare more accessible for our patients. The platform is intuitive and secure.",
        "author": "Dr. Michael Thompson",
        "role": "Primary Care Physician"
      }
    }
  },
  "sections": {
    "hero": {
      "badge": "Portfolio Showcase",
      "title": "Work That Speaks",
      "titleHighlight": "For Itself",
      "description": "Each project is a story — of creativity, technology, and transformation. From SaaS platforms and AI tools to mobile apps and design systems, I craft intelligent solutions that make a difference.",
      "stats": {
        "projects": "20+ Projects",
        "clients": "50+ Clients",
        "recognition": "Featured in industry publications"
      }
    },
    "featured": {
      "title": "Featured Projects",
      "subtitle": "Highlighting my best work"
    },
    "projects": {
      "title": "All Projects",
      "description": "Looking for something specific? Filter by: 🧠 AI & Automation | 🌐 Web Platforms | 📱 Mobile Apps | 🎨 Design Tools | 🏥 Healthcare",
      "emptyState": {
        "title": "No projects found",
        "description": "Try adjusting your filter to see more projects."
      }
    },
    "filters": {
      "all": "All Projects",
      "ai": "AI & Automation",
      "web": "Web Platforms",
      "mobile": "Mobile Apps",
      "design": "Design Tools",
      "healthcare": "Healthcare"
    },
    "cta": {
      "title": "Let's Build Something Amazing",
      "description": "Have a vision? I'll help you bring it to life. Whether it's AI, web, or creative tech — I'm ready.",
      "buttons": {
        "startProject": "Start a Project",
        "downloadPortfolio": "Download Portfolio"
      }
    }
  }
}



================================================
FILE: src/i18n/messages/en/services.json
================================================
{
  "title": "Services",
  "subtitle": "Smart. Scalable. Future-Ready.",
  "description": "From concept to launch, I deliver digital solutions that combine design, development, and AI automation to help your business thrive.",
  "more": "more",
  "metadata": {
    "title": "Services - Nicky Bruno | Creative Technologist",
    "description": "Explore creative design, full-stack development, AI automation, and strategic consulting services crafted by Nicky Bruno.",
    "ogTitle": "Services - Nicky Bruno",
    "ogDescription": "Comprehensive creative technology services spanning design systems, full-stack builds, and intelligent automation."
  },
  "sections": {
    "overview": {
      "title": "The Four Pillars of Creative Technology",
      "subtitle": "Where strategy meets execution — and creativity meets intelligence.",
      "description": "I provide comprehensive digital solutions that combine modern web development, AI automation, and strategic design to help your business succeed in today's digital landscape."
    },
    "services": {
      "webDevelopment": {
        "title": "Web Development",
        "subtitle": "Custom, high-performance websites",
        "description": "Built with the latest tech to deliver fast, responsive, and beautiful experiences.",
        "features": [
          "Responsive design for all devices",
          "SEO optimization",
          "Lightning-fast performance",
          "Modern UI/UX",
          "CMS integration"
        ],
        "technologies": ["React", "Next.js", "Tailwind", "TypeScript"]
      },
      "automation": {
        "title": "AI & Automation",
        "subtitle": "Smarter workflows, less busywork",
        "description": "Automate repetitive tasks, improve efficiency, and integrate AI into your day-to-day.",
        "features": [
          "AI-powered chatbots",
          "Workflow automation",
          "Data processing scripts",
          "App/tool integrations",
          "Custom AI features"
        ],
        "technologies": ["OpenAI", "n8n", "LangChain", "Zapier"]
      },
      "design": {
        "title": "Design & Branding",
        "subtitle": "Make your brand unforgettable",
        "description": "Craft a cohesive, professional identity that speaks to your audience.",
        "features": [
          "Brand identity design",
          "Logo + visual systems",
          "UI/UX for web & apps",
          "Full design systems",
          "Brand guidelines"
        ],
        "technologies": ["Figma", "Adobe CC", "Framer"]
      },
      "consulting": {
        "title": "Digital Strategy",
        "subtitle": "Plan smarter, grow faster",
        "description": "Get expert guidance on digital transformation, tech investment, and scalable solutions.",
        "features": [
          "Digital strategy roadmaps",
          "Process and tech audits",
          "Workflow optimization",
          "Team onboarding & training",
          "Ongoing strategic support"
        ],
        "technologies": ["Strategic Planning", "Process Analysis", "Training"]
      }
    }
  },
  "pricing": {
    "title": "Pricing & Investment",
    "subtitle": "Every project is unique. I offer custom quotes based on your goals, scope, and timeline.",
    "description": "Every project is unique, so I provide custom quotes based on your specific needs and requirements.",
    "contact": "Book a free 30-min consultation to get started."
  },
  "keyCapabilities": {
    "title": "Key Capabilities:",
    "items": {
      "webDevelopment": {
        "title": "Web Development",
        "capabilities": [
          "Design responsive pour tous les appareils",
          "Optimisation SEO",
          "Temps de chargement rapides",
          "Design UI/UX moderne",
          "Systèmes de gestion de contenu"
        ],
        "featuredProject": {
          "title": "Featured Project",
          "name": "E-commerce Platform Rebuild",
          "description": "Complete platform migration resulting in 50% faster load times and 25% increase in conversion rates.",
          "cta": "View Case"
        },
        "certifications": [
          "AWS Solutions Architect",
          "React Professional"
        ]
      },
      "automation": {
        "title": "AI & Automation",
        "capabilities": [
          "Automatisation de workflow",
          "Chatbots alimentés par l'IA",
          "Automatisation du traitement des données",
          "Intégration avec les outils existants",
          "Solutions IA personnalisées"
        ],
        "featuredProject": {
          "title": "Featured Project",
          "name": "Customer Service AI Assistant",
          "description": "Deployed intelligent chatbot reducing support tickets by 60% while maintaining 95% customer satisfaction.",
          "cta": "View Case"
        },
        "certifications": [
          "OpenAI API Specialist",
          "Google AI Certification"
        ]
      },
      "design": {
        "title": "Design & Branding",
        "capabilities": [
          "Design d'identité de marque",
          "Logo et actifs visuels",
          "Design UI/UX",
          "Systèmes de design",
          "Directives de marque"
        ],
        "featuredProject": {
          "title": "Featured Project",
          "name": "Montreal Tech Startup Rebrand",
          "description": "Complete visual identity overhaul resulting in 300% increase in user engagement and successful Series A funding.",
          "cta": "View Case"
        },
        "certifications": [
          "Adobe Certified Expert",
          "Google UX Design"
        ]
      },
      "consulting": {
        "title": "Strategic Planning",
        "capabilities": [
          "Planification de stratégie numérique",
          "Évaluation technologique",
          "Optimisation des processus",
          "Formation d'équipe",
          "Support continu"
        ],
        "featuredProject": {
          "title": "Featured Project",
          "name": "SaaS Growth Strategy Implementation",
          "description": "Strategic overhaul leading to 200% increase in organic traffic and 150% improvement in lead generation.",
          "cta": "View Case"
        },
        "certifications": [
          "Google Analytics Certified",
          "HubSpot Strategy"
        ]
      }
    }
  },
  "sections": {
    "hero": {
      "badge": "Capability Showcase",
      "title": "The Four Pillars of",
      "titleHighlight": "Creative Technology",
      "description": "Where design, code, and AI meet creativity. I don't just build websites—I craft intelligent experiences that think, adapt, and evolve. The future of creative work is here, and it's beautifully human.",
      "buttons": {
        "startProject": "Start Your Project",
        "watchVideo": "Watch Process Video"
      }
    },
    "tabs": {
      "services": "Core Services",
      "process": "My Process",
      "tech": "Tech Stack",
      "stats": "Experience"
    },
    "services": {
      "title": "Comprehensive Creative Technology Services",
      "description": "From concept to deployment, I provide end-to-end solutions that bridge the gap between creative vision and technical execution.",
      "items": {
        "webDevelopment": {
          "title": "Web Development",
          "description": "Custom websites built with the latest technologies, optimized for performance and user experience.",
          "features": [
            "Responsive design for all devices",
            "SEO optimization",
            "Fast loading times",
            "Modern UI/UX design",
            "Content management systems"
          ]
        },
        "automation": {
          "title": "AI & Automation",
          "description": "Automate repetitive tasks and integrate AI capabilities to streamline your business operations.",
          "features": [
            "Workflow automation",
            "AI-powered chatbots",
            "Data processing automation",
            "Integration with existing tools",
            "Custom AI solutions"
          ]
        },
        "design": {
          "title": "Design & Branding",
          "description": "Create a cohesive brand identity that resonates with your audience and drives engagement.",
          "features": [
            "Brand identity design",
            "Logo and visual assets",
            "UI/UX design",
            "Design systems",
            "Brand guidelines"
          ]
        },
        "consulting": {
          "title": "Digital Strategy",
          "description": "Strategic consulting to help you make informed decisions about your digital presence and technology investments.",
          "features": [
            "Digital strategy planning",
            "Technology assessment",
            "Process optimization",
            "Team training",
            "Ongoing support"
          ]
        }
      }
    },
    "process": {
      "title": "My Process",
      "description": "A systematic approach that ensures every project delivers exceptional results through strategic planning, creative execution, and intelligent optimization.",
      "subtitle": "How we work together",
      "keyDeliverables": "Key Deliverables:",
      "steps": {
        "discovery": {
          "phase": "Discovery",
          "title": "Understand your goals & users",
          "description": "Deep dive into your business goals, target audience, and competitive landscape to craft the perfect solution strategy.",
          "duration": "1-2 weeks",
          "deliverables": {
            "0": "Market Research",
            "1": "User Personas",
            "2": "Technical Audit",
            "3": "Strategy Document"
          }
        },
        "design": {
          "phase": "Design",
          "title": "Create engaging visuals & systems",
          "description": "Transform insights into compelling visual experiences that resonate with your audience and drive engagement.",
          "duration": "2-3 weeks",
          "deliverables": {
            "0": "Wireframes",
            "1": "Visual Design",
            "2": "Prototypes",
            "3": "Design System"
          }
        },
        "development": {
          "phase": "Development",
          "title": "Build scalable, efficient tech",
          "description": "Build robust, scalable solutions using cutting-edge technologies and best practices for optimal performance.",
          "duration": "3-6 weeks",
          "deliverables": {
            "0": "Frontend Development",
            "1": "Backend Integration",
            "2": "Testing",
            "3": "Optimization"
          }
        },
        "aiIntegration": {
          "phase": "AI Integration",
          "title": "Add intelligence to workflows",
          "description": "Integrate AI capabilities to automate processes, enhance user experience, and provide intelligent insights.",
          "duration": "1-2 weeks",
          "deliverables": {
            "0": "AI Models",
            "1": "Automation Scripts",
            "2": "Analytics Setup",
            "3": "Performance Monitoring"
          }
        },
        "launch": {
          "phase": "Launch",
          "title": "Monitor, refine & scale",
          "description": "Launch your solution with comprehensive monitoring, optimization, and ongoing support for continuous improvement.",
          "duration": "1 week",
          "deliverables": {
            "0": "Production Deploy",
            "1": "Performance Monitoring",
            "2": "User Training",
            "3": "Growth Strategy"
          }
        }
      }
    },
    "tech": {
      "title": "Cutting-Edge Technology Stack",
      "description": "Leveraging the latest tools and technologies to build scalable, performant, and future-ready solutions.",
      "categories": {
        "frontend": {
          "title": "Frontend & Design",
          "description": "Creating beautiful, responsive user experiences"
        },
        "backend": {
          "title": "Backend & Infrastructure",
          "description": "Building scalable, secure server-side solutions"
        },
        "ai": {
          "title": "AI & Automation",
          "description": "Integrating intelligent automation and machine learning"
        },
        "tools": {
          "title": "Tools & Workflow",
          "description": "Professional tools for efficient development"
        }
      }
    },
    "stats": {
      "title": "Experience Snapshot",
      "description": "Experience and expertise built through years of successful projects and satisfied clients across diverse industries.",
      "experience": {
        "value": "20+",
        "label": "Years",
        "description": "in creative tech"
      },
      "projects": {
        "value": "150+",
        "label": "Projects",
        "description": "successfully delivered"
      },
      "clients": {
        "value": "50+",
        "label": "Clients",
        "description": "across industries"
      },
      "retention": {
        "value": "95%",
        "label": "Client Retention",
        "description": "because results matter"
      }
    },
    "cta": {
      "title": "Let's Build Something Great",
      "description": "Need a standout website? Want to automate tasks with AI? Looking to scale your brand? Let's bring your digital vision to life.",
      "buttons": {
        "startProject": "Start Your Project",
        "scheduleConsultation": "Schedule a Free Consultation"
      },
      "features": {
        "freeConsultation": "Free 30-min consultation",
        "satisfactionGuarantee": "100% satisfaction guarantee"
      }
    }
  }
}



================================================
FILE: src/i18n/messages/fr/about.json
================================================
{
  "title": "À propos de Nicky Bruno",
  "subtitle": "Technologue Créatif & Consultant Numérique",
  "description": "En savoir plus sur mon parcours, mon expertise et mon approche pour construire des solutions numériques modernes.",
  "metadata": {
    "title": "À propos - Nicky Bruno | Le Technologue Créatif",
    "description": "Rencontrez Nicky Bruno, le technologue créatif qui fait le pont entre le design, le développement et l'innovation IA de Montréal vers le monde.",
    "ogTitle": "À propos - Nicky Bruno | Le Technologue Créatif",
    "ogDescription": "Deux décennies d'évolution de la fondation créative au pionnier de l'IA, maîtrisant l'intersection entre créativité humaine et innovation technologique."
  },
  "sections": {
    "intro": {
      "badge": "Révélation d'Identité",
      "title": "Le Technologue",
      "titleHighlight": "Créatif",
      "paragraph1": "Je suis Nicky Bruno, et je représente l'évolution des professionnels créatifs—où le design traditionnel rencontre l'automatisation IA de pointe. Je ne choisis pas entre créativité ou technologie ; je maîtrise les deux.",
      "paragraph2": "Depuis plus de deux décennies, je crée des expériences intelligentes qui pensent, s'adaptent et évoluent. Je ne construis pas seulement des sites web—j'architecte des expériences numériques qui font le pont entre l'intuition humaine et la précision machine.",
      "paragraph3": "Basé dans la scène tech vibrante de Montréal, j'apporte un mélange unique de culture bilingue et d'innovation nord-américaine à chaque projet. Mon approche est visionnaire mais ancrée, techniquement maîtrisée mais créativement inspirée.",
      "imageAlt": "Nicky Bruno - Technologue Créatif",
      "status": "EN LIGNE",
      "location": "Montréal, QC",
      "globalImpact": "Impact Mondial",
      "attributes": {
        "visionary": {
          "label": "Visionnaire",
          "desc": "Pensée orientée vers l'avenir"
        },
        "technical": {
          "label": "Technique",
          "desc": "Exécution maîtrisée"
        },
        "human": {
          "label": "Humain",
          "desc": "Chaleureusement accessible"
        },
        "collaborative": {
          "label": "Collaboratif",
          "desc": "Orienté partenariat"
        }
      }
    },
    "timeline": {
      "badge": "Parcours Professionnel",
      "title": "Deux Décennies d'Évolution",
      "description": "De la fondation créative au pionnier de l'IA, chaque étape représente un pas délibéré vers la maîtrise de l'intersection entre créativité humaine et innovation technologique.",
      "keyAchievements": "Réalisations Clés :",
      "currentStatus": {
        "badge": "Statut Actuel",
        "title": "Prêt pour Votre Prochain Défi",
        "description": "Avec 20+ années d'évolution de la fondation créative au pionnier de l'IA, je suis positionné pour relever les projets les plus ambitieux à l'intersection du design, de la technologie et de l'intelligence artificielle."
      },
      "milestones": {
        "2004": {
          "title": "Fondation Créative",
          "company": "Designer Freelance",
          "location": "Montréal, QC",
          "description": "Commencé le parcours en design graphique et développement web, établissant la fondation créative qui définirait mon approche de la technologie.",
          "achievements": ["Premier portfolio client", "Maîtrise Adobe Creative Suite", "Adoption des standards web"]
        },
        "2008": {
          "title": "Évolution Numérique",
          "company": "Chef d'Agence Créative",
          "location": "Montréal, QC",
          "description": "Dirigé les initiatives de transformation numérique, faisant le pont entre design traditionnel et technologies web émergentes et principes d'expérience utilisateur.",
          "achievements": ["Leadership d'équipe", "Méthodologie UX", "Gestion des relations clients"]
        },
        "2012": {
          "title": "Maîtrise Technique",
          "company": "Développeur Senior",
          "location": "Montréal, QC",
          "description": "Approfondi l'expertise technique dans les frameworks web modernes, l'architecture de base de données et les stratégies d'optimisation des performances.",
          "achievements": ["Développement full-stack", "Optimisation de base de données", "Ingénierie des performances"]
        },
        "2016": {
          "title": "Leadership en Innovation",
          "company": "Consultant Tech",
          "location": "Amérique du Nord",
          "description": "Étendu la pratique de conseil à travers l'Amérique du Nord, se spécialisant dans la transformation numérique et l'intégration de technologies émergentes.",
          "achievements": ["Projets transfrontaliers", "Stratégie numérique", "Conseil technologique"]
        },
        "2018": {
          "title": "Pionnier de l'Intégration IA",
          "company": "Fondateur AIAA.dev",
          "location": "Montréal, QC",
          "description": "Fondé l'agence d'automatisation IA, devenant un adepte précoce de l'apprentissage automatique et de l'intelligence artificielle dans les workflows créatifs.",
          "achievements": ["Automatisation IA", "Apprentissage automatique", "Optimisation des workflows"]
        },
        "2024": {
          "title": "Technologue Créatif",
          "company": "Pratique Indépendante",
          "location": "Mondial",
          "description": "Établi comme Le Technologue Créatif, maîtrisant l'intersection du design, du développement et de l'IA pour créer des expériences intelligentes.",
          "achievements": ["Reconnaissance mondiale", "Collaboration IA-humaine", "Expériences intelligentes"]
        }
      }
    },
    "experienceCounter": {
      "badge": "En Chiffres",
      "title": "Bilan Prouvé",
      "description": "Deux décennies à faire le pont entre créativité et technologie, livrant des expériences intelligentes qui génèrent un réel impact commercial à travers les industries et les continents.",
      "stats": {
        "years": {
          "label": "Années d'Expérience",
          "description": "Deux décennies de maîtrise technologique créative"
        },
        "projects": {
          "label": "Projets Livrés",
          "description": "Expériences intelligentes créées"
        },
        "clients": {
          "label": "Clients Satisfaits",
          "description": "Des startups aux entreprises"
        },
        "awards": {
          "label": "Prix de l'Industrie",
          "description": "Reconnaissance pour l'excellence"
        }
      },
      "highlights": {
        "growth": {
          "label": "Axé sur la Croissance",
          "description": "Livrant constamment des améliorations de performance de 40%+"
        },
        "global": {
          "label": "Portée Mondiale",
          "description": "Projets couvrant 15+ pays et 5 continents"
        },
        "pioneer": {
          "label": "Pionnier IA",
          "description": "Adopteur précoce de l'automatisation IA depuis 2018"
        }
      }
    },
    "credentials": {
      "badge": "Crédentials & Reconnaissance",
      "title": "Reconnaissance de l'Industrie",
      "description": "Apprentissage continu et contribution communautaire à travers certifications, conférences, publications et projets open source.",
      "sections": {
        "certifications": {
          "title": "Certifications Professionnelles",
          "items": {
            "aws": {
              "title": "Architecte Solutions AWS",
              "issuer": "Amazon Web Services",
              "year": "2023"
            },
            "google": {
              "title": "Certification Google AI/ML",
              "issuer": "Google Cloud",
              "year": "2022"
            },
            "react": {
              "title": "Patterns Avancés React",
              "issuer": "Meta",
              "year": "2023"
            },
            "ux": {
              "title": "Professionnel Design UX",
              "issuer": "Adobe",
              "year": "2021"
            }
          }
        },
        "speaking": {
          "title": "Conférences",
          "items": {
            "aiSummit": {
              "event": "Sommet IA & Design 2024",
              "topic": "L'Avenir de l'IA Créative",
              "location": "Toronto, ON",
              "attendees": "500+"
            },
            "montrealTech": {
              "event": "Conférence Tech Montreal",
              "topic": "Fusionner Design & Développement",
              "location": "Montréal, QC",
              "attendees": "300+"
            },
            "reactMeetup": {
              "event": "Meetup React Montreal",
              "topic": "Optimisation des Performances",
              "location": "Montréal, QC",
              "attendees": "150+"
            }
          }
        },
        "publications": {
          "title": "Publications de l'Industrie",
          "reads": "lectures",
          "items": {
            "designSystems": {
              "title": "Systèmes de Design Pilotés par l'IA",
              "publication": "Smashing Magazine",
              "date": "Mars 2024",
              "reads": "15K+"
            },
            "manifesto": {
              "title": "Le Manifeste du Technologue Créatif",
              "publication": "Medium",
              "date": "Janvier 2024",
              "reads": "8K+"
            },
            "renaissance": {
              "title": "La Renaissance Tech de Montréal",
              "publication": "TechCrunch",
              "date": "Novembre 2023",
              "reads": "12K+"
            }
          }
        },
        "openSource": {
          "title": "Contributions Open Source",
          "items": {
            "reactAi": {
              "project": "react-ai-components",
              "description": "Bibliothèque de composants React alimentée par l'IA",
              "stars": "2.3K",
              "language": "TypeScript"
            },
            "designSystemAi": {
              "project": "design-system-ai",
              "description": "Générateur automatisé de système de design",
              "stars": "1.8K",
              "language": "JavaScript"
            },
            "montrealMap": {
              "project": "montreal-tech-map",
              "description": "Écosystème tech interactif de Montréal",
              "stars": "950",
              "language": "React"
            }
          }
        },
        "communityImpact": {
          "title": "Impact Communautaire",
          "description": "Engagé à partager les connaissances et à faire progresser la communauté de technologie créative à travers l'éducation, l'open source et le leadership éclairé.",
          "stats": {
            "readers": {
              "value": "50K+",
              "label": "Lecteurs d'Articles"
            },
            "stars": {
              "value": "5K+",
              "label": "Étoiles GitHub"
            },
            "attendees": {
              "value": "1K+",
              "label": "Participants aux Conférences"
            }
          }
        }
      }
    },
    "experience": {
      "title": "Expérience & Expertise",
      "content": "Avec un background couvrant le développement web, le design UX et l'intégration IA, j'apporte une perspective unique à chaque projet. J'ai travaillé avec des startups, des entreprises établies et tout ce qui se trouve entre les deux, en me concentrant toujours sur des solutions qui apportent une vraie valeur."
    },
    "approach": {
      "title": "Mon Approche",
      "content": "Je crois que la technologie devrait servir les gens, et non l'inverse. C'est pourquoi je me concentre sur la création de solutions qui ne sont pas seulement techniquement solides mais aussi intuitives et accessibles. Chaque projet commence par comprendre vos objectifs et se termine par une solution qui dépasse vos attentes."
    },
    "values": {
      "title": "Valeurs Fondamentales",
      "items": {
        "innovation": {
          "title": "Innovation",
          "description": "Explorer toujours de nouvelles technologies et approches pour mieux résoudre les problèmes."
        },
        "collaboration": {
          "title": "Collaboration",
          "description": "Travailler étroitement avec les clients pour s'assurer que les solutions répondent à leurs besoins spécifiques."
        },
        "quality": {
          "title": "Qualité",
          "description": "Livrer des solutions de haute qualité qui résistent à l'épreuve du temps."
        },
        "transparency": {
          "title": "Transparence",
          "description": "Communication claire et feedback honnête tout au long du projet."
        }
      }
    },
    "cta": {
      "title": "Prêt à Créer Quelque Chose",
      "titleHighlight": "d'Extraordinaire ?",
      "description": "Avec deux décennies d'expérience faisant le pont entre créativité et technologie, je suis positionné pour relever vos projets les plus ambitieux. Créons des expériences intelligentes qui pensent, s'adaptent et évoluent.",
      "buttons": {
        "startProject": "Démarrer Votre Projet",
        "viewWork": "Voir Mon Travail"
      },
      "status": {
        "available": "Disponible pour Projets",
        "response": "Réponse sous 24h"
      }
    }
  },
  "timeline": {
    "title": "Chronologie de Carrière",
    "items": {
      "2024": {
        "title": "Spécialiste Intégration IA",
        "description": "Se concentrer sur l'automatisation IA et les solutions de workflow intelligentes."
      },
      "2020": {
        "title": "Développeur Full-Stack",
        "description": "S'étendre dans le développement backend et l'infrastructure cloud."
      },
      "2018": {
        "title": "Spécialiste Frontend",
        "description": "Approfondir l'expertise en React, TypeScript et technologies web modernes."
      },
      "2015": {
        "title": "Designer & Développeur Web",
        "description": "Combiner les compétences de design et développement pour des solutions complètes."
      },
      "2010": {
        "title": "Designer Graphique",
        "description": "Commencer la carrière en design visuel et développement de marque."
      }
    }
  },
  "credentials": {
    "title": "Crédentials & Certifications",
    "items": {
      "certification1": {
        "title": "AWS Certified Solutions Architect",
        "issuer": "Amazon Web Services",
        "year": "2023"
      },
      "certification2": {
        "title": "Google Cloud Professional Developer",
        "issuer": "Google Cloud",
        "year": "2022"
      },
      "certification3": {
        "title": "React Developer Certification",
        "issuer": "Meta",
        "year": "2021"
      }
    }
  }
}


================================================
FILE: src/i18n/messages/fr/chatbot.json
================================================
{
  "title": "Assistant IA",
  "subtitle": "Obtenez de l'aide instantanée avec vos questions",
  "placeholder": "Tapez votre message ici...",
  "send": "Envoyer",
  "typing": "L'IA tape...",
  "welcome": "Salut ! Je suis l'assistant IA de Nicky. Comment puis-je vous aider aujourd'hui ?",
  "suggestionsTitle": "Questions rapides :",
  "suggestion1": "Quels services offrez-vous ?",
  "suggestion2": "Combien coûte un site web ?",
  "suggestion3": "Pouvez-vous aider avec l'intégration IA ?",
  "suggestion4": "Quelle est votre disponibilité ?",
  "statusOnline": "En ligne",
  "statusOffline": "Hors ligne",
  "statusConnecting": "Connexion...",
  "statusError": "Erreur de connexion",
  "errorSendFailed": "Échec de l'envoi du message. Veuillez réessayer.",
  "errorNetworkError": "Erreur réseau. Veuillez vérifier votre connexion.",
  "errorServerError": "Erreur serveur. Veuillez réessayer plus tard.",
  "errorMessageTooLong": "Le message est trop long. Veuillez le raccourcir.",
  "errorEmptyMessage": "Veuillez entrer un message avant d'envoyer.",
  "actionMinimize": "Réduire le chat",
  "actionMaximize": "Agrandir le chat",
  "actionClose": "Fermer le chat",
  "actionClear": "Effacer la conversation",
  "actionRetry": "Réessayer",
  "accessibilityOpenChat": "Ouvrir la fenêtre de chat",
  "accessibilityCloseChat": "Fermer la fenêtre de chat",
  "accessibilitySendMessage": "Envoyer le message",
  "accessibilityMessageInput": "Tapez votre message",
  "accessibilityChatHistory": "Historique de la conversation"
}



================================================
FILE: src/i18n/messages/fr/contact.json
================================================
{
  "title": "Contact",
  "subtitle": "Travaillons Ensemble",
  "description": "Prêt à transformer votre présence numérique ? Contactez-moi pour discuter de votre projet et de comment je peux vous aider.",
  "metadata": {
    "title": "Contact - Nicky Bruno | Technologue Créatif",
    "description": "Collaborons sur votre prochain projet—contactez Nicky Bruno pour le design, développement et stratégie pilotés par l'IA.",
    "ogTitle": "Contact - Nicky Bruno",
    "ogDescription": "Démarrez une conversation sur la technologie créative, l'automatisation IA et la transformation numérique."
  },
  "sections": {
    "hero": {
      "badge": "Prêt à Commencer Votre Projet ?",
      "title": "Créons Quelque Chose",
      "titleHighlight": "d'Extraordinaire",
      "description": "Que vous cherchiez à construire une application web de pointe, intégrer l'IA dans votre workflow, ou créer une expérience numérique qui se démarque—je suis là pour vous aider à donner vie à votre vision.",
      "stats": {
        "response": {
          "title": "Réponse en 24h",
          "description": "Délai de traitement rapide pour toutes les demandes"
        },
        "global": {
          "title": "Portée Mondiale",
          "description": "Travail avec des clients du monde entier"
        },
        "confidential": {
          "title": "Confidentiel",
          "description": "Toutes les demandes sont sécurisées et privées"
        }
      }
    },
    "intro": {
      "title": "Entrer en Contact",
      "subtitle": "Prêt à commencer votre projet ?",
      "description": "Je suis toujours excité de travailler sur de nouveaux projets et d'aider les entreprises à atteindre leurs objectifs numériques. Que vous ayez besoin d'un nouveau site web, d'automatisation IA ou de conseil stratégique, je suis là pour vous aider."
    },
    "form": {
      "title": "Formulaire de Contact Rapide",
      "subtitle": "Parlez-moi de votre projet",
      "description": "Vous avez une question ou souhaitez me contacter ? Envoyez-moi un message rapide",
      "fields": {
        "name": {
          "label": "Nom Complet*",
          "placeholder": "Votre nom"
        },
        "email": {
          "label": "Adresse Email*",
          "placeholder": "votre@email.com"
        },
        "company": {
          "label": "Entreprise/Organisation",
          "placeholder": "Votre entreprise (optionnel)"
        },
        "projectType": {
          "label": "Type de Projet*",
          "placeholder": "Sélectionnez le type",
          "options": {
            "web": "Développement Web",
            "ai": "Intégration IA",
            "design": "Consultation Design",
            "automation": "Automatisation de Processus",
            "fullstack": "Solution Full-Stack",
            "other": "Autre"
          }
        },
        "budget": {
          "label": "Gamme de Budget",
          "placeholder": "Sélectionnez le budget",
          "options": {
            "5k-15k": "5K$ - 15K$ CAD",
            "15k-30k": "15K$ - 30K$ CAD",
            "30k-50k": "30K$ - 50K$ CAD",
            "50k+": "50K$+ CAD",
            "discuss": "Discutons-en"
          }
        },
        "timeline": {
          "label": "Délai",
          "placeholder": "Sélectionnez le délai",
          "options": {
            "asap": "Dès que possible (Projet urgent)",
            "1-2months": "1-2 Mois",
            "3-6months": "3-6 Mois",
            "6months+": "6+ Mois",
            "flexible": "Délai Flexible"
          }
        },
        "message": {
          "label": "Détails du Projet",
          "placeholder": "Décrivez votre projet, objectifs et exigences spécifiques..."
        }
      },
      "newsletter": {
        "title": "S'abonner à la newsletter d'insights d'automatisation IA",
        "description": "Recevez des conseils mensuels sur l'automatisation créative et les tendances de l'industrie"
      },
      "terms": {
        "label": "J'accepte les termes et conditions*",
        "description": "Requis pour traiter votre demande de projet"
      },
      "submit": "Envoyer la Demande de Projet",
      "responseTime": "Temps de réponse attendu : Dans les 24 heures • Toutes les demandes sont confidentielles",
      "success": "Merci ! Je vous répondrai dans les 24 heures.",
      "error": "Quelque chose s'est mal passé. Veuillez réessayer.",
      "validation": {
        "nameRequired": "Veuillez entrer votre nom",
        "emailRequired": "Veuillez entrer votre email",
        "emailInvalid": "Veuillez entrer une adresse email valide",
        "projectTypeRequired": "Veuillez sélectionner un type de projet",
        "messageRequired": "Veuillez entrer un message",
        "termsRequired": "Vous devez accepter les termes et conditions"
      }
    },
    "info": {
      "title": "Entrer en Contact",
      "items": {
        "email": {
          "label": "Email",
          "value": "hello@nickybruno.ca",
          "description": "Contact principal pour les demandes de projet"
        },
        "phone": {
          "label": "Téléphone",
          "value": "+1 (514) 555-0123",
          "description": "Disponible Lun-Ven, 9h-18h HNE"
        },
        "location": {
          "label": "Localisation",
          "value": "Montréal, QC, Canada",
          "description": "Disponible pour projets locaux et distants"
        },
        "response": {
          "label": "Temps de Réponse",
          "value": "Dans les 24 heures",
          "description": "Typiquement le même jour pour les projets urgents"
        }
      }
    },
    "social": {
      "title": "Connecter & Suivre",
      "items": {
        "linkedin": {
          "name": "LinkedIn",
          "description": "Réseau professionnel et mises à jour"
        },
        "github": {
          "name": "GitHub",
          "description": "Dépôts de code et contributions"
        },
        "twitter": {
          "name": "Twitter",
          "description": "Insights de l'industrie et réflexions"
        },
        "instagram": {
          "name": "Instagram",
          "description": "Coulisses et processus"
        }
      }
    },
    "quickActions": {
      "title": "Actions Rapides",
      "items": [
        "Planifier un Appel de Consultation",
        "Télécharger la Méthodologie de Processus",
        "Voir des Exemples d'Études de Cas"
      ]
    },
    "projectBrief": {
      "title": "Brief de Projet Détaillé",
      "subtitle": "Besoin d'un devis complet ? Remplissez ce brief détaillé pour les projets complexes",
      "step": "Étape",
      "of": "sur",
      "stepTitle": {
        "1": "Informations de Contact & Aperçu du Projet",
        "2": "Fonctionnalités Clés",
        "3": "Exigences de Design & Techniques",
        "4": "Délais, Budget & Défis"
      },
      "stepDescription": {
        "1": "Commençons par vos coordonnées et les bases du projet",
        "2": "Quelles fonctionnalités sont essentielles pour votre projet ?",
        "3": "Définissez l'apparence, le style et les besoins techniques",
        "4": "Aidez-moi à comprendre vos délais et contraintes"
      },
      "contactInfo": {
        "title": "Vos Informations de Contact",
        "fields": {
          "name": {
            "label": "Nom Complet*",
            "placeholder": "Votre nom"
          },
          "email": {
            "label": "Adresse Email*",
            "placeholder": "votre@email.com"
          },
          "phone": {
            "label": "Numéro de Téléphone",
            "placeholder": "+1 (514) 555-0123"
          },
          "company": {
            "label": "Entreprise/Organisation",
            "placeholder": "Votre entreprise (optionnel)"
          }
        }
      },
      "overview": "Aperçu du Projet",
      "description": "Commençons par les bases de votre projet",
      "fields": {
        "goal": {
          "label": "Quel est votre objectif principal de projet ?*",
          "placeholder": "ex: Lancer une boutique e-commerce, construire un portfolio, créer une plateforme SaaS..."
        },
        "audience": {
          "label": "Qui est votre audience cible ?*",
          "placeholder": "ex: Jeunes professionnels, clients B2B, agences créatives..."
        },
        "inspiration": {
          "label": "Des sites d'inspiration ou de référence ?",
          "placeholder": "Partagez des URLs ou décrivez les styles que vous aimez..."
        }
      },
      "navigation": {
        "previous": "Précédent",
        "next": "Étape Suivante",
        "submit": "Générer le Brief de Projet"
      },
      "status": {
        "submitting": "Envoi en cours...",
        "success": {
          "title": "Succès !",
          "message": "Votre brief de projet a été soumis avec succès. Je vais l'examiner et vous répondre dans les 24-48 heures."
        },
        "error": {
          "title": "Soumission Échouée",
          "message": "Quelque chose s'est mal passé. Veuillez réessayer ou me contacter directement."
        }
      },
      "validation": {
        "nameRequired": "Veuillez entrer votre nom",
        "emailRequired": "Veuillez entrer votre email",
        "emailInvalid": "Veuillez entrer une adresse email valide",
        "projectGoalRequired": "Veuillez décrire l'objectif de votre projet",
        "targetAudienceRequired": "Veuillez décrire votre audience cible"
      }
    },
    "location": {
      "title": "Basé à Montréal",
      "description": "Travaillant avec des clients localement et internationalement. Disponible pour collaboration à distance et projets sur site.",
      "details": {
        "address": {
          "label": "Adresse",
          "value": "Montréal, Québec, Canada"
        },
        "timezone": {
          "label": "Fuseau Horaire",
          "value": "Heure de l'Est (UTC-5)"
        },
        "serviceArea": {
          "label": "Zone de Service",
          "value": "Mondiale (Distant & Local)"
        },
        "travel": {
          "label": "Voyage",
          "value": "Disponible pour projets sur site"
        }
      },
      "studio": {
        "name": "Studio Nicky Bruno",
        "tagline": "Hub de Technologie Créative",
        "location": "Montréal, QC"
      }
    },
    "faq": {
      "title": "Questions Fréquemment Posées",
      "subtitle": "Réponses rapides aux questions courantes sur le travail ensemble",
      "items": {
        "timeline": {
          "question": "Quel est votre délai de projet typique ?",
          "answer": "Les délais de projet varient selon la portée et la complexité :\n\n• Sites web simples : 2-4 semaines\n• Applications web complexes : 6-12 semaines\n• Projets d'intégration IA : 4-8 semaines\n• Rebranding complet + site web : 8-16 semaines\n\nJe fournis toujours des délais détaillés lors de notre consultation initiale, et je suis transparent sur tout retard ou changement potentiel tout au long du processus."
        },
        "international": {
          "question": "Travaillez-vous avec des clients internationaux ?",
          "answer": "Oui, je travaille avec des clients du monde entier. La plupart de mes projets sont réalisés à distance, mais je suis également disponible pour des projets sur site selon les besoins."
        },
        "aiServices": {
          "question": "Qu'est-ce qui est inclus dans vos services d'intégration IA ?",
          "answer": "Mes services d'intégration IA incluent l'automatisation de workflows, les chatbots intelligents, l'analyse de données automatisée, l'intégration avec des outils existants, et des solutions IA personnalisées adaptées à vos besoins spécifiques."
        },
        "revisions": {
          "question": "Comment gérez-vous les révisions de projet ?",
          "answer": "J'inclus un nombre spécifique de révisions dans chaque projet, généralement 2-3 rounds de révisions majeures. Je suis transparent sur ce qui est inclus et communique clairement tout changement de portée qui pourrait nécessiter des révisions supplémentaires."
        },
        "payment": {
          "question": "Quelle est votre structure de paiement ?",
          "answer": "Je travaille généralement avec un paiement initial de 50% pour commencer le projet, et le solde à la livraison. Pour les projets plus importants, nous pouvons établir des jalons de paiement. Je suis flexible et adapte la structure selon les besoins du projet."
        },
        "support": {
          "question": "Fournissez-vous un support continu après le lancement ?",
          "answer": "Oui ! J'offre des packages de maintenance continue, de mises à jour et de support pour m'assurer que votre projet continue de performer de manière optimale après le lancement. Cela inclut la surveillance, les mises à jour de sécurité, et le support technique."
        }
      },
      "cta": {
        "title": "Vous ne voyez pas votre question répondue ?",
        "button": "Demandez-moi directement"
      }
    },
    "cta": {
      "title": "Prêt à Transformer Votre Présence Numérique ?",
      "description": "Rejoignez la liste croissante d'entreprises et de créateurs qui ont élevé leur présence numérique avec un design de pointe, du développement et une intégration IA.",
      "buttons": {
        "startConversation": "Commencer une Conversation",
        "scheduleConsultation": "Planifier une Consultation"
      },
      "location": "Basé à Montréal • Servant des clients mondialement • Disponible pour projets distants et sur site"
    }
  }
}


================================================
FILE: src/i18n/messages/fr/global.json
================================================
{
  "navigation": {
    "home": "Accueil",
    "about": "À propos",
    "services": "Services",
    "portfolio": "Portfolio",
    "testimonials": "Témoignages",
    "contact": "Contact",
    "cta": "Démarrer un projet"
  },
  "common": {
    "loading": "Chargement...",
    "error": "Une erreur s'est produite",
    "retry": "Réessayer",
    "close": "Fermer",
    "open": "Ouvrir",
    "next": "Suivant",
    "previous": "Précédent",
    "submit": "Soumettre",
    "cancel": "Annuler",
    "save": "Enregistrer",
    "edit": "Modifier",
    "delete": "Supprimer",
    "view": "Voir",
    "learnMore": "En savoir plus",
    "getStarted": "Commencer",
    "readMore": "Lire la suite",
    "seeMore": "Voir plus",
    "showLess": "Voir moins",
    "showMore": "Voir plus",
    "viewProject": "Voir le projet",
    "viewCase": "Voir le cas",
    "viewCaseStudy": "Voir l'étude de cas",
    "liveDemo": "Démo en direct",
    "caseStudy": "Étude de Cas",
    "featuredProject": "Projet Vedette",
    "industryAwards": "Prix de l'Industrie",
    "communityLeader": "Leader Communautaire",
    "continuousLearning": "Apprentissage Continu",
    "creativeTechnologist": "Technologue Créatif"
  },
  "seo": {
    "title": "Nicky Bruno | Technologue Créatif & Concepteur d'Expérience",
    "description": "Découvrez l'expérience héroïque immersive de Nicky Bruno, le technologue créatif qui allie design, ingénierie et storytelling alimenté par l'IA.",
    "keywords": "technologue créatif, développement web, automatisation IA, systèmes de design, Montréal, Canada"
  },
  "meta": {
    "siteName": "Nicky Bruno",
    "author": "Nicky Bruno",
    "language": "fr",
    "charset": "utf-8"
  },
  "languageSwitcher": {
    "label": "Langue",
    "current": "Français",
    "switchTo": "Changer vers",
    "english": "English",
    "french": "Français",
    "ariaLabel": "Sélectionner la langue"
  },
  "footer": {
    "title": "Nicky Bruno",
    "subtitle": "Technologue Créatif & Consultant Numérique",
    "description": "Construire des expériences numériques modernes qui combinent technologie de pointe et design centré sur l'utilisateur.",
    "sections": {
      "services": {
        "title": "Services",
        "items": [
          "Développement Web",
          "IA & Automatisation",
          "Design & Branding",
          "Stratégie Numérique"
        ]
      },
      "company": {
        "title": "Entreprise",
        "items": [
          "À propos",
          "Portfolio",
          "Témoignages",
          "Contact"
        ]
      },
      "resources": {
        "title": "Ressources",
        "items": [
          "Blog",
          "Études de Cas",
          "Documentation",
          "Support"
        ]
      },
      "legal": {
        "title": "Légal",
        "items": [
          "Politique de Confidentialité",
          "Conditions d'Utilisation",
          "Politique des Cookies",
          "Conformité RGPD"
        ]
      }
    },
    "contact": {
      "title": "Entrer en Contact",
      "email": "hello@nickybruno.com",
      "location": "Montréal, Canada",
      "description": "Disponible pour le travail à distance dans le monde entier"
    },
    "social": {
      "title": "Suivez-moi",
      "linkedin": "LinkedIn",
      "twitter": "Twitter",
      "github": "GitHub",
      "dribbble": "Dribbble"
    },
    "newsletter": {
      "title": "Restez Informé",
      "description": "Recevez les dernières informations sur la technologie créative et l'innovation numérique.",
      "placeholder": "Entrez votre email",
      "button": "S'abonner",
      "success": "Merci de vous être abonné !",
      "error": "Quelque chose s'est mal passé. Veuillez réessayer."
    },
    "copyright": "© 2024 Nicky Bruno. Tous droits réservés.",
    "madeWith": "Fait avec ❤️ à Montréal",
    "backToTop": "Retour en haut"
  }
}



================================================
FILE: src/i18n/messages/fr/home.json
================================================
{
  "metadata": {
    "title": "Nicky Bruno | Technologue Créatif & Designer d'Expérience",
    "description": "Plongez dans l'expérience héroïque immersive de Nicky Bruno, le technologue créatif qui fusionne design, ingénierie et narration pilotée par l'IA.",
    "ogTitle": "Nicky Bruno | Technologue Créatif",
    "ogDescription": "Naviguez une interface d'inspiration holographique présentant l'innovation et le savoir-faire derrière le travail de Nicky Bruno.",
    "ogSiteName": "Nicky Bruno"
  },
  "floatingTaglines": {
    "one": "Sites Web",
    "two": "Automatisation",
    "three": "Systèmes de design",
    "four": "Stratégie",
    "five": "Flux de travail IA",
    "six": "Résultats significatifs"
  },
  "hero": {
    "title": "Je construis des systèmes numériques modernes qui simplifient votre entreprise et vous font ressortir.",
    "subtitle": "Sites Web • Automatisation • Design • Stratégie",
    "description": "Des sites web et de l'automatisation au design et au marketing — je vous aide à travailler plus intelligemment, pas plus dur.",
    "ctaPrimary": "Voir mon travail",
    "ctaSecondary": "Réserver un appel de découverte",
    "stats": {
      "experience": {
        "value": "20+",
        "label": "Années d'expérience"
      },
      "projects": {
        "value": "80+",
        "label": "Projets livrés"
      },
      "hoursSaved": {
        "value": "4,000+",
        "label": "Heures économisées pour les équipes"
      }
    },
    "status": "Disponible pour des projets",
    "response": "Réponse dans les 24h",
    "portraitAlt": "Nicky Bruno - Technologue Créatif"
  },
  "intro": {
    "greeting": "Salut, je suis Nicky Bruno, un technologue créatif et consultant numérique de Montréal, Canada.",
    "tagline": "J'aide les particuliers, les startups et les entreprises établies à construire des sites web modernes, des systèmes intelligents et des automatisations IA qui font gagner du temps, réduisent le stress et sont magnifiques.",
    "paragraph": "Dans le monde d'aujourd'hui, votre présence numérique est tout — que vous soyez un restaurant local, un entrepreneur, un agent immobilier ou une marque en ligne en croissance. Mais la vérité est que la plupart des gens n'ont pas le temps ou les connaissances pour gérer les sites web, les configurations techniques ou les outils d'automatisation. C'est là que j'interviens. Je combine le design, la programmation et l'intelligence artificielle pour simplifier vos opérations, vous aider à attirer plus de clients et libérer votre temps pour vous concentrer sur ce qui compte vraiment — faire fonctionner votre entreprise."
  },
  "capabilities": {
    "title": "Ce que je fais",
    "subtitle": "Aperçu rapide",
    "description": "Solutions pratiques, modernes et centrées sur l'humain à travers le design, l'ingénierie et l'automatisation.",
    "cta": "En savoir plus",
    "items": {
      "webDesign": {
        "title": "Design & Développement Web",
        "description": "Sites web rapides et adaptés aux mobiles qui ont l'air géniaux et convertissent les visiteurs en clients."
      },
      "automation": {
        "title": "Automatisation & Outils IA",
        "description": "Économisez des heures de travail répétitif chaque semaine avec des automatisations personnalisées (ex: envoi de devis, collecte de formulaires, planification de clients)."
      },
      "brandStrategy": {
        "title": "Stratégie de Marque & Numérique",
        "description": "Aidez-vous à vous démarquer en ligne avec une image professionnelle et une communication claire."
      }
    }
  },
  "benefits": {
    "title": "Avantages Concrets",
    "subtitle": "Pourquoi les entreprises choisissent de travailler avec moi :",
    "items": {
      "timeSavings": {
        "icon": "💰",
        "title": "Économisez jusqu'à 10+ heures par semaine grâce à l'automatisation intelligente.",
        "example": "Exemple : une entreprise de nettoyage locale envoie maintenant automatiquement des factures et des rappels en utilisant un workflow n8n que j'ai construit — plus d'emails manuels !"
      },
      "visibility": {
        "icon": "🚀",
        "title": "Augmentez la visibilité en ligne avec des sites web optimisés pour le SEO et Google Business.",
        "example": "Exemple : un client restaurant a vu une augmentation de 45% des réservations dans les 2 mois suivant le lancement de son nouveau site."
      },
      "understanding": {
        "icon": "🧠",
        "title": "Rendez la technologie compréhensible.",
        "example": "Je ne parle pas en jargon — j'explique comment les choses fonctionnent en langage simple pour que vous vous sentiez toujours en contrôle."
      }
    }
  },
  "loading": {
    "title": "Préparation de votre expérience",
    "steps": {
      "one": "Initialisation des systèmes créatifs…",
      "two": "Chargement des modules d'automatisation…",
      "three": "Connexion des flux de données…",
      "four": "Calibrage des couches d'expérience…",
      "five": "Prêt à construire quelque chose de remarquable."
    }
  },
  "personalIntro": {
    "title": "Introduction Personnelle",
    "greeting": "Salut, je suis Nicky Bruno",
    "subtitle": "Technologue Créatif & Consultant Numérique",
    "description": "J'aide les entreprises à transformer leur présence numérique grâce à des solutions innovantes qui combinent technologie de pointe et design centré sur l'utilisateur.",
    "cta": "En savoir plus"
  },
  "learnMore": {
    "title": "En savoir plus",
    "subtitle": "Section ce que je fais",
    "description": "Découvrez comment je peux aider votre entreprise à réussir dans le paysage numérique.",
    "cta": "En savoir plus"
  },
  "realResults": {
    "title": "Résultats Concrets",
    "subtitle": "En savoir plus",
    "description": "Voyez l'impact mesurable de mon travail sur des entreprises comme la vôtre.",
    "cta": "En savoir plus"
  },
  "techArsenal": {
    "title": "Arsenal Technologique",
    "subtitle": "Survolez pour interagir • Appuyez sur les icônes pour en savoir plus",
    "description": "Explorez les technologies et outils que j'utilise pour construire des expériences numériques exceptionnelles.",
    "mostUsed": "Les Plus Utilisés",
    "cta": "En savoir plus"
  },
  "featuredProjects": {
    "title": "Projets Vedettes",
    "subtitle": "Travail sélectionné qui livre des résultats",
    "description": "Stratégie, design et ingénierie travaillant ensemble. Explorez 3 résultats ci-dessous.",
    "projects": {
      "sofia": {
        "year": "2025",
        "type": "Étude de Cas",
        "title": "Sofia AI Desk",
        "description": "Support client automatisé avec un tableau de bord clair — ~60% de réponses plus rapides.",
        "cta": "Voir le projet"
      },
      "nextxlevel": {
        "year": "2024",
        "type": "Étude de Cas",
        "title": "Next X Level",
        "description": "E‑commerce bilingue avec UX mobile propre et mises à jour de produits automatisées.",
        "cta": "Voir le projet"
      },
      "lumicerra": {
        "year": "2023",
        "type": "Étude de Cas",
        "title": "Lumicerra Labs",
        "description": "Tableau de bord en temps réel pour éclairage LED intelligent avec insights énergétiques clairs.",
        "cta": "Voir le projet"
      }
    },
    "cta": "Explorer le portfolio complet"
  },
  "testimonials": {
    "title": "Témoignages",
    "subtitle": "Ce que disent les clients sur le travail avec moi",
    "description": "Écoutez les entreprises qui ont transformé leur présence numérique grâce à notre collaboration.",
    "badge": "Témoignages",
    "heading": "Preuve en résultats concrets",
    "subheading": "Communication claire, livraison fiable et résultats mesurables pour les équipes qui bougent vite.",
    "items": [
      {
        "name": "Équipe Opérations Sofia",
        "role": "Opérations",
        "company": "Sofia AI Desk",
        "content": "Nicky a simplifié tout notre workflow — nous avons économisé des heures chaque semaine.",
        "projectType": "Automatisation IA"
      },
      {
        "name": "Alexandra Thompson",
        "role": "PDG",
        "company": "InnovateTech Solutions",
        "content": "Le mélange de vision créative et d'expertise technique de Nicky a révolutionné notre processus. Les résultats parlent d'eux-mêmes.",
        "projectType": "Design de Plateforme"
      },
      {
        "name": "Marcus Chen",
        "role": "Directeur Créatif",
        "company": "Pixel Perfect Agency",
        "content": "Un partenaire créatif qui parle couramment le code. Des solutions élégantes et performantes qui correspondaient à notre ambition.",
        "projectType": "Web Interactif"
      }
    ]
  },
  "techStack": {
    "title": "Ce que j'utilise",
    "subtitle": "Survoler pour interagir • Toucher les icônes pour en savoir plus",
    "description": "Une collection curée de technologies avec lesquelles je travaille quotidiennement pour construire des expériences numériques modernes.",
    "mostUsed": "Les Plus Utilisés",
    "tabs": {
      "all": "Tout",
      "core": "Stack Principal",
      "automation": "Automatisation & IA",
      "cloud": "Cloud & Infra",
      "backend": "Backend & API",
      "design": "Design & Outils"
    },
    "tools": {
      "nextjs": {
        "name": "Next.js",
        "description": "Framework React pour la production",
        "url": "https://nextjs.org"
      },
      "react": {
        "name": "React",
        "description": "Bibliothèque JavaScript pour construire des interfaces",
        "url": "https://react.dev"
      },
      "typescript": {
        "name": "TypeScript",
        "description": "JavaScript typé à grande échelle",
        "url": "https://typescriptlang.org"
      },
      "tailwind": {
        "name": "Tailwind CSS",
        "description": "Framework CSS utility-first",
        "url": "https://tailwindcss.com"
      },
      "supabase": {
        "name": "Supabase",
        "description": "Alternative open source à Firebase",
        "url": "https://supabase.com"
      },
      "postgresql": {
        "name": "PostgreSQL",
        "description": "Base de données open source avancée",
        "url": "https://postgresql.org"
      },
      "prisma": {
        "name": "Prisma",
        "description": "ORM nouvelle génération pour Node.js",
        "url": "https://prisma.io"
      },
      "nodejs": {
        "name": "Node.js",
        "description": "Environnement d'exécution JavaScript",
        "url": "https://nodejs.org"
      },
      "n8n": {
        "name": "n8n",
        "description": "Plateforme d'automatisation de workflow",
        "url": "https://n8n.io"
      },
      "openai": {
        "name": "OpenAI",
        "description": "Recherche et déploiement IA",
        "url": "https://openai.com"
      },
      "zapier": {
        "name": "Zapier",
        "description": "Plateforme d'automatisation pour workflows",
        "url": "https://zapier.com"
      },
      "docker": {
        "name": "Docker",
        "description": "Plateforme de conteneurisation",
        "url": "https://docker.com"
      },
      "netlify": {
        "name": "Netlify",
        "description": "Plateforme de développement web",
        "url": "https://netlify.com"
      },
      "cloudflare": {
        "name": "Cloudflare",
        "description": "Performance et sécurité web",
        "url": "https://cloudflare.com"
      },
      "javascript": {
        "name": "JavaScript",
        "description": "Langage de programmation dynamique",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript"
      },
      "python": {
        "name": "Python",
        "description": "Langage de programmation de haut niveau",
        "url": "https://python.org"
      },
      "mongodb": {
        "name": "MongoDB",
        "description": "Base de données document NoSQL",
        "url": "https://mongodb.com"
      },
      "graphql": {
        "name": "GraphQL",
        "description": "Langage de requête pour APIs",
        "url": "https://graphql.org"
      },
      "aws": {
        "name": "AWS",
        "description": "Plateforme cloud Amazon Web Services",
        "url": "https://aws.amazon.com"
      },
      "firebase": {
        "name": "Firebase",
        "description": "Plateforme mobile et web de Google",
        "url": "https://firebase.google.com"
      },
      "git": {
        "name": "Git",
        "description": "Système de contrôle de version",
        "url": "https://git-scm.com"
      },
      "redux": {
        "name": "Redux",
        "description": "Conteneur d'état prévisible",
        "url": "https://redux.js.org"
      },
      "vite": {
        "name": "Vite",
        "description": "Outillage frontend nouvelle génération",
        "url": "https://vitejs.dev"
      },
      "webpack": {
        "name": "Webpack",
        "description": "Bundler de modules JavaScript",
        "url": "https://webpack.js.org"
      },
      "huggingface": {
        "name": "Hugging Face",
        "description": "Communauté IA et hub de modèles",
        "url": "https://huggingface.co"
      },
      "langchain": {
        "name": "LangChain",
        "description": "Framework pour applications LLM",
        "url": "https://langchain.com"
      },
      "ollama": {
        "name": "Ollama",
        "description": "Déploiement LLM local",
        "url": "https://ollama.ai"
      },
      "replicate": {
        "name": "Replicate",
        "description": "Plateforme de déploiement de modèles IA",
        "url": "https://replicate.com"
      },
      "vapi": {
        "name": "Vapi",
        "description": "Plateforme IA vocale",
        "url": "https://vapi.ai"
      },
      "cursor": {
        "name": "Cursor AI",
        "description": "Éditeur de code alimenté par l'IA",
        "url": "https://cursor.sh"
      },
      "chatgpt": {
        "name": "ChatGPT",
        "description": "Assistant conversationnel IA",
        "url": "https://chat.openai.com"
      },
      "anthropic": {
        "name": "Claude",
        "description": "Assistant IA par Anthropic",
        "url": "https://anthropic.com"
      },
      "airflow": {
        "name": "Apache Airflow",
        "description": "Plateforme d'orchestration de workflow",
        "url": "https://airflow.apache.org"
      },
      "vercel": {
        "name": "Vercel",
        "description": "Plateforme cloud frontend",
        "url": "https://vercel.com"
      },
      "railway": {
        "name": "Railway",
        "description": "Plateforme de déploiement cloud",
        "url": "https://railway.app"
      },
      "digitalocean": {
        "name": "DigitalOcean",
        "description": "Fournisseur d'infrastructure cloud",
        "url": "https://digitalocean.com"
      },
      "hetzner": {
        "name": "Hetzner",
        "description": "Fournisseur cloud européen",
        "url": "https://hetzner.com"
      },
      "caddy": {
        "name": "Caddy",
        "description": "Serveur web moderne",
        "url": "https://caddyserver.com"
      },
      "traefik": {
        "name": "Traefik",
        "description": "Proxy inverse cloud-native",
        "url": "https://traefik.io"
      },
      "portainer": {
        "name": "Portainer",
        "description": "Interface de gestion de conteneurs",
        "url": "https://portainer.io"
      },
      "kubernetes": {
        "name": "Kubernetes",
        "description": "Plateforme d'orchestration de conteneurs",
        "url": "https://kubernetes.io"
      },
      "fastapi": {
        "name": "FastAPI",
        "description": "Framework web Python moderne",
        "url": "https://fastapi.tiangolo.com"
      },
      "nestjs": {
        "name": "NestJS",
        "description": "Framework Node.js progressif",
        "url": "https://nestjs.com"
      },
      "express": {
        "name": "Express.js",
        "description": "Framework web pour Node.js",
        "url": "https://expressjs.com"
      },
      "redis": {
        "name": "Redis",
        "description": "Magasin de structures de données en mémoire",
        "url": "https://redis.io"
      },
      "meilisearch": {
        "name": "Meilisearch",
        "description": "Moteur de recherche rapide",
        "url": "https://meilisearch.com"
      },
      "strapi": {
        "name": "Strapi",
        "description": "Plateforme CMS headless",
        "url": "https://strapi.io"
      },
      "payload": {
        "name": "Payload CMS",
        "description": "CMS headless moderne",
        "url": "https://payloadcms.com"
      },
      "medusajs": {
        "name": "MedusaJS",
        "description": "Plateforme e-commerce",
        "url": "https://medusajs.com"
      },
      "shopify": {
        "name": "Shopify",
        "description": "Plateforme e-commerce",
        "url": "https://shopify.com"
      },
      "figma": {
        "name": "Figma",
        "description": "Outil de design collaboratif",
        "url": "https://figma.com"
      },
      "adobe": {
        "name": "Adobe Creative Cloud",
        "description": "Suite logicielle créative",
        "url": "https://adobe.com"
      },
      "canva": {
        "name": "Canva",
        "description": "Plateforme de design graphique",
        "url": "https://canva.com"
      },
      "framer": {
        "name": "Framer",
        "description": "Outil de design interactif",
        "url": "https://framer.com"
      },
      "sketch": {
        "name": "Sketch",
        "description": "Boîte à outils de design numérique",
        "url": "https://sketch.com"
      },
      "threejs": {
        "name": "Three.js",
        "description": "Bibliothèque JavaScript 3D",
        "url": "https://threejs.org"
      },
      "motion": {
        "name": "Framer Motion",
        "description": "Bibliothèque d'animation pour React",
        "url": "https://framer.com/motion"
      },
      "illustrator": {
        "name": "Adobe Illustrator",
        "description": "Éditeur de graphiques vectoriels",
        "url": "https://adobe.com/products/illustrator"
      },
      "photoshop": {
        "name": "Adobe Photoshop",
        "description": "Logiciel d'édition d'images",
        "url": "https://adobe.com/products/photoshop"
      },
      "aftereffects": {
        "name": "After Effects",
        "description": "Logiciel de motion graphics",
        "url": "https://adobe.com/products/aftereffects"
      }
    }
  }
}



================================================
FILE: src/i18n/messages/fr/portfolio.json
================================================
{
  "title": "Portfolio",
  "subtitle": "Projets Vedettes & Études de Cas",
  "description": "Explorez mon travail récent et voyez comment j'ai aidé les entreprises à transformer leur présence numérique.",
  "metadata": {
    "title": "Portfolio - Nicky Bruno | Technologue Créatif",
    "description": "Plongez dans l'automatisation IA, les expériences web immersives et les produits numériques stratégiques créés par Nicky Bruno.",
    "ogTitle": "Portfolio - Nicky Bruno",
    "ogDescription": "Études de cas et projets vedettes couvrant les plateformes IA, le design expérientiel et les constructions full-stack."
  },
  "featured": "Vedette",
  "viewDetails": "Voir les Détails",
  "projectOverview": "Aperçu du Projet",
  "howItWasMade": "Comment C'était Fait",
  "projectDetails": "Détails du Projet",
  "client": "Client",
  "duration": "Durée",
  "industry": "Industrie",
  "technologiesUsed": "Technologies Utilisées",
  "resultsImpact": "Résultats & Impact",
  "viewLiveSite": "Voir le Site en Direct",
  "keyFeatures": "Fonctionnalités Clés",
  "sourceCode": "Code Source",
  "projects": {
    "aiaa": {
      "title": "AIAA.dev - Plateforme d'Automatisation IA",
      "type": "Plateforme IA",
      "description": "Plateforme d'automatisation IA révolutionnaire qui rationalise les flux de travail créatifs et améliore la productivité grâce à l'automatisation intelligente des tâches.",
      "fullDescription": "AIAA.dev représente l'avenir de l'automatisation créative, combinant une technologie IA de pointe avec un design intuitif pour créer une plateforme qui comprend vraiment les flux de travail créatifs. Ce projet illustre la fusion parfaite de l'intelligence artificielle et de la créativité humaine, permettant aux professionnels d'automatiser les tâches répétitives tout en maintenant le contrôle créatif.\n\nLa plateforme propose des algorithmes d'apprentissage automatique avancés qui apprennent du comportement des utilisateurs, des analyses prédictives pour l'optimisation des flux de travail, et une intégration transparente avec les outils créatifs populaires. Construite avec l'évolutivité à l'esprit, elle sert des milliers de professionnels créatifs dans le monde entier.",
      "client": "AIAA Labs",
      "industry": "Technologie",
      "duration": "8 mois",
      "metrics": {
        "users": { "label": "Utilisateurs", "value": "10K+" },
        "automation": { "label": "Automatisation", "value": "85%" },
        "timeSaved": { "label": "Temps Économisé", "value": "40h/semaine" }
      },
      "features": [
        "Automatisation intelligente des flux de travail",
        "Outils de collaboration en temps réel",
        "Tableau de bord d'analyses avancées",
        "Formation de modèles IA personnalisés",
        "Intégrations API",
        "Support multi-plateforme"
      ],
      "process": [
        {
          "title": "Recherche & Découverte",
          "description": "Conduit des recherches utilisateur approfondies et une analyse concurrentielle pour comprendre les points de douleur dans les flux de travail créatifs."
        },
        {
          "title": "Conception d'Architecture IA",
          "description": "Conçu une architecture IA évolutive utilisant TensorFlow et des réseaux de neurones personnalisés pour l'automatisation des tâches."
        },
        {
          "title": "Développement Frontend",
          "description": "Construit une interface React responsive avec des mises à jour en temps réel et une expérience utilisateur intuitive."
        },
        {
          "title": "Intégration Backend",
          "description": "Développé un backend Node.js robuste avec MongoDB pour la gestion des données et AWS pour l'évolutivité."
        },
        {
          "title": "Tests & Optimisation",
          "description": "Implémenté une suite de tests complète et une optimisation des performances pour le déploiement en production."
        }
      ],
      "testimonial": {
        "quote": "AIAA.dev a transformé notre processus créatif. Ce qui prenait des heures se fait maintenant automatiquement, permettant à notre équipe de se concentrer sur ce qui compte le plus - la créativité.",
        "author": "Sarah Chen",
        "role": "Directrice Créative, Studio de Design"
      }
    },
    "montrealTechHub": {
      "title": "Montreal Tech Hub",
      "type": "Plateforme Web",
      "description": "Plateforme communautaire connectant l'écosystème technologique de Montréal avec des événements, du réseautage et des outils de collaboration.",
      "fullDescription": "Montreal Tech Hub sert de cœur numérique à la communauté technologique florissante de Montréal. Cette plateforme rassemble développeurs, designers, entrepreneurs et passionnés de technologie dans un espace unifié pour la collaboration et la croissance.\n\nLe projet propose la gestion d'événements, le réseautage professionnel, l'intégration de tableaux d'emplois et des forums communautaires. Construit avec des technologies web modernes, il offre une expérience transparente sur tous les appareils tout en maintenant la nature bilingue essentielle à la culture de Montréal.",
      "client": "Communauté Tech de Montréal",
      "industry": "Communauté",
      "duration": "6 mois",
      "metrics": {
        "members": { "label": "Membres", "value": "2.5K+" },
        "events": { "label": "Événements", "value": "150+" },
        "engagement": { "label": "Engagement", "value": "78%" }
      },
      "features": [
        "Système de gestion d'événements",
        "Réseautage professionnel",
        "Intégration de tableau d'emplois",
        "Support bilingue",
        "Forums communautaires",
        "Design mobile-first"
      ],
      "process": [
        {
          "title": "Recherche Communautaire",
          "description": "Analysé les besoins de la communauté tech de Montréal à travers des sondages et des entretiens avec les parties prenantes clés."
        },
        {
          "title": "Architecture de Plateforme",
          "description": "Conçu une architecture évolutive utilisant Next.js et PostgreSQL pour des performances optimales."
        },
        {
          "title": "Design UI/UX",
          "description": "Créé un design d'interface intuitif qui reflète l'identité bilingue et multiculturelle de Montréal."
        },
        {
          "title": "Développement & Tests",
          "description": "Construit une plateforme responsive avec des tests complets sur différents appareils et navigateurs."
        }
      ],
      "testimonial": {
        "quote": "Cette plateforme est devenue essentielle pour la communauté tech de Montréal. C'est là où nous nous connectons, collaborons et grandissons ensemble.",
        "author": "Marc Dubois",
        "role": "Entrepreneur Tech"
      }
    },
    "ecoTrack": {
      "title": "EcoTrack Analytics",
      "type": "Plateforme de Données",
      "description": "Plateforme d'analyses de durabilité aidant les entreprises à suivre et optimiser leur impact environnemental.",
      "fullDescription": "EcoTrack Analytics permet aux entreprises de prendre des décisions basées sur les données concernant leur impact environnemental. La plateforme combine des capteurs IoT, l'apprentissage automatique et de belles visualisations pour fournir des insights actionnables pour les initiatives de durabilité.\n\nProposant une surveillance en temps réel, des analyses prédictives et des rapports complets, EcoTrack aide les organisations à réduire leur empreinte carbone tout en maintenant l'efficacité opérationnelle. La plateforme s'intègre avec les systèmes d'entreprise existants et fournit des tableaux de bord personnalisables pour différents besoins de parties prenantes.",
      "client": "Solutions GreenTech",
      "industry": "Durabilité",
      "duration": "10 mois",
      "metrics": {
        "co2Reduced": { "label": "CO2 Réduit", "value": "25%" },
        "companies": { "label": "Entreprises", "value": "50+" },
        "dataPoints": { "label": "Points de Données", "value": "1M+" }
      },
      "features": [
        "Surveillance en temps réel",
        "Analyses prédictives",
        "Tableaux de bord personnalisés",
        "Intégration IoT",
        "Rapportage automatisé",
        "Suivi d'empreinte carbone"
      ],
      "process": [
        {
          "title": "Recherche en Durabilité",
          "description": "Recherché les métriques d'impact environnemental et les meilleures pratiques de durabilité à travers les industries."
        },
        {
          "title": "Architecture de Données",
          "description": "Conçu une architecture de base de données de séries temporelles utilisant InfluxDB pour gérer de gros volumes de données de capteurs."
        },
        {
          "title": "Développement de Visualisation",
          "description": "Créé des visualisations de données interactives utilisant D3.js pour la représentation de données environnementales complexes."
        },
        {
          "title": "Développement API",
          "description": "Construit un backend FastAPI haute performance pour le traitement de données en temps réel et les analyses."
        }
      ],
      "testimonial": {
        "quote": "EcoTrack nous a donné une visibilité sans précédent sur notre impact environnemental. Nous avons réduit notre empreinte carbone de 25% la première année.",
        "author": "Jennifer Walsh",
        "role": "Directrice de Durabilité"
      }
    },
    "financeFlow": {
      "title": "FinanceFlow Mobile",
      "type": "Application Mobile",
      "description": "Application de gestion financière personnelle avec des insights alimentés par l'IA et des fonctionnalités de budgétisation automatisées.",
      "fullDescription": "FinanceFlow Mobile révolutionne la gestion financière personnelle en combinant un design intuitif avec des capacités IA puissantes. L'application apprend des modèles de dépenses des utilisateurs pour fournir des insights personnalisés et des recommandations de budgétisation automatisées.\n\nConstruite avec React Native pour la compatibilité cross-platform, l'application propose l'intégration bancaire, la catégorisation des dépenses, le suivi d'objectifs et la gestion de portefeuille d'investissement. Des mesures de sécurité avancées garantissent que les données financières des utilisateurs restent protégées tout en offrant une expérience utilisateur transparente.",
      "client": "Startup FinTech",
      "industry": "Services Financiers",
      "duration": "12 mois",
      "metrics": {
        "downloads": { "label": "Téléchargements", "value": "50K+" },
        "savings": { "label": "Économies", "value": "$2M+" },
        "rating": { "label": "Note", "value": "4.8★" }
      },
      "features": [
        "Insights alimentés par l'IA",
        "Budgétisation automatisée",
        "Intégration bancaire",
        "Suivi d'investissements",
        "Gestion d'objectifs",
        "Catégorisation des dépenses"
      ],
      "process": [
        {
          "title": "Recherche d'Expérience Utilisateur",
          "description": "Conduit des recherches UX approfondies pour comprendre les points de douleur de la gestion financière personnelle."
        },
        {
          "title": "Architecture de Sécurité",
          "description": "Implémenté des mesures de sécurité de niveau bancaire incluant le chiffrement et l'authentification sécurisée."
        },
        {
          "title": "Développement de Modèles IA",
          "description": "Développé des modèles d'apprentissage automatique pour l'analyse des modèles de dépenses et les recommandations de budget."
        },
        {
          "title": "Développement Cross-Platform",
          "description": "Construit une application de qualité native utilisant React Native pour les plateformes iOS et Android."
        }
      ],
      "testimonial": {
        "quote": "FinanceFlow a complètement changé la façon dont je gère mon argent. Les insights IA sont incroyablement précis et utiles.",
        "author": "David Kim",
        "role": "Utilisateur de l'App"
      }
    },
    "creativeStudio": {
      "title": "CreativeStudio Pro",
      "type": "Outil de Design",
      "description": "Plateforme de design collaborative avec édition en temps réel, contrôle de version et fonctionnalités de design assistées par l'IA.",
      "fullDescription": "CreativeStudio Pro est une plateforme de design de nouvelle génération qui combine la puissance des outils de design traditionnels avec des fonctionnalités de collaboration modernes et une assistance IA. Construite pour les équipes créatives, elle permet une collaboration transparente tout en maintenant la qualité et la cohérence du design.\n\nLa plateforme propose une édition collaborative en temps réel, des suggestions de design intelligentes, une gestion automatisée des actifs et un contrôle de version complet. Des algorithmes IA avancés aident les designers avec des suggestions de mise en page, la génération de palettes de couleurs et la maintenance de systèmes de design.",
      "client": "Agence de Design",
      "industry": "Outils Créatifs",
      "duration": "14 mois",
      "metrics": {
        "teams": { "label": "Équipes", "value": "500+" },
        "projects": { "label": "Projets", "value": "10K+" },
        "efficiency": { "label": "Efficacité", "value": "+60%" }
      },
      "features": [
        "Collaboration en temps réel",
        "Assistance IA au design",
        "Contrôle de version",
        "Gestion d'actifs",
        "Systèmes de design",
        "Automatisation d'export"
      ],
      "process": [
        {
          "title": "Analyse d'Outils de Design",
          "description": "Analysé les outils de design existants pour identifier les lacunes et les opportunités d'innovation."
        },
        {
          "title": "Architecture Temps Réel",
          "description": "Construit un système de collaboration en temps réel utilisant la technologie WebSocket et les transformations opérationnelles."
        },
        {
          "title": "Intégration IA",
          "description": "Intégré des modèles d'apprentissage automatique pour l'assistance au design et les suggestions automatisées."
        },
        {
          "title": "Optimisation des Performances",
          "description": "Optimisé le pipeline de rendu WebGL pour des performances fluides avec des designs complexes."
        }
      ],
      "testimonial": {
        "quote": "CreativeStudio Pro a transformé notre flux de travail de design. La collaboration en temps réel et les fonctionnalités IA sont révolutionnaires.",
        "author": "Lisa Rodriguez",
        "role": "Chef d'Équipe Design"
      }
    },
    "healthConnect": {
      "title": "Plateforme HealthConnect",
      "type": "Santé",
      "description": "Plateforme de télémédecine connectant les patients avec les prestataires de soins de santé à travers des consultations vidéo sécurisées.",
      "fullDescription": "La Plateforme HealthConnect répond au besoin croissant de soins de santé accessibles en fournissant une solution de télémédecine sécurisée et conviviale. La plateforme permet des connexions transparentes entre patients et prestataires de soins de santé tout en maintenant les plus hauts standards de sécurité des données médicales.\n\nProposant la planification de rendez-vous, des consultations vidéo sécurisées, des dossiers médicaux électroniques, la gestion d'ordonnances et le traitement des paiements, HealthConnect offre une expérience de soins de santé complète. La plateforme est conforme HIPAA et inclut des fonctionnalités avancées comme l'évaluation des symptômes alimentée par l'IA et l'intégration de surveillance de santé.",
      "client": "Réseau de Santé",
      "industry": "Santé",
      "duration": "16 mois",
      "metrics": {
        "consultations": { "label": "Consultations", "value": "25K+" },
        "providers": { "label": "Prestataires", "value": "200+" },
        "satisfaction": { "label": "Satisfaction", "value": "96%" }
      },
      "features": [
        "Appels vidéo sécurisés",
        "Planification de rendez-vous",
        "Dossiers médicaux électroniques",
        "Gestion d'ordonnances",
        "Traitement des paiements",
        "Conformité HIPAA"
      ],
      "process": [
        {
          "title": "Recherche de Conformité Santé",
          "description": "Recherché les exigences HIPAA et les standards de l'industrie de la santé pour le développement de plateforme sécurisée."
        },
        {
          "title": "Implémentation de Sécurité",
          "description": "Implémenté le chiffrement de bout en bout et l'authentification sécurisée pour la protection des données patients."
        },
        {
          "title": "Infrastructure Vidéo",
          "description": "Construit un système de consultation vidéo évolutif utilisant WebRTC pour une communication haute qualité et à faible latence."
        },
        {
          "title": "Tests d'Intégration",
          "description": "Conduit des tests approfondis avec des prestataires de soins de santé pour s'assurer que la plateforme répond aux besoins cliniques."
        }
      ],
      "testimonial": {
        "quote": "HealthConnect a rendu les soins de santé plus accessibles pour nos patients. La plateforme est intuitive et sécurisée.",
        "author": "Dr. Michael Thompson",
        "role": "Médecin de Soins Primaires"
      }
    }
  },
  "sections": {
    "hero": {
      "badge": "Présentation du Portfolio",
      "title": "Un Travail Qui Parle",
      "titleHighlight": "de Lui-Même",
      "description": "Explorez une collection soigneusement sélectionnée de projets qui démontrent la fusion du design, du développement et de l'innovation IA. Chaque pièce raconte une histoire de résolution créative de problèmes et d'excellence technique.",
      "stats": {
        "projects": "20+ Projets",
        "clients": "50+ Clients",
        "recognition": "Reconnaissance de l'Industrie"
      }
    },
    "featured": {
      "title": "Projets Vedettes",
      "subtitle": "Mettant en valeur mon meilleur travail"
    },
    "projects": {
      "title": "Tous les Projets",
      "description": "Filtrez par technologie, industrie ou type de projet pour explorer des domaines d'expertise spécifiques.",
      "emptyState": {
        "title": "Aucun projet trouvé",
        "description": "Essayez d'ajuster votre filtre pour voir plus de projets."
      }
    },
    "filters": {
      "all": "Tous les Projets",
      "ai": "IA & Automatisation",
      "web": "Plateformes Web",
      "mobile": "Applications Mobiles",
      "design": "Outils de Design",
      "healthcare": "Santé"
    },
    "cta": {
      "title": "Prêt à Créer Quelque Chose d'Extraordinaire ?",
      "description": "Collaborons sur votre prochain projet. Que ce soit l'automatisation IA, le développement web ou la technologie créative, je suis là pour donner vie à votre vision.",
      "buttons": {
        "startProject": "Démarrer un Projet",
        "downloadPortfolio": "Télécharger le Portfolio"
      }
    }
  }
}



================================================
FILE: src/i18n/messages/fr/services.json
================================================
{
  "title": "Services",
  "subtitle": "Solutions Numériques Complètes",
  "description": "Du développement web à l'automatisation IA, je fournis des solutions numériques de bout en bout qui aident votre entreprise à prospérer.",
  "more": "plus",
  "metadata": {
    "title": "Services - Nicky Bruno | Technologue Créatif",
    "description": "Explorez les services de design créatif, développement full-stack, automatisation IA et consultation stratégique par Nicky Bruno.",
    "ogTitle": "Services - Nicky Bruno",
    "ogDescription": "Services complets de technologie créative couvrant les systèmes de design, les constructions full-stack et l'automatisation intelligente."
  },
  "sections": {
    "overview": {
      "title": "Ce que j'offre",
      "subtitle": "Services de transformation numérique complets",
      "description": "Je fournis des solutions numériques complètes qui combinent le développement web moderne, l'automatisation IA et le design stratégique pour aider votre entreprise à réussir dans le paysage numérique d'aujourd'hui."
    },
    "services": {
      "webDevelopment": {
        "title": "Développement Web",
        "subtitle": "Sites web modernes et responsives",
        "description": "Sites web personnalisés construits avec les dernières technologies, optimisés pour les performances et l'expérience utilisateur.",
        "features": [
          "Design responsive pour tous les appareils",
          "Optimisation SEO",
          "Temps de chargement rapides",
          "Design UI/UX moderne",
          "Systèmes de gestion de contenu"
        ],
        "technologies": ["React", "Next.js", "TypeScript", "Tailwind CSS"]
      },
      "automation": {
        "title": "IA & Automatisation",
        "subtitle": "Solutions de workflow intelligentes",
        "description": "Automatisez les tâches répétitives et intégrez des capacités IA pour rationaliser les opérations de votre entreprise.",
        "features": [
          "Automatisation de workflow",
          "Chatbots alimentés par l'IA",
          "Automatisation du traitement des données",
          "Intégration avec les outils existants",
          "Solutions IA personnalisées"
        ],
        "technologies": ["OpenAI", "LangChain", "n8n", "Zapier"]
      },
      "design": {
        "title": "Design & Branding",
        "subtitle": "Identité visuelle professionnelle",
        "description": "Créez une identité de marque cohérente qui résonne avec votre audience et stimule l'engagement.",
        "features": [
          "Design d'identité de marque",
          "Logo et actifs visuels",
          "Design UI/UX",
          "Systèmes de design",
          "Directives de marque"
        ],
        "technologies": ["Figma", "Adobe Creative Suite", "Framer"]
      },
      "consulting": {
        "title": "Stratégie Numérique",
        "subtitle": "Conseil stratégique et planification",
        "description": "Conseil stratégique pour vous aider à prendre des décisions éclairées sur votre présence numérique et vos investissements technologiques.",
        "features": [
          "Planification de stratégie numérique",
          "Évaluation technologique",
          "Optimisation des processus",
          "Formation d'équipe",
          "Support continu"
        ],
        "technologies": ["Planification Stratégique", "Analyse de Processus", "Formation"]
      }
    }
  },
  "pricing": {
    "title": "Investissement",
    "subtitle": "Tarification transparente pour un travail de qualité",
    "description": "Chaque projet est unique, donc je fournis des devis personnalisés basés sur vos besoins et exigences spécifiques.",
    "contact": "Contactez-moi pour un devis détaillé adapté à votre projet."
  },
  "keyCapabilities": {
    "title": "Capacités Clés :",
    "items": {
      "webDevelopment": {
        "title": "Développement Web",
        "capabilities": [
          "Design responsive pour tous les appareils",
          "Optimisation SEO",
          "Temps de chargement rapides",
          "Design UI/UX moderne",
          "Systèmes de gestion de contenu"
        ],
        "featuredProject": {
          "title": "Projet Vedette",
          "name": "Reconstruction de Plateforme E-commerce",
          "description": "Migration complète de plateforme résultant en 50% de temps de chargement plus rapides et 25% d'augmentation des taux de conversion.",
          "cta": "Voir le Cas"
        },
        "certifications": [
          "Architecte Solutions AWS",
          "Professionnel React"
        ]
      },
      "automation": {
        "title": "IA & Automatisation",
        "capabilities": [
          "Automatisation de workflow",
          "Chatbots alimentés par l'IA",
          "Automatisation du traitement des données",
          "Intégration avec les outils existants",
          "Solutions IA personnalisées"
        ],
        "featuredProject": {
          "title": "Projet Vedette",
          "name": "Assistant IA Service Client",
          "description": "Chatbot intelligent déployé réduisant les tickets de support de 60% tout en maintenant 95% de satisfaction client.",
          "cta": "Voir le Cas"
        },
        "certifications": [
          "Spécialiste API OpenAI",
          "Certification IA Google"
        ]
      },
      "design": {
        "title": "Design & Branding",
        "capabilities": [
          "Design d'identité de marque",
          "Logo et actifs visuels",
          "Design UI/UX",
          "Systèmes de design",
          "Directives de marque"
        ],
        "featuredProject": {
          "title": "Projet Vedette",
          "name": "Rebranding Startup Tech Montréal",
          "description": "Refonte complète de l'identité visuelle résultant en 300% d'augmentation de l'engagement utilisateur et financement Series A réussi.",
          "cta": "Voir le Cas"
        },
        "certifications": [
          "Expert Certifié Adobe",
          "Design UX Google"
        ]
      },
      "consulting": {
        "title": "Planification Stratégique",
        "capabilities": [
          "Planification de stratégie numérique",
          "Évaluation technologique",
          "Optimisation des processus",
          "Formation d'équipe",
          "Support continu"
        ],
        "featuredProject": {
          "title": "Projet Vedette",
          "name": "Implémentation Stratégie Croissance SaaS",
          "description": "Refonte stratégique menant à 200% d'augmentation du trafic organique et 150% d'amélioration de la génération de leads.",
          "cta": "Voir le Cas"
        },
        "certifications": [
          "Certifié Google Analytics",
          "Stratégie HubSpot"
        ]
      }
    }
  },
  "sections": {
    "hero": {
      "badge": "Présentation des Capacités",
      "title": "Les Quatre Piliers de",
      "titleHighlight": "la Technologie Créative",
      "description": "Où le design, le code et l'IA rencontrent la créativité. Je ne construis pas seulement des sites web—je crée des expériences intelligentes qui pensent, s'adaptent et évoluent. L'avenir du travail créatif est là, et il est magnifiquement humain.",
      "buttons": {
        "startProject": "Démarrer Votre Projet",
        "watchVideo": "Regarder la Vidéo du Processus"
      }
    },
    "tabs": {
      "services": "Services Principaux",
      "process": "Mon Processus",
      "tech": "Stack Technologique",
      "stats": "Expérience"
    },
    "services": {
      "title": "Services Complets de Technologie Créative",
      "description": "Du concept au déploiement, je fournis des solutions de bout en bout qui comblent l'écart entre la vision créative et l'exécution technique.",
      "items": {
        "webDevelopment": {
          "title": "Développement Web",
          "description": "Sites web personnalisés construits avec les dernières technologies, optimisés pour les performances et l'expérience utilisateur.",
          "features": [
            "Design responsive pour tous les appareils",
            "Optimisation SEO",
            "Temps de chargement rapides",
            "Design UI/UX moderne",
            "Systèmes de gestion de contenu"
          ]
        },
        "automation": {
          "title": "IA & Automatisation",
          "description": "Automatisez les tâches répétitives et intégrez des capacités IA pour rationaliser les opérations de votre entreprise.",
          "features": [
            "Automatisation de workflow",
            "Chatbots alimentés par l'IA",
            "Automatisation du traitement des données",
            "Intégration avec les outils existants",
            "Solutions IA personnalisées"
          ]
        },
        "design": {
          "title": "Design & Branding",
          "description": "Créez une identité de marque cohérente qui résonne avec votre audience et stimule l'engagement.",
          "features": [
            "Design d'identité de marque",
            "Logo et actifs visuels",
            "Design UI/UX",
            "Systèmes de design",
            "Directives de marque"
          ]
        },
        "consulting": {
          "title": "Stratégie Numérique",
          "description": "Conseil stratégique pour vous aider à prendre des décisions éclairées sur votre présence numérique et vos investissements technologiques.",
          "features": [
            "Planification de stratégie numérique",
            "Évaluation technologique",
            "Optimisation des processus",
            "Formation d'équipe",
            "Support continu"
          ]
        }
      }
    },
    "process": {
      "title": "Mon Processus de Développement Éprouvé",
      "description": "Une approche systématique qui garantit que chaque projet livre des résultats exceptionnels grâce à la planification stratégique, l'exécution créative et l'optimisation intelligente.",
      "subtitle": "Comment nous travaillons ensemble",
      "keyDeliverables": "Livrables Clés :",
      "steps": {
        "discovery": {
          "phase": "Découverte",
          "title": "Analyse Stratégique",
          "description": "Plongée profonde dans vos objectifs commerciaux, votre audience cible et le paysage concurrentiel pour créer la stratégie de solution parfaite.",
          "duration": "1-2 semaines",
          "deliverables": {
            "0": "Recherche de Marché",
            "1": "Personas Utilisateurs",
            "2": "Audit Technique",
            "3": "Document de Stratégie"
          }
        },
        "design": {
          "phase": "Design",
          "title": "Développement Créatif",
          "description": "Transformer les insights en expériences visuelles convaincantes qui résonnent avec votre audience et stimulent l'engagement.",
          "duration": "2-3 semaines",
          "deliverables": {
            "0": "Wireframes",
            "1": "Design Visuel",
            "2": "Prototypes",
            "3": "Système de Design"
          }
        },
        "development": {
          "phase": "Développement",
          "title": "Implémentation Technique",
          "description": "Construire des solutions robustes et évolutives en utilisant des technologies de pointe et les meilleures pratiques pour des performances optimales.",
          "duration": "3-6 semaines",
          "deliverables": {
            "0": "Développement Frontend",
            "1": "Intégration Backend",
            "2": "Tests",
            "3": "Optimisation"
          }
        },
        "aiIntegration": {
          "phase": "Intégration IA",
          "title": "Couche d'Intelligence",
          "description": "Intégrer des capacités IA pour automatiser les processus, améliorer l'expérience utilisateur et fournir des insights intelligents.",
          "duration": "1-2 semaines",
          "deliverables": {
            "0": "Modèles IA",
            "1": "Scripts d'Automatisation",
            "2": "Configuration Analytics",
            "3": "Surveillance des Performances"
          }
        },
        "launch": {
          "phase": "Lancement",
          "title": "Déploiement & Croissance",
          "description": "Lancer votre solution avec une surveillance complète, une optimisation et un support continu pour une amélioration continue.",
          "duration": "1 semaine",
          "deliverables": {
            "0": "Déploiement Production",
            "1": "Surveillance des Performances",
            "2": "Formation Utilisateurs",
            "3": "Stratégie de Croissance"
          }
        }
      }
    },
    "tech": {
      "title": "Stack Technologique de Pointe",
      "description": "Exploiter les derniers outils et technologies pour construire des solutions évolutives, performantes et prêtes pour l'avenir.",
      "categories": {
        "frontend": {
          "title": "Frontend & Design",
          "description": "Créer de belles expériences utilisateur responsives"
        },
        "backend": {
          "title": "Backend & Infrastructure",
          "description": "Construire des solutions côté serveur évolutives et sécurisées"
        },
        "ai": {
          "title": "IA & Automatisation",
          "description": "Intégrer l'automatisation intelligente et l'apprentissage automatique"
        },
        "tools": {
          "title": "Outils & Workflow",
          "description": "Outils professionnels pour un développement efficace"
        }
      }
    },
    "stats": {
      "title": "Deux Décennies d'Excellence Créative",
      "description": "Expérience et expertise construites à travers des années de projets réussis et de clients satisfaits dans diverses industries.",
      "experience": {
        "value": "20+",
        "label": "Années d'Expérience",
        "description": "Deux décennies à maîtriser l'évolution du design traditionnel à la créativité alimentée par l'IA"
      },
      "projects": {
        "value": "150+",
        "label": "Projets Livrés",
        "description": "Lancements réussis à travers startups, agences et clients d'entreprise"
      },
      "clients": {
        "value": "50+",
        "label": "Clients Heureux",
        "description": "Partenariats à long terme construits sur la confiance, la qualité et les solutions innovantes"
      },
      "retention": {
        "value": "95%",
        "label": "Rétention Client",
        "description": "Les clients reviennent parce que nous livrons des résultats qui dépassent les attentes"
      }
    },
    "cta": {
      "title": "Prêt à Transformer Votre Vision ?",
      "description": "Collaborons pour créer quelque chose d'extraordinaire. Que vous ayez besoin de design, de développement ou d'intégration IA, je suis là pour donner vie à vos idées.",
      "buttons": {
        "startProject": "Démarrer Votre Projet",
        "scheduleConsultation": "Planifier une Consultation"
      },
      "features": {
        "freeConsultation": "Consultation gratuite de 30 min",
        "satisfactionGuarantee": "Garantie de satisfaction à 100%"
      }
    }
  }
}



================================================
FILE: src/styles/index.css
================================================
body {
  margin: 0;
  padding: 0;
  font-family: Inter;
}

* {
  box-sizing: border-box;
  line-height: normal;
  font-family: inherit;
  margin: unset;
}



================================================
FILE: src/styles/tailwind.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Core Colors */
    --color-background: #000000;
    /* black */
    --color-foreground: #FFFFFF;
    /* white */
    --color-border: #333333;
    /* gray-700 */
    --color-input: #1A1A1A;
    /* gray-900 */
    --color-ring: #00FFD1;
    /* neon-mint */

    /* Card Colors */
    --color-card: #1A1A1A;
    /* gray-900 */
    --color-card-foreground: #FFFFFF;
    /* white */

    /* Popover Colors */
    --color-popover: #1E1E1E;
    /* gray-800 */
    --color-popover-foreground: #FFFFFF;
    /* white */

    /* Muted Colors */
    --color-muted: #1E1E1E;
    /* gray-800 */
    --color-muted-foreground: #B0B0B0;
    /* gray-400 */

    /* Primary Colors */
    --color-primary: #00FFD1;
    /* neon-mint */
    --color-primary-foreground: #000000;
    /* black */

    /* Secondary Colors */
    --color-secondary: #1E1E1E;
    /* gray-800 */
    --color-secondary-foreground: #FFFFFF;
    /* white */

    /* Destructive Colors */
    --color-destructive: #FF6B6B;
    /* red-400 */
    --color-destructive-foreground: #FFFFFF;
    /* white */

    /* Accent Colors */
    --color-accent: #00FFD1;
    /* neon-mint */
    --color-accent-foreground: #000000;
    /* black */

    /* Success Colors */
    --color-success: #00FFD1;
    /* neon-mint */
    --color-success-foreground: #000000;
    /* black */

    /* Warning Colors */
    --color-warning: #FFB800;
    /* amber-500 */
    --color-warning-foreground: #000000;
    /* black */

    /* Error Colors */
    --color-error: #FF6B6B;
    /* red-400 */
    --color-error-foreground: #FFFFFF;
    /* white */

    /* Surface Colors */
    --color-surface: #1A1A1A;
    /* gray-900 */
    --color-surface-foreground: #FFFFFF;
    /* white */

    /* Text Colors */
    --color-text-primary: #FFFFFF;
    /* white */
    --color-text-secondary: #B0B0B0;
    /* gray-400 */

    /* Neon Mint Variations */
    --color-neon-mint: #00FFD1;
    /* neon-mint */
    --color-neon-mint-dark: #00D4AD;
    /* neon-mint-dark */
    --color-neon-mint-light: #33FFD9;
    /* neon-mint-light */

    /* Spacing */
    --spacing-xs: 0.5rem;
    /* 8px */
    --spacing-sm: 0.75rem;
    /* 12px */
    --spacing-md: 1.25rem;
    /* 20px */
    --spacing-lg: 2rem;
    /* 32px */
    --spacing-xl: 3.25rem;
    /* 52px */
    --spacing-2xl: 5.25rem;
    /* 84px */

    /* Border Radius */
    --radius: 0.5rem;
    /* 8px */
    --radius-sm: 0.25rem;
    /* 4px */
    --radius-lg: 0.75rem;
    /* 12px */
    --radius-xl: 1rem;
    /* 16px */

    /* Shadows */
    --shadow-glow: 0 0 20px rgba(0, 255, 209, 0.3);
    --shadow-glow-active: 0 0 40px rgba(0, 255, 209, 0.2);
    --shadow-card: 0 4px 20px rgba(0, 255, 209, 0.1), 0 8px 40px rgba(0, 255, 209, 0.05);
    --shadow-card-hover: 0 8px 40px rgba(0, 255, 209, 0.2), 0 16px 80px rgba(0, 255, 209, 0.1);
  }

  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
    font-family: 'Inter', sans-serif;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: 'Space Grotesk', sans-serif;
  }

  .font-mono {
    font-family: 'JetBrains Mono', monospace;
  }

  /* Holographic glow effects */
  .glow-neon {
    box-shadow: var(--shadow-glow);
  }

  .glow-neon-active {
    box-shadow: var(--shadow-glow-active);
  }

  /* Smooth animations */
  .transition-smooth {
    transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  .transition-fast {
    transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  .transition-slow {
    transition: all 400ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Magnetic hover effects */
  .magnetic-hover {
    transition: transform 200ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  .magnetic-hover:hover {
    transform: scale(1.02);
  }

  /* Cinematic parallax support */
  .parallax-layer {
    transform-style: preserve-3d;
    backface-visibility: hidden;
  }

  /* Neon text glow */
  .text-glow {
    text-shadow: 0 0 10px currentColor;
  }

  /* Icon Sphere Styles */
  .icon-sphere .tagcloud--item {
    transition: transform 0.2s ease, filter 0.2s ease, text-shadow 0.2s ease;
    cursor: pointer;
    color: var(--color-primary);
    font-weight: 500;
  }

  .icon-sphere .tagcloud--item:hover {
    transform: scale(1.1);
    filter: drop-shadow(0 0 10px rgba(0, 255, 208, 0.6));
    text-shadow: 0 0 10px rgba(0, 255, 208, 0.6);
  }

  .icon-sphere .tagcloud--item img {
    transition: filter 0.2s ease;
  }

  /* Marquee animation support */
  .marquee-container {
    overflow: hidden;
    position: relative;
  }

  .marquee-content {
    display: flex;
    animation: marquee 30s linear infinite;
  }

  @keyframes marquee {
    0% {
      transform: translateX(0);
    }

    100% {
      transform: translateX(-50%);
    }
  }

  /* Chatbot-specific animations */
  .chatbot-float {
    animation: chatbotFloat 3s ease-in-out infinite;
  }

  .chatbot-pulse {
    animation: chatbotPulse 2s ease-in-out infinite;
  }

  .chatbot-slide-up {
    animation: chatbotSlideUp 0.3s ease-out;
  }

  .chatbot-scale-in {
    animation: chatbotScaleIn 0.2s ease-out;
  }

  .chatbot-typing {
    animation: chatbotTyping 1.5s ease-in-out infinite;
  }

  @keyframes chatbotFloat {

    0%,
    100% {
      transform: translateY(0px);
    }

    50% {
      transform: translateY(-8px);
    }
  }

  @keyframes chatbotPulse {

    0%,
    100% {
      box-shadow: 0 0 20px rgba(0, 255, 209, 0.3);
    }

    50% {
      box-shadow: 0 0 30px rgba(0, 255, 209, 0.6);
    }
  }

  @keyframes chatbotSlideUp {
    0% {
      transform: translateY(20px);
      opacity: 0;
    }

    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes chatbotScaleIn {
    0% {
      transform: scale(0.9);
      opacity: 0;
    }

    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes chatbotTyping {

    0%,
    60%,
    100% {
      transform: translateY(0);
    }

    30% {
      transform: translateY(-10px);
    }
  }

  /* Chat message animations */
  .chat-message-enter {
    animation: chatMessageEnter 0.3s ease-out;
  }

  .chat-message-exit {
    animation: chatMessageExit 0.2s ease-in;
  }

  @keyframes chatMessageEnter {
    0% {
      transform: translateY(10px) scale(0.95);
      opacity: 0;
    }

    100% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }
  }

  @keyframes chatMessageExit {
    0% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }

    100% {
      transform: translateY(-10px) scale(0.95);
      opacity: 0;
    }
  }

  /* Chat input focus glow */
  .chat-input-focus {
    box-shadow: 0 0 0 2px rgba(0, 255, 209, 0.2);
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {

    .transition-smooth,
    .transition-fast,
    .transition-slow,
    .magnetic-hover {
      transition: none;
    }

    .parallax-layer {
      transform: none !important;
    }

    .marquee-content {
      animation: none;
    }

    .chatbot-float,
    .chatbot-pulse,
    .chatbot-slide-up,
    .chatbot-scale-in,
    .chatbot-typing,
    .chat-message-enter,
    .chat-message-exit {
      animation: none;
    }
  }
}


================================================
FILE: src/utils/cn.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]): string {
  return twMerge(clsx(...inputs));
}


